{"version":3,"sources":["StreamlitAudioRecorder.tsx","index.tsx"],"names":["StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","id","onClick","onClick_start","onClick_stop","onClick_reset","onStop","onStop_audio","type","backgroundColor","foregroundColor","canvasWidth","canvasHeight","controls","src","onClick_continue","setState","RecordState","START","Streamlit","setComponentValue","STOP","data","url","xhr","XMLHttpRequest","open","responseType","onload","e","myBlob","base64full","base64string","wavHeader44byte","chunk","chunkAudio","reader","this","status","response","startPointer","endPointer","size","slice","newStartPointer","Blob","FileReader","readAsDataURL","onloadend","base64data","result","String","myB64Chunk1","split","binary_string1","window","atob","len1","length","bytes1","Uint8Array","i","charCodeAt","myBuffer1","buffer","myB64Chunk2","binary_string2","len2","bytes2","j","myBuffer2","myFinalBuffer","byteLength","set","options","isFloat","numChannels","sampleRate","Float32Array","Uint16Array","numFrames","BYTES_PER_ELEMENT","Object","assign","bytesPerSample","format","blockAlign","byteRate","dataSize","bufferHeader","ArrayBuffer","dv","DataView","p","s","setUint8","setUint32","setUint16","headerBytes","wavBytes","binary","bytes","len","k","fromCharCode","btoa","send","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f8504e6.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  //\n\n\n\n\n\n  //\n\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      //var content = fs.readFileSync('file.ogg');\n      //Streamlit.setComponentValue(content)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n          // PROCESSING APPROACH A: all at once\n          /*var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }*/\n\n          // PROCESSING APPROACH B:\n          let cSize = 1024*100; // chunksize 100kB\n          var base64full = ''; // final base64 string\n          var base64string = ''; // substring for one chunk\n          let startPointer = 44; // start after WAV header\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          var wavHeader44byte = myBlob.slice(0, 43); // first 44 bytes\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize-1;\n            if (newStartPointer > endPointer){\n              // in case all chunks have been processed\n              newStartPointer = endPointer;\n              endReached = true;\n            };\n\n            // **BAUSTELLE 1**\n            // slice out one chunk from the initial WAV-Blob\n            // concatenate sliced out chunk with header bytes\n\n            // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n            var chunk = myBlob.slice(startPointer, newStartPointer);\n            //var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n            var chunkAudio = new Blob([wavHeader44byte, chunk]);\n\n            var reader = new FileReader(); // initiate file reader\n            reader.readAsDataURL(chunkAudio); // read in the chunk\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              // export chunk to string of base64 WAV Audio including header\n              base64string = String(base64data);\n\n\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                // convert base64full to ArrayBuffer\n                var myB64Data1  = base64full.split(',');\n                var myB64Chunk1 = myB64Data1[1];\n                var binary_string1 = window.atob(myB64Chunk1);\n                var len1 = binary_string1.length;\n                var bytes1 = new Uint8Array(len1);\n                for (var i = 0; i < len1; i++) {\n                    bytes1[i] = binary_string1.charCodeAt(i);\n                  }\n                var myBuffer1 = bytes1.buffer;\n\n                // convert base64string to ArrayBuffer\n                var myB64Data2  = base64string.split(',');\n                var myB64Chunk2 = myB64Data2[1];\n                var binary_string2 = window.atob(myB64Chunk2);\n                var len2 = binary_string2.length;\n                var bytes2 = new Uint8Array(len2);\n                for (var j = 0; j < len2; j++) {\n                    bytes2[i] = binary_string2.charCodeAt(j);\n                  }\n                var myBuffer2 = bytes2.buffer;\n\n                Streamlit.setComponentValue('test_buffers');\n\n                // create final full array buffer\n                var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n\n                Streamlit.setComponentValue('test_buffers_concat');\n\n\n                var options = {isFloat: false, numChannels: 2, sampleRate: 44100}\n\n                const type = options.isFloat ? Float32Array : Uint16Array\n                const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT\n\n                options = Object.assign({}, options, { numFrames })\n\n                const numChannels =    options.numChannels || 2;\n                const sampleRate =     options.sampleRate || 44100;\n                const bytesPerSample = options.isFloat? 4 : 2;\n                const format =         options.isFloat? 3 : 1;\n\n                const blockAlign = numChannels * bytesPerSample;\n                const byteRate = sampleRate * blockAlign;\n                const dataSize = numFrames * blockAlign;\n\n                const bufferHeader = new ArrayBuffer(44);\n                const dv = new DataView(bufferHeader);\n\n                let p = 0;\n                let s = '';\n\n                s = 'RIFF'; // ChunkID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, (dataSize + 36), true);\n                p += 4; // ChunkSize\n\n                s = 'WAVE'; // Format\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                s = 'fmt '; // Subchunk1ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, 16, true);\n                p += 4; // Subchunk1Size\n\n                dv.setUint16(p, format, true);\n                p += 2; // AudioFormat\n\n                dv.setUint16(p, numChannels, true);\n                p += 2; // NumChannels\n\n                dv.setUint32(p, sampleRate, true);\n                p += 4; // SampleRate\n\n                dv.setUint32(p, byteRate, true);\n                p += 4; // ByteRate\n\n                dv.setUint16(p, blockAlign, true);\n                p += 2; // BlockAlign\n\n                dv.setUint16(p, (bytesPerSample * 8), true);\n                p += 2; // BitsPerSample\n\n                s = 'data'; // Subchunk2ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, dataSize, true);\n                p += 4; // Subchunk2Size\n\n                const headerBytes = new Uint8Array(bufferHeader);\n                const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength);\n\n                // prepend header, then add pcmBytes\n                wavBytes.set(headerBytes, 0)\n                wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length)\n\n                myFinalBuffer = wavBytes;\n\n                var binary = '';\n                var bytes = new Uint8Array(myFinalBuffer);\n                var len = bytes.byteLength;\n                for (var k = 0; k < len; k++) {\n                   binary += String.fromCharCode(bytes[k]);\n                 };\n                base64full = window.btoa(binary);\n\n\n\n              };\n\n\n\n              /*// remove base64 WAV header \"data:audio/wav;base64,\"\n              base64string = base64string.substring(22);\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n              // ? or export as arraybuffers that are concatenated and then transformed to base64\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                var bothData = atob(base64full) + atob(base64string); // binary string\n                var bothData64 = btoa(bothData); // base64 encoded\n                //base64full = //version of bothData64 without the header\n                base64full = bothData64;\n              };*/\n\n\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                // Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer+1;\n          };\n\n        };\n      };\n      xhr.send();\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StAudioRec from \"./StreamlitAudioRecorder\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StAudioRec />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}