{"version":3,"sources":["StreamlitAudioRecorder.tsx","index.tsx"],"names":["StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","id","onClick","onClick_start","onClick_stop","onClick_reset","onStop","onStop_audio","type","backgroundColor","foregroundColor","canvasWidth","canvasHeight","controls","src","onClick_continue","setState","RecordState","START","Streamlit","setComponentValue","STOP","data","url","xhr","XMLHttpRequest","open","responseType","onload","e","myBlob","base64full","base64string","chunkAudio","reader","this","status","response","startPointer","endPointer","size","endReached","slice","newStartPointer","FileReader","readAsDataURL","onloadend","base64data","result","base64stringArr","String","split","send","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","document","getElementById"],"mappings":"wQAsBMA,G,kNACGC,MAAQ,CAAEC,WAAW,EAAOC,YAAa,KAAMC,aAAc,GAAIC,OAAO,G,EAExEC,OAAS,WAMd,IAAQC,EAAU,EAAKC,MAAfD,MACFE,EAA6B,GAE3BN,EAAgB,EAAKF,MAArBE,YAGR,GAAII,EAAO,CAGT,IAAMG,EAAa,oBACjB,EAAKT,MAAMC,UAAYK,EAAMI,aAAe,QAC9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGlB,OACE,8BACE,6BACE,4BAAQI,GAAG,SAASC,QAAS,EAAKC,eAAlC,mBAGA,4BAAQF,GAAG,OAAOC,QAAS,EAAKE,cAAhC,QAGA,4BAAQH,GAAG,QAAQC,QAAS,EAAKG,eAAjC,SAIA,kBAAC,IAAD,CACEjB,MAAOE,EACPgB,OAAQ,EAAKC,aACbC,KAAK,YACLC,gBAAgB,kBAChBC,gBAAgB,mBAChBC,YAAa,IACbC,aAAc,MAGhB,2BACEX,GAAG,QACHY,UAAQ,EACRC,IAAK,EAAK1B,MAAMG,eAGlB,4BAAQU,GAAG,WAAWC,QAAS,EAAKa,kBAApC,2B,EAUAZ,cAAgB,WACtB,EAAKa,SAAS,CACZxB,OAAO,EACPD,aAAc,GACdD,YAAa2B,IAAYC,QAE3BC,IAAUC,kBAAkB,K,EAGtBhB,aAAe,WACrB,EAAKY,SAAS,CACZxB,OAAO,EACPF,YAAa2B,IAAYI,Q,EAIrBhB,cAAgB,WACtB,EAAKW,SAAS,CACZxB,OAAO,EACPD,aAAc,GACdD,YAAa2B,IAAYI,OAE3BF,IAAUC,kBAAkB,K,EAGtBL,iBAAmB,WACrB,EAAK3B,MAAMG,c,EAOTgB,aAAe,SAACe,GACtB,IAAyB,IAArB,EAAKlC,MAAMI,MAEb,EAAKwB,SAAS,CACZzB,aAAc,KAEhB4B,IAAUC,kBAAkB,QACzB,CACH,EAAKJ,SAAS,CACZzB,aAAc+B,EAAKC,MA2BrB,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOJ,EAAKC,KAAK,GAC1BC,EAAIG,aAAe,OACnBH,EAAII,OAAS,SAASC,GAAI,IAElBC,EAeAC,EACAC,EAsBEC,EAIAC,EA5Ce,OACJ,KAAfC,KAAKC,QAAe,WAClBN,EAAS,EAAKO,SAedN,EAAa,GACbC,EAAe,GACnB,IAAIM,EAAe,GACfC,EAAaT,EAAOU,KACpBC,GAAa,EAKjB,IAHsBX,EAAOY,MAAM,EAAG,IAGhCJ,EAAaC,GAAW,CAE5B,IAAII,EAAkBL,EAZZ,MAaNK,EAAkBJ,IAEpBI,EAAkBJ,EAClBE,GAAa,GAQXR,EAAaH,EAAOY,MAAMJ,EAAcK,EAAiB,cAIzDT,EAAS,IAAIU,YACVC,cAAcZ,GACrBC,EAAOY,UAAY,WACjB,IAAIC,EAAab,EAAOc,OAYpBC,GAVJjB,EAAekB,OAAOH,IAUaI,MAAM,KAEzCnB,EAAeiB,EAAgB,GAEb,IAAdlB,EACFA,EAAaC,EAObD,GAA0BC,EA0IxBS,GAGFtB,IAAUC,kBAAkBW,IAIhCO,EAAeK,GAvNK,IA4N1BnB,EAAI4B,S,yBApWeC,MAgXVC,cAAwBnE,GAIvCgC,IAAUoC,oBAIVpC,IAAUqC,iBC1YVC,IAAShE,OACP,kBAAC,IAAMiE,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.7d0b0dd5.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      //var content = fs.readFileSync('file.ogg');\n      //Streamlit.setComponentValue(content)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n\n          // PROCESSING APPROACH A: all at once\n          /*var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }*/\n\n          // PROCESSING APPROACH B:\n          let cSize = 1024*10; // chunksize 10kB\n          var base64full = ''; // final base64 string\n          var base64string = ''; // substring for one chunk\n          let startPointer = 44; // start after WAV header\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          var wavHeader44byte = myBlob.slice(0, 44); // first 44 bytes\n          // the end byte is NOT included (exclusive byte44)\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize;\n            if (newStartPointer > endPointer){\n              // in case all chunks have been processed\n              newStartPointer = endPointer;\n              endReached = true;\n            };\n\n            // **BAUSTELLE 1**\n            // slice out one chunk from the initial WAV-Blob\n            // concatenate sliced out chunk with header bytes\n\n            // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n            var chunkAudio = myBlob.slice(startPointer, newStartPointer, 'audio/wav');\n            // var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n            // var chunkAudio = new Blob([wavHeader44byte, chunk]);\n\n            var reader = new FileReader(); // initiate file reader\n            reader.readAsDataURL(chunkAudio); // read in the chunk\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              // export chunk to string of base64 WAV Audio including header\n              base64string = String(base64data);\n\n\n\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n\n              // ATTEMPT REMOVE BASE64\n              // remove base64 WAV header \"data:audio/wav;base64,\"\n              var base64stringArr = base64string.split(',');\n              //base64string = base64string.substring(22);\n              base64string = base64stringArr[1];\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n                // both need to be header free before\n                //var bothData = atob(base64full) + atob(base64string); // binary string\n                // var bothData64 = btoa(bothData); // base64 encoded\n                //base64full = //version of bothData64 without the header\n                // base64full = bothData64;\n                base64full = base64full + base64string;\n              };\n\n\n              // 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\n\n\n\n              /*\n              // ATTEMPT CONCAT BASE64 main\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                // convert base64full to ArrayBuffer\n                var myB64Data1  = base64full.split(',');\n                var myB64Chunk1 = myB64Data1[1];\n                var binary_string1 = window.atob(myB64Chunk1);\n                var len1 = binary_string1.length;\n                var bytes1 = new Uint8Array(len1);\n                for (var i = 0; i < len1; i++) {\n                    bytes1[i] = binary_string1.charCodeAt(i);\n                  }\n                var myBuffer1 = bytes1.buffer;\n\n                // convert base64string to ArrayBuffer\n                var myB64Data2  = base64string.split(',');\n                var myB64Chunk2 = myB64Data2[1];\n                var binary_string2 = window.atob(myB64Chunk2);\n                var len2 = binary_string2.length;\n                var bytes2 = new Uint8Array(len2);\n                for (var j = 0; j < len2; j++) {\n                    bytes2[i] = binary_string2.charCodeAt(j);\n                  }\n                var myBuffer2 = bytes2.buffer;\n\n                Streamlit.setComponentValue('test_buffers');\n\n                // create final full array buffer\n                var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n\n                Streamlit.setComponentValue('test_buffers_concat');\n\n\n                var options = {isFloat: false, numChannels: 2, sampleRate: 44100}\n\n                const type = options.isFloat ? Float32Array : Uint16Array\n                const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT\n\n                options = Object.assign({}, options, { numFrames })\n\n                const numChannels =    options.numChannels || 2;\n                const sampleRate =     options.sampleRate || 44100;\n                const bytesPerSample = options.isFloat? 4 : 2;\n                const format =         options.isFloat? 3 : 1;\n\n                const blockAlign = numChannels * bytesPerSample;\n                const byteRate = sampleRate * blockAlign;\n                const dataSize = numFrames * blockAlign;\n\n                const bufferHeader = new ArrayBuffer(44);\n                const dv = new DataView(bufferHeader);\n\n                let p = 0;\n                let s = '';\n\n                s = 'RIFF'; // ChunkID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, (dataSize + 36), true);\n                p += 4; // ChunkSize\n\n                s = 'WAVE'; // Format\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                s = 'fmt '; // Subchunk1ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, 16, true);\n                p += 4; // Subchunk1Size\n\n                dv.setUint16(p, format, true);\n                p += 2; // AudioFormat\n\n                dv.setUint16(p, numChannels, true);\n                p += 2; // NumChannels\n\n                dv.setUint32(p, sampleRate, true);\n                p += 4; // SampleRate\n\n                dv.setUint32(p, byteRate, true);\n                p += 4; // ByteRate\n\n                dv.setUint16(p, blockAlign, true);\n                p += 2; // BlockAlign\n\n                dv.setUint16(p, (bytesPerSample * 8), true);\n                p += 2; // BitsPerSample\n\n                s = 'data'; // Subchunk2ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, dataSize, true);\n                p += 4; // Subchunk2Size\n\n                const headerBytes = new Uint8Array(bufferHeader);\n                const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength);\n\n                // prepend header, then add pcmBytes\n                wavBytes.set(headerBytes, 0)\n                wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length)\n\n                myFinalBuffer = wavBytes;\n\n                var binary = '';\n                var bytes = new Uint8Array(myFinalBuffer);\n                var len = bytes.byteLength;\n                for (var k = 0; k < len; k++) {\n                   binary += String.fromCharCode(bytes[k]);\n                 };\n                base64full = window.btoa(binary);\n\n              }; // close else\n              */\n\n\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer;\n          };\n\n        };\n      };\n      xhr.send();\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StAudioRec from \"./StreamlitAudioRecorder\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StAudioRec />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}