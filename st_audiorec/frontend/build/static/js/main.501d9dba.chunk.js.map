{"version":3,"sources":["StreamlitAudioRecorder.tsx","index.tsx"],"names":["StAudioRec","state","isFocused","recordState","audioDataURI","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","id","onClick","onClick_start","onClick_stop","onClick_reset","onStop","onStop_audio","type","backgroundColor","foregroundColor","canvasWidth","canvasHeight","controls","src","onClick_continue","setState","RecordState","START","Streamlit","setComponentValue","STOP","data","url","blob","name","blobUrl","link","document","createElement","href","download","this","body","appendChild","dispatchEvent","MouseEvent","bubbles","cancelable","view","window","removeChild","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","getElementById"],"mappings":"wQAkBMA,G,kNACGC,MAAQ,CAAEC,WAAW,EAAOC,YAAa,KAAMC,aAAc,GAAIC,aAAc,GAAIC,OAAO,G,EAE1FC,OAAS,WAMd,IAAQC,EAAU,EAAKC,MAAfD,MACFE,EAA6B,GAE3BP,EAAgB,EAAKF,MAArBE,YAGR,GAAIK,EAAO,CAGT,IAAMG,EAAa,oBACjB,EAAKV,MAAMC,UAAYM,EAAMI,aAAe,QAC9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGlB,OACE,8BACE,6BACE,4BAAQI,GAAG,SAASC,QAAS,EAAKC,eAAlC,mBAGA,4BAAQF,GAAG,OAAOC,QAAS,EAAKE,cAAhC,QAGA,4BAAQH,GAAG,QAAQC,QAAS,EAAKG,eAAjC,SAIA,kBAAC,IAAD,CACElB,MAAOE,EACPiB,OAAQ,EAAKC,aACbC,KAAK,YACLC,gBAAgB,kBAChBC,gBAAgB,mBAChBC,YAAa,IACbC,aAAc,MAGhB,2BACEX,GAAG,QACHY,UAAQ,EACRC,IAAK,EAAK3B,MAAMG,eAGlB,4BAAQW,GAAG,WAAWC,QAAS,EAAKa,kBAApC,2B,EASAZ,cAAgB,WACtB,EAAKa,SAAS,CACZxB,OAAO,EACPF,aAAc,GACdD,YAAa4B,IAAYC,QAE3BC,IAAUC,kBAAkB,K,EAGtBhB,aAAe,WACrB,EAAKY,SAAS,CACZxB,OAAO,EACPH,YAAa4B,IAAYI,Q,EAIrBhB,cAAgB,WACtB,EAAKW,SAAS,CACZxB,OAAO,EACPF,aAAc,GACdD,YAAa4B,IAAYI,OAE3BF,IAAUC,kBAAkB,K,EAGtBL,iBAAmB,WACO,KAA5B,EAAK5B,MAAMG,cAEb6B,IAAUC,kBAAkB,EAAKjC,MAAMG,e,EAgCnCiB,aAAe,SAACe,IACG,IAArB,EAAKnC,MAAMK,OAEb,EAAKwB,SAAS,CACZ1B,aAAc,KAEhB6B,IAAUC,kBAAkB,KAI5B,EAAKJ,SAAS,CACZ1B,aAAcgC,EAAKC,O,kDAvCzB,SAAqBC,GAA+B,IAAzBC,EAAwB,uDAAjB,gBAG1BC,EAAUF,EAAKD,IAEfI,EAAOC,SAASC,cAAc,KAEpCF,EAAKG,KAAOJ,EACZC,EAAKI,SAAWN,EAEhBO,KAAKhB,SAAS,CACZzB,aAAcmC,IAIhBE,SAASK,KAAKC,YAAYP,GAE1BA,EAAKQ,cACH,IAAIC,WAAW,QAAS,CACtBC,SAAS,EACTC,YAAY,EACZC,KAAMC,UAIVZ,SAASK,KAAKQ,YAAYd,O,GAvHLe,MAgJVC,cAAwBzD,GAIvCiC,IAAUyB,oBAIVzB,IAAU0B,iBCtKVC,IAASrD,OACP,kBAAC,IAAMsD,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,W","file":"static/js/main.501d9dba.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURI: string\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURI: '', audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURI}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURI: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURI: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURI !== '')\n    {\n      Streamlit.setComponentValue(this.state.audioDataURI)\n    }\n  }\n\n  private downloadBlob(blob, name = 'audiofile.wav') {\n\n    // get blob object url from blob\n    const blobUrl = blob.url\n    // create link object ffor blob\n    const link = document.createElement(\"a\");\n    // Set link's href to point to the Blob URL\n    link.href = blobUrl;\n    link.download = name;\n\n    this.setState({\n      audioDataURL: blobUrl\n    })\n\n    // Append link to the body\n    document.body.appendChild(link);\n    // Dispatch click event on the link\n    link.dispatchEvent(\n      new MouseEvent('click', {\n        bubbles: true,\n        cancelable: true,\n        view: window\n      })\n    );\n    // Remove link from body\n    document.body.removeChild(link);\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURI: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      // this.downloadBlob(data, 'audiofile.wav');\n\n      this.setState({\n        audioDataURI: data.url\n      })\n    }\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StAudioRec from \"./StreamlitAudioRecorder\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StAudioRec />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}