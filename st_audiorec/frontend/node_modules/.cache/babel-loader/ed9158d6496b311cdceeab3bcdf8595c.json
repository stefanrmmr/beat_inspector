{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import AudioReactRecorder,{RecordState}from'audio-react-recorder';import'audio-react-recorder/dist/index.css';// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\nvar StAudioRec=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(StAudioRec,_StreamlitComponentBa);var _super=_createSuper(StAudioRec);function StAudioRec(){var _this;_classCallCheck(this,StAudioRec);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={isFocused:false,recordState:null,audioDataURL:'',reset:false};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};var recordState=_this.state.recordState;// compatibility with older vers of Streamlit that don't send theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}return/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{id:\"record\",onClick:_this.onClick_start},\"Start Recording\"),/*#__PURE__*/React.createElement(\"button\",{id:\"stop\",onClick:_this.onClick_stop},\"Stop\"),/*#__PURE__*/React.createElement(\"button\",{id:\"reset\",onClick:_this.onClick_reset},\"Reset\"),/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:_this.onStop_audio,type:\"audio/wav\",backgroundColor:\"rgb(15, 17, 22)\",foregroundColor:\"rgb(227, 252, 3)\",canvasWidth:450,canvasHeight:100}),/*#__PURE__*/React.createElement(\"audio\",{id:\"audio\",controls:true,src:_this.state.audioDataURL}),/*#__PURE__*/React.createElement(\"button\",{id:\"continue\",onClick:_this.onClick_continue},\"Download Audio Recording\")));};_this.onClick_start=function(){_this.setState({reset:false,audioDataURL:'',recordState:RecordState.START});Streamlit.setComponentValue('');};_this.onClick_stop=function(){_this.setState({reset:false,recordState:RecordState.STOP});};_this.onClick_reset=function(){_this.setState({reset:true,audioDataURL:'',recordState:RecordState.STOP});Streamlit.setComponentValue('');};_this.onClick_continue=function(){if(_this.state.audioDataURL!==''){//var content = fs.readFileSync('file.ogg');\n//Streamlit.setComponentValue(content)\n// get datetime string for filename\nvar datetime=new Date().toLocaleString();datetime=datetime.replace(' ','');datetime=datetime.replace(',','-');datetime=datetime.replace('_','-');var filename='beatinspect_recording_'+datetime+'.wav';var a=document.createElement('a');a.style.display='none';a.href=_this.state.audioDataURL;a.download=filename;document.body.appendChild(a);a.click();}};_this.onStop_audio=function(data){if(_this.state.reset===true){_this.setState({audioDataURL:''});Streamlit.setComponentValue('');}else{_this.setState({audioDataURL:data.url});/*\n      // ALL EFFORTS for directly handing stuff back to Streamlit\n\n\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n\n          // PROCESSING APPROACH A: all at once\n          var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }\n\n          // PROCESSING APPROACH B:\n          let cSize = 1024*10; // chunksize 10kB\n          var base64full = ''; // final base64 string\n          var base64string = ''; // substring for one chunk\n          let startPointer = 44; // start after WAV header\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          var wavHeader44byte = myBlob.slice(0, 44); // first 44 bytes\n          // the end byte is NOT included (exclusive byte44)\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize;\n            if (newStartPointer > endPointer){\n              // in case all chunks have been processed\n              newStartPointer = endPointer;\n              endReached = true;\n            };\n\n            // **BAUSTELLE 1**\n            // slice out one chunk from the initial WAV-Blob\n            // concatenate sliced out chunk with header bytes\n\n            // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n            var chunk = myBlob.slice(startPointer, newStartPointer, 'audio/wav');\n            var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n            // var chunkAudio = new Blob([wavHeader44byte, chunk]);\n\n            var reader = new FileReader(); // initiate file reader\n            reader.readAsDataURL(chunkAudio); // read in the chunk\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              // export chunk to string of base64 WAV Audio including header\n              base64string = String(base64data);\n\n\n\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n\n\n              // ATTEMPT REMOVE BASE64\n              // remove base64 WAV header \"data:audio/wav;base64,\"\n              var base64stringArr = base64string.split(',');\n              //base64string = base64string.substring(22);\n              base64string = base64stringArr[1];\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n                // both need to be header free before\n                //var bothData = atob(base64full) + atob(base64string); // binary string\n                // var bothData64 = btoa(bothData); // base64 encoded\n                //base64full = //version of bothData64 without the header\n                // base64full = bothData64;\n                base64full = base64full + base64string;\n              };\n\n\n\n              // ATTEMPT CONCAT BASE64 main\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                // convert base64full to ArrayBuffer\n                var myB64Data1  = base64full.split(',');\n                var myB64Chunk1 = myB64Data1[1];\n                var binary_string1 = window.atob(myB64Chunk1);\n                var len1 = binary_string1.length;\n                var bytes1 = new Uint8Array(len1);\n                for (var i = 0; i < len1; i++) {\n                    bytes1[i] = binary_string1.charCodeAt(i);\n                  }\n                var myBuffer1 = bytes1.buffer;\n\n                // convert base64string to ArrayBuffer\n                var myB64Data2  = base64string.split(',');\n                var myB64Chunk2 = myB64Data2[1];\n                var binary_string2 = window.atob(myB64Chunk2);\n                var len2 = binary_string2.length;\n                var bytes2 = new Uint8Array(len2);\n                for (var j = 0; j < len2; j++) {\n                    bytes2[i] = binary_string2.charCodeAt(j);\n                  }\n                var myBuffer2 = bytes2.buffer;\n\n                Streamlit.setComponentValue('test_buffers');\n\n                // create final full array buffer\n                var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n\n                Streamlit.setComponentValue('test_buffers_concat');\n\n\n                var options = {isFloat: false, numChannels: 2, sampleRate: 44100}\n\n                const type = options.isFloat ? Float32Array : Uint16Array\n                const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT\n\n                options = Object.assign({}, options, { numFrames })\n                // TODO is this allocation allowed?????????\n\n                const numChannels =    options.numChannels || 2;\n                const sampleRate =     options.sampleRate || 44100;\n                const bytesPerSample = options.isFloat? 4 : 2;\n                const format =         options.isFloat? 3 : 1;\n\n                const blockAlign = numChannels * bytesPerSample;\n                const byteRate = sampleRate * blockAlign;\n                const dataSize = numFrames * blockAlign;\n\n                const bufferHeader = new ArrayBuffer(44);\n                const dv = new DataView(bufferHeader);\n\n                let p = 0;\n                let s = '';\n\n                s = 'RIFF'; // ChunkID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, (dataSize + 36), true);\n                p += 4; // ChunkSize\n\n                s = 'WAVE'; // Format\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                s = 'fmt '; // Subchunk1ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, 16, true);\n                p += 4; // Subchunk1Size\n\n                dv.setUint16(p, format, true);\n                p += 2; // AudioFormat\n\n                dv.setUint16(p, numChannels, true);\n                p += 2; // NumChannels\n\n                dv.setUint32(p, sampleRate, true);\n                p += 4; // SampleRate\n\n                dv.setUint32(p, byteRate, true);\n                p += 4; // ByteRate\n\n                dv.setUint16(p, blockAlign, true);\n                p += 2; // BlockAlign\n\n                dv.setUint16(p, (bytesPerSample * 8), true);\n                p += 2; // BitsPerSample\n\n                s = 'data'; // Subchunk2ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, dataSize, true);\n                p += 4; // Subchunk2Size\n\n                const headerBytes = new Uint8Array(bufferHeader);\n                const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength);\n\n                // prepend header, then add pcmBytes\n                wavBytes.set(headerBytes, 0)\n                wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length)\n\n                myFinalBuffer = wavBytes;\n\n                var binary = '';\n                var bytes = new Uint8Array(myFinalBuffer);\n                var len = bytes.byteLength;\n                for (var k = 0; k < len; k++) {\n                   binary += String.fromCharCode(bytes[k]);\n                 };\n                base64full = window.btoa(binary);\n\n              }; // close else\n\n\n\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer;\n          };\n\n        };\n      };\n      xhr.send();\n\n\n    */}// close all efforts to export to Streamlit\n};return _this;}return _createClass(StAudioRec);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","datetime","Date","toLocaleString","replace","filename","a","document","createElement","display","href","download","body","appendChild","click","data","url","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Download Audio Recording\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      //var content = fs.readFileSync('file.ogg');\n      //Streamlit.setComponentValue(content)\n\n      // get datetime string for filename\n      let datetime = new Date().toLocaleString();\n      datetime = datetime.replace(' ', '');\n      datetime = datetime.replace(',', '-');\n      datetime = datetime.replace('_', '-');\n      var filename = 'beatinspect_recording_' + datetime + '.wav';\n\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = this.state.audioDataURL;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      /*\n      // ALL EFFORTS for directly handing stuff back to Streamlit\n\n\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n\n          // PROCESSING APPROACH A: all at once\n          var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }\n\n          // PROCESSING APPROACH B:\n          let cSize = 1024*10; // chunksize 10kB\n          var base64full = ''; // final base64 string\n          var base64string = ''; // substring for one chunk\n          let startPointer = 44; // start after WAV header\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          var wavHeader44byte = myBlob.slice(0, 44); // first 44 bytes\n          // the end byte is NOT included (exclusive byte44)\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize;\n            if (newStartPointer > endPointer){\n              // in case all chunks have been processed\n              newStartPointer = endPointer;\n              endReached = true;\n            };\n\n            // **BAUSTELLE 1**\n            // slice out one chunk from the initial WAV-Blob\n            // concatenate sliced out chunk with header bytes\n\n            // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n            var chunk = myBlob.slice(startPointer, newStartPointer, 'audio/wav');\n            var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n            // var chunkAudio = new Blob([wavHeader44byte, chunk]);\n\n            var reader = new FileReader(); // initiate file reader\n            reader.readAsDataURL(chunkAudio); // read in the chunk\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              // export chunk to string of base64 WAV Audio including header\n              base64string = String(base64data);\n\n\n\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n\n\n              // ATTEMPT REMOVE BASE64\n              // remove base64 WAV header \"data:audio/wav;base64,\"\n              var base64stringArr = base64string.split(',');\n              //base64string = base64string.substring(22);\n              base64string = base64stringArr[1];\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n                // both need to be header free before\n                //var bothData = atob(base64full) + atob(base64string); // binary string\n                // var bothData64 = btoa(bothData); // base64 encoded\n                //base64full = //version of bothData64 without the header\n                // base64full = bothData64;\n                base64full = base64full + base64string;\n              };\n\n\n\n              // ATTEMPT CONCAT BASE64 main\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                // convert base64full to ArrayBuffer\n                var myB64Data1  = base64full.split(',');\n                var myB64Chunk1 = myB64Data1[1];\n                var binary_string1 = window.atob(myB64Chunk1);\n                var len1 = binary_string1.length;\n                var bytes1 = new Uint8Array(len1);\n                for (var i = 0; i < len1; i++) {\n                    bytes1[i] = binary_string1.charCodeAt(i);\n                  }\n                var myBuffer1 = bytes1.buffer;\n\n                // convert base64string to ArrayBuffer\n                var myB64Data2  = base64string.split(',');\n                var myB64Chunk2 = myB64Data2[1];\n                var binary_string2 = window.atob(myB64Chunk2);\n                var len2 = binary_string2.length;\n                var bytes2 = new Uint8Array(len2);\n                for (var j = 0; j < len2; j++) {\n                    bytes2[i] = binary_string2.charCodeAt(j);\n                  }\n                var myBuffer2 = bytes2.buffer;\n\n                Streamlit.setComponentValue('test_buffers');\n\n                // create final full array buffer\n                var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n\n                Streamlit.setComponentValue('test_buffers_concat');\n\n\n                var options = {isFloat: false, numChannels: 2, sampleRate: 44100}\n\n                const type = options.isFloat ? Float32Array : Uint16Array\n                const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT\n\n                options = Object.assign({}, options, { numFrames })\n                // TODO is this allocation allowed?????????\n\n                const numChannels =    options.numChannels || 2;\n                const sampleRate =     options.sampleRate || 44100;\n                const bytesPerSample = options.isFloat? 4 : 2;\n                const format =         options.isFloat? 3 : 1;\n\n                const blockAlign = numChannels * bytesPerSample;\n                const byteRate = sampleRate * blockAlign;\n                const dataSize = numFrames * blockAlign;\n\n                const bufferHeader = new ArrayBuffer(44);\n                const dv = new DataView(bufferHeader);\n\n                let p = 0;\n                let s = '';\n\n                s = 'RIFF'; // ChunkID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, (dataSize + 36), true);\n                p += 4; // ChunkSize\n\n                s = 'WAVE'; // Format\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                s = 'fmt '; // Subchunk1ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, 16, true);\n                p += 4; // Subchunk1Size\n\n                dv.setUint16(p, format, true);\n                p += 2; // AudioFormat\n\n                dv.setUint16(p, numChannels, true);\n                p += 2; // NumChannels\n\n                dv.setUint32(p, sampleRate, true);\n                p += 4; // SampleRate\n\n                dv.setUint32(p, byteRate, true);\n                p += 4; // ByteRate\n\n                dv.setUint16(p, blockAlign, true);\n                p += 2; // BlockAlign\n\n                dv.setUint16(p, (bytesPerSample * 8), true);\n                p += 2; // BitsPerSample\n\n                s = 'data'; // Subchunk2ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, dataSize, true);\n                p += 4; // Subchunk2Size\n\n                const headerBytes = new Uint8Array(bufferHeader);\n                const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength);\n\n                // prepend header, then add pcmBytes\n                wavBytes.set(headerBytes, 0)\n                wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length)\n\n                myFinalBuffer = wavBytes;\n\n                var binary = '';\n                var bytes = new Uint8Array(myFinalBuffer);\n                var len = bytes.byteLength;\n                for (var k = 0; k < len; k++) {\n                   binary += String.fromCharCode(bytes[k]);\n                 };\n                base64full = window.btoa(binary);\n\n              }; // close else\n\n\n\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer;\n          };\n\n        };\n      };\n      xhr.send();\n\n\n    */\n    } // close all efforts to export to Streamlit\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}