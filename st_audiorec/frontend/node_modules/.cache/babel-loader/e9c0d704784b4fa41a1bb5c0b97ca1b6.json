{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css';\n\nclass StAudioRec extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false,\n      recordState: null,\n      audioDataURI: '',\n      audioDataURL: '',\n      reset: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // compatibility with older vers of Streamlit that don't send theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.onClick_start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }, \"Start Recording\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.onClick_stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"reset\",\n        onClick: this.onClick_reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop_audio,\n        type: \"audio/wav\",\n        backgroundColor: \"rgb(15, 17, 22)\",\n        foregroundColor: \"rgb(227, 252, 3)\",\n        canvasWidth: 450,\n        canvasHeight: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataURI,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"continue\",\n        onClick: this.onClick_continue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, \"Continue to Analysis\")));\n    };\n\n    this.onClick_start = () => {\n      this.setState({\n        reset: false,\n        audioDataURI: '',\n        recordState: RecordState.START\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_stop = () => {\n      this.setState({\n        reset: false,\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onClick_reset = () => {\n      this.setState({\n        reset: true,\n        audioDataURI: '',\n        recordState: RecordState.STOP\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_continue = () => {\n      if (this.state.audioDataURI !== '') {\n        Streamlit.setComponentValue(this.state.audioDataURL);\n      }\n    };\n\n    this.onStop_audio = data => {\n      if (this.state.reset === true) {\n        this.setState({\n          audioDataURI: ''\n        });\n        Streamlit.setComponentValue('');\n      } else {\n        // Usage\n        this.downloadBlob(data, 'audiofile.wav');\n        this.setState({\n          audioDataURI: data.url\n        });\n      }\n    };\n  }\n\n  downloadBlob(blob) {\n    let name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'audiofile.wav';\n    // get blob object url from blob\n    const blobUrl = blob.url; // create link object ffor blob\n\n    const link = document.createElement(\"a\"); // Set link's href to point to the Blob URL\n\n    link.href = blobUrl;\n    link.download = name;\n    this.setState({\n      audioDataURL: 'blobUrl'\n    }); // Append link to the body\n    // document.body.appendChild(link);\n    // Dispatch click event on the link\n    //link.dispatchEvent(\n    //  new MouseEvent('click', {\n    //    bubbles: true,\n    //    cancelable: true,\n    //    view: window\n    //  })\n    //);\n    // Remove link from body\n    // document.body.removeChild(link);\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(StAudioRec); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURI","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","data","downloadBlob","url","blob","name","blobUrl","link","document","createElement","href","download","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURI: string\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURI: '', audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURI}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURI: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURI: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURI !== '')\n    {\n      Streamlit.setComponentValue(this.state.audioDataURL)\n    }\n  }\n\n  private downloadBlob(blob, name = 'audiofile.wav') {\n\n    // get blob object url from blob\n    const blobUrl = blob.url\n    // create link object ffor blob\n    const link = document.createElement(\"a\");\n    // Set link's href to point to the Blob URL\n    link.href = blobUrl;\n    link.download = name;\n\n    this.setState({\n      audioDataURL: 'blobUrl'\n    })\n\n    // Append link to the body\n    // document.body.appendChild(link);\n    // Dispatch click event on the link\n    //link.dispatchEvent(\n    //  new MouseEvent('click', {\n    //    bubbles: true,\n    //    cancelable: true,\n    //    view: window\n    //  })\n    //);\n    // Remove link from body\n    // document.body.removeChild(link);\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURI: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n\n      // Usage\n      this.downloadBlob(data, 'audiofile.wav');\n\n      this.setState({\n        audioDataURI: data.url\n      })\n    }\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}