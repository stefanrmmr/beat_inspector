{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css';\n\nclass StAudioRec extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false,\n      recordState: null,\n      audioDataURL: '',\n      reset: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // compatibility with older vers of Streamlit that don't send theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.onClick_start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      }, \"Start Recording\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.onClick_stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"reset\",\n        onClick: this.onClick_reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop_audio,\n        type: \"audio/wav\",\n        backgroundColor: \"rgb(15, 17, 22)\",\n        foregroundColor: \"rgb(227, 252, 3)\",\n        canvasWidth: 450,\n        canvasHeight: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"continue\",\n        onClick: this.onClick_continue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }\n      }, \"Download Audio Recording\")));\n    };\n\n    this.onClick_start = () => {\n      this.setState({\n        reset: false,\n        audioDataURL: '',\n        recordState: RecordState.START\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_stop = () => {\n      this.setState({\n        reset: false,\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onClick_reset = () => {\n      this.setState({\n        reset: true,\n        audioDataURL: '',\n        recordState: RecordState.STOP\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_continue = () => {\n      if (this.state.audioDataURL !== '') {\n        // get datetime string for filename\n        let datetime = new Date().toLocaleString();\n        datetime = datetime.replace(' ', '');\n        datetime = datetime.replaceAll('_', '');\n        datetime = datetime.replace(',', '-');\n        var filename = 'beatinspect_rec_' + datetime + '.wav'; // auromatically trigger download\n\n        const a = document.createElement('a');\n        a.style.display = 'none';\n        a.href = this.state.audioDataURL;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click(); // export info to Streamlit\n        // var content = fs.readFileSync('file.ogg');\n        // Streamlit.setComponentValue()\n      }\n    };\n\n    this.onStop_audio = data => {\n      if (this.state.reset === true) {\n        this.setState({\n          audioDataURL: ''\n        });\n        Streamlit.setComponentValue('');\n      } else {\n        this.setState({\n          audioDataURL: data.url\n        });\n        /*\n        // ALL EFFORTS for directly handing stuff back to Streamlit\n           // **CONCEPT for Data-Handling**\n        // fetch blob-object from blob-url\n        // convert blob object --> blob base64data\n        // convert base64data --> ogg file and save to temp\n        // load file from temp and return via st component value\n         // tested: loading the blob from Url: low time consumption\n        // tested: initiating new filereader: low time consumption\n        // tested: loading blob into filereader: low time consumption\n        // tested: splitting blob into chunks: low time consumption\n        // tested: converting blob to base64: insane time consumption\n        // tested: fetching blob arrayBuffer: insane time consumption\n         // info: apparently for larger blob sizes converting to buffer\n        // via response constructor is 6x faster than using FileReader\n         // info: apparently WAV files take up around 10x more space\n        // then equivalent MP3-based files. (.ogg is even smaller)\n         // 20sec WAV audio blob --> 4Mb in memory size\n        // reading in the whole blob file into memory before processing\n        // causes memory overload and lag --> freezes the browser\n        // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n         var xhr = new XMLHttpRequest();\n        xhr.open('GET', data.url, true);\n        xhr.responseType = 'blob';\n        xhr.onload = function(e) {\n          if (this.status == 200) {\n            var myBlob = this.response;\n              // PROCESSING APPROACH A: all at once\n            var reader = new FileReader();\n            reader.readAsDataURL(myBlob);\n            reader.onloadend = () => {\n              const base64data = reader.result;\n              base64string = String(base64data);\n              base64string = base64string.substring(22);\n              Streamlit.setComponentValue(base64string);\n            }\n             // PROCESSING APPROACH B:\n            let cSize = 1024*10; // chunksize 10kB\n            var base64full = ''; // final base64 string\n            var base64string = ''; // substring for one chunk\n            let startPointer = 44; // start after WAV header\n            let endPointer = myBlob.size;\n            let endReached = false;\n             var wavHeader44byte = myBlob.slice(0, 44); // first 44 bytes\n            // the end byte is NOT included (exclusive byte44)\n             while(startPointer<endPointer){\n              // initiate start chunk pointer\n              let newStartPointer = startPointer+cSize;\n              if (newStartPointer > endPointer){\n                // in case all chunks have been processed\n                newStartPointer = endPointer;\n                endReached = true;\n              };\n               // **BAUSTELLE 1**\n              // slice out one chunk from the initial WAV-Blob\n              // concatenate sliced out chunk with header bytes\n               // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n              var chunk = myBlob.slice(startPointer, newStartPointer, 'audio/wav');\n              var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n              // var chunkAudio = new Blob([wavHeader44byte, chunk]);\n               var reader = new FileReader(); // initiate file reader\n              reader.readAsDataURL(chunkAudio); // read in the chunk\n              reader.onloadend = () => {\n                var base64data = reader.result;\n                // export chunk to string of base64 WAV Audio including header\n                base64string = String(base64data);\n                    // **BAUSTELLE 2**\n                // concatenate two base64 strings\n                  // ATTEMPT REMOVE BASE64\n                // remove base64 WAV header \"data:audio/wav;base64,\"\n                var base64stringArr = base64string.split(',');\n                //base64string = base64string.substring(22);\n                base64string = base64stringArr[1];\n                 if (base64full == ''){\n                  base64full = base64string;\n                } else {\n                  // both need to be header free before\n                  //var bothData = atob(base64full) + atob(base64string); // binary string\n                  // var bothData64 = btoa(bothData); // base64 encoded\n                  //base64full = //version of bothData64 without the header\n                  // base64full = bothData64;\n                  base64full = base64full + base64string;\n                };\n                   // ATTEMPT CONCAT BASE64 main\n                if (base64full == ''){\n                  base64full = base64string;\n                } else {\n                   // convert base64full to ArrayBuffer\n                  var myB64Data1  = base64full.split(',');\n                  var myB64Chunk1 = myB64Data1[1];\n                  var binary_string1 = window.atob(myB64Chunk1);\n                  var len1 = binary_string1.length;\n                  var bytes1 = new Uint8Array(len1);\n                  for (var i = 0; i < len1; i++) {\n                      bytes1[i] = binary_string1.charCodeAt(i);\n                    }\n                  var myBuffer1 = bytes1.buffer;\n                   // convert base64string to ArrayBuffer\n                  var myB64Data2  = base64string.split(',');\n                  var myB64Chunk2 = myB64Data2[1];\n                  var binary_string2 = window.atob(myB64Chunk2);\n                  var len2 = binary_string2.length;\n                  var bytes2 = new Uint8Array(len2);\n                  for (var j = 0; j < len2; j++) {\n                      bytes2[i] = binary_string2.charCodeAt(j);\n                    }\n                  var myBuffer2 = bytes2.buffer;\n                   Streamlit.setComponentValue('test_buffers');\n                   // create final full array buffer\n                  var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                  myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                  myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n                   Streamlit.setComponentValue('test_buffers_concat');\n                    var options = {isFloat: false, numChannels: 2, sampleRate: 44100}\n                   const type = options.isFloat ? Float32Array : Uint16Array\n                  const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT\n                   options = Object.assign({}, options, { numFrames })\n                  // TODO is this allocation allowed?????????\n                   const numChannels =    options.numChannels || 2;\n                  const sampleRate =     options.sampleRate || 44100;\n                  const bytesPerSample = options.isFloat? 4 : 2;\n                  const format =         options.isFloat? 3 : 1;\n                   const blockAlign = numChannels * bytesPerSample;\n                  const byteRate = sampleRate * blockAlign;\n                  const dataSize = numFrames * blockAlign;\n                   const bufferHeader = new ArrayBuffer(44);\n                  const dv = new DataView(bufferHeader);\n                   let p = 0;\n                  let s = '';\n                   s = 'RIFF'; // ChunkID\n                  for (let i = 0; i < s.length; i++) {\n                    dv.setUint8(p + i, s.charCodeAt(i));};\n                  p += s.length;\n                   dv.setUint32(p, (dataSize + 36), true);\n                  p += 4; // ChunkSize\n                   s = 'WAVE'; // Format\n                  for (let i = 0; i < s.length; i++) {\n                    dv.setUint8(p + i, s.charCodeAt(i));};\n                  p += s.length;\n                   s = 'fmt '; // Subchunk1ID\n                  for (let i = 0; i < s.length; i++) {\n                    dv.setUint8(p + i, s.charCodeAt(i));};\n                  p += s.length;\n                   dv.setUint32(p, 16, true);\n                  p += 4; // Subchunk1Size\n                   dv.setUint16(p, format, true);\n                  p += 2; // AudioFormat\n                   dv.setUint16(p, numChannels, true);\n                  p += 2; // NumChannels\n                   dv.setUint32(p, sampleRate, true);\n                  p += 4; // SampleRate\n                   dv.setUint32(p, byteRate, true);\n                  p += 4; // ByteRate\n                   dv.setUint16(p, blockAlign, true);\n                  p += 2; // BlockAlign\n                   dv.setUint16(p, (bytesPerSample * 8), true);\n                  p += 2; // BitsPerSample\n                   s = 'data'; // Subchunk2ID\n                  for (let i = 0; i < s.length; i++) {\n                    dv.setUint8(p + i, s.charCodeAt(i));};\n                  p += s.length;\n                   dv.setUint32(p, dataSize, true);\n                  p += 4; // Subchunk2Size\n                   const headerBytes = new Uint8Array(bufferHeader);\n                  const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength);\n                   // prepend header, then add pcmBytes\n                  wavBytes.set(headerBytes, 0)\n                  wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length)\n                   myFinalBuffer = wavBytes;\n                   var binary = '';\n                  var bytes = new Uint8Array(myFinalBuffer);\n                  var len = bytes.byteLength;\n                  for (var k = 0; k < len; k++) {\n                     binary += String.fromCharCode(bytes[k]);\n                   };\n                  base64full = window.btoa(binary);\n                 }; // close else\n                   // update current status of base64full after every iteration\n                // keep the setComponentValue statement within the filereader!\n                if (endReached){\n                  // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                  // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                  Streamlit.setComponentValue(base64full);\n                }\n              };\n              //update chunk pointer\n              startPointer = newStartPointer;\n            };\n           };\n        };\n        xhr.send();\n        */\n      } // close all efforts to export to Streamlit\n\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(StAudioRec); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","datetime","Date","toLocaleString","replace","replaceAll","filename","a","document","createElement","display","href","download","body","appendChild","click","data","url","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Download Audio Recording\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      // get datetime string for filename\n      let datetime = new Date().toLocaleString();\n      datetime = datetime.replace(' ', '');\n      datetime = datetime.replaceAll('_', '')\n      datetime = datetime.replace(',', '-');\n      var filename = 'beatinspect_rec_' + datetime + '.wav';\n\n      // auromatically trigger download\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = this.state.audioDataURL;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n\n      // export info to Streamlit\n      // var content = fs.readFileSync('file.ogg');\n      // Streamlit.setComponentValue()\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      /*\n      // ALL EFFORTS for directly handing stuff back to Streamlit\n\n\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n\n          // PROCESSING APPROACH A: all at once\n          var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }\n\n          // PROCESSING APPROACH B:\n          let cSize = 1024*10; // chunksize 10kB\n          var base64full = ''; // final base64 string\n          var base64string = ''; // substring for one chunk\n          let startPointer = 44; // start after WAV header\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          var wavHeader44byte = myBlob.slice(0, 44); // first 44 bytes\n          // the end byte is NOT included (exclusive byte44)\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize;\n            if (newStartPointer > endPointer){\n              // in case all chunks have been processed\n              newStartPointer = endPointer;\n              endReached = true;\n            };\n\n            // **BAUSTELLE 1**\n            // slice out one chunk from the initial WAV-Blob\n            // concatenate sliced out chunk with header bytes\n\n            // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n            var chunk = myBlob.slice(startPointer, newStartPointer, 'audio/wav');\n            var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n            // var chunkAudio = new Blob([wavHeader44byte, chunk]);\n\n            var reader = new FileReader(); // initiate file reader\n            reader.readAsDataURL(chunkAudio); // read in the chunk\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              // export chunk to string of base64 WAV Audio including header\n              base64string = String(base64data);\n\n\n\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n\n\n              // ATTEMPT REMOVE BASE64\n              // remove base64 WAV header \"data:audio/wav;base64,\"\n              var base64stringArr = base64string.split(',');\n              //base64string = base64string.substring(22);\n              base64string = base64stringArr[1];\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n                // both need to be header free before\n                //var bothData = atob(base64full) + atob(base64string); // binary string\n                // var bothData64 = btoa(bothData); // base64 encoded\n                //base64full = //version of bothData64 without the header\n                // base64full = bothData64;\n                base64full = base64full + base64string;\n              };\n\n\n\n              // ATTEMPT CONCAT BASE64 main\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                // convert base64full to ArrayBuffer\n                var myB64Data1  = base64full.split(',');\n                var myB64Chunk1 = myB64Data1[1];\n                var binary_string1 = window.atob(myB64Chunk1);\n                var len1 = binary_string1.length;\n                var bytes1 = new Uint8Array(len1);\n                for (var i = 0; i < len1; i++) {\n                    bytes1[i] = binary_string1.charCodeAt(i);\n                  }\n                var myBuffer1 = bytes1.buffer;\n\n                // convert base64string to ArrayBuffer\n                var myB64Data2  = base64string.split(',');\n                var myB64Chunk2 = myB64Data2[1];\n                var binary_string2 = window.atob(myB64Chunk2);\n                var len2 = binary_string2.length;\n                var bytes2 = new Uint8Array(len2);\n                for (var j = 0; j < len2; j++) {\n                    bytes2[i] = binary_string2.charCodeAt(j);\n                  }\n                var myBuffer2 = bytes2.buffer;\n\n                Streamlit.setComponentValue('test_buffers');\n\n                // create final full array buffer\n                var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n\n                Streamlit.setComponentValue('test_buffers_concat');\n\n\n                var options = {isFloat: false, numChannels: 2, sampleRate: 44100}\n\n                const type = options.isFloat ? Float32Array : Uint16Array\n                const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT\n\n                options = Object.assign({}, options, { numFrames })\n                // TODO is this allocation allowed?????????\n\n                const numChannels =    options.numChannels || 2;\n                const sampleRate =     options.sampleRate || 44100;\n                const bytesPerSample = options.isFloat? 4 : 2;\n                const format =         options.isFloat? 3 : 1;\n\n                const blockAlign = numChannels * bytesPerSample;\n                const byteRate = sampleRate * blockAlign;\n                const dataSize = numFrames * blockAlign;\n\n                const bufferHeader = new ArrayBuffer(44);\n                const dv = new DataView(bufferHeader);\n\n                let p = 0;\n                let s = '';\n\n                s = 'RIFF'; // ChunkID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, (dataSize + 36), true);\n                p += 4; // ChunkSize\n\n                s = 'WAVE'; // Format\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                s = 'fmt '; // Subchunk1ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, 16, true);\n                p += 4; // Subchunk1Size\n\n                dv.setUint16(p, format, true);\n                p += 2; // AudioFormat\n\n                dv.setUint16(p, numChannels, true);\n                p += 2; // NumChannels\n\n                dv.setUint32(p, sampleRate, true);\n                p += 4; // SampleRate\n\n                dv.setUint32(p, byteRate, true);\n                p += 4; // ByteRate\n\n                dv.setUint16(p, blockAlign, true);\n                p += 2; // BlockAlign\n\n                dv.setUint16(p, (bytesPerSample * 8), true);\n                p += 2; // BitsPerSample\n\n                s = 'data'; // Subchunk2ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, dataSize, true);\n                p += 4; // Subchunk2Size\n\n                const headerBytes = new Uint8Array(bufferHeader);\n                const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength);\n\n                // prepend header, then add pcmBytes\n                wavBytes.set(headerBytes, 0)\n                wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length)\n\n                myFinalBuffer = wavBytes;\n\n                var binary = '';\n                var bytes = new Uint8Array(myFinalBuffer);\n                var len = bytes.byteLength;\n                for (var k = 0; k < len; k++) {\n                   binary += String.fromCharCode(bytes[k]);\n                 };\n                base64full = window.btoa(binary);\n\n              }; // close else\n\n\n\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer;\n          };\n\n        };\n      };\n      xhr.send();\n\n\n    */\n    } // close all efforts to export to Streamlit\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}