{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/_MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css';\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n// class that implements objects of the application\n// these objects return the application's contents\nclass MyComponent extends StreamlitComponentBase {\n  constructor(props) {\n    super(props);\n\n    this.start = () => {\n      this.setState({\n        recordState: RecordState.START\n      });\n    };\n\n    this.pause = () => {\n      this.setState({\n        recordState: RecordState.PAUSE\n      });\n    };\n\n    this.stop = () => {\n      this.setState({\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onStop = data => {\n      this.setState({\n        audioData: data\n      });\n      console.log('onStop: audio data', data);\n    };\n\n    this.render = () => {\n      const name = this.props.args[\"name\"];\n      const {\n        recordState\n      } = this.state;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop,\n        backgroundColor: \"rgb(255,255,255)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioData ? this.state.audioData.url : null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"pause\",\n        onClick: this.pause,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }\n      }, \"Stop\"));\n    };\n\n    this.state = {\n      recordState: null,\n      audioData: null\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// export an object of class MyComponent!\n\n\nexport default withStreamlitConnection(MyComponent); // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/_MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","MyComponent","constructor","props","start","setState","recordState","START","pause","PAUSE","stop","STOP","onStop","data","audioData","console","log","render","name","args","state","url","setComponentReady","setFrameHeight"],"mappings":";AAAA,SACEA,SADF,EAEEC,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;AAEA,OAAOC,kBAAP,IAA6BC,WAA7B,QAAgD,sBAAhD;AACA,OAAO,qCAAP;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA,MAAMC,WAAN,SAA0BL,sBAA1B,CAAwD;AAEtDM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,KATmB,GASX,MAAM;AACZ,WAAKC,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAEN,WAAW,CAACO;AADb,OAAd;AAGD,KAbkB;;AAAA,SAenBC,KAfmB,GAeX,MAAM;AACZ,WAAKH,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAEN,WAAW,CAACS;AADb,OAAd;AAGD,KAnBkB;;AAAA,SAqBnBC,IArBmB,GAqBZ,MAAM;AACX,WAAKL,QAAL,CAAc;AACZC,QAAAA,WAAW,EAAEN,WAAW,CAACW;AADb,OAAd;AAGD,KAzBkB;;AAAA,SA2BnBC,MA3BmB,GA2BTC,IAAD,IAAU;AACjB,WAAKR,QAAL,CAAc;AACZS,QAAAA,SAAS,EAAED;AADC,OAAd;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCH,IAAlC;AACD,KAhCkB;;AAAA,SAkCZI,MAlCY,GAkCH,MAAiB;AAE/B,YAAMC,IAAI,GAAG,KAAKf,KAAL,CAAWgB,IAAX,CAAgB,MAAhB,CAAb;AACA,YAAM;AAAEb,QAAAA;AAAF,UAAkB,KAAKc,KAA7B;AAEA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,kBAAD;AACE,QAAA,KAAK,EAAEd,WADT;AAEE,QAAA,MAAM,EAAE,KAAKM,MAFf;AAGE,QAAA,eAAe,EAAC,kBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAME;AACE,QAAA,EAAE,EAAC,OADL;AAEE,QAAA,QAAQ,MAFV;AAGE,QAAA,GAAG,EAAE,KAAKQ,KAAL,CAAWN,SAAX,GAAuB,KAAKM,KAAL,CAAWN,SAAX,CAAqBO,GAA5C,GAAkD,IAHzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,eAWE;AAAQ,QAAA,EAAE,EAAC,QAAX;AAAoB,QAAA,OAAO,EAAE,KAAKjB,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAXF,eAcE;AAAQ,QAAA,EAAE,EAAC,OAAX;AAAmB,QAAA,OAAO,EAAE,KAAKI,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAdF,eAiBE;AAAQ,QAAA,EAAE,EAAC,MAAX;AAAkB,QAAA,OAAO,EAAE,KAAKE,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAjBF,CADF;AAuBD,KA9DkB;;AAGjB,SAAKU,KAAL,GAAa;AACXd,MAAAA,WAAW,EAAE,IADF;AAEXQ,MAAAA,SAAS,EAAE;AAFA,KAAb;AAID;;AATqD,C,CAqExD;AACA;AACA;AAEA;;;AACA,eAAejB,uBAAuB,CAACI,WAAD,CAAtC,C,CACA;AAEA;AACA;;AACAN,SAAS,CAAC2B,iBAAV,G,CAEA;AACA;;AACA3B,SAAS,CAAC4B,cAAV","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\n// class that implements objects of the application\n// these objects return the application's contents\nclass MyComponent extends StreamlitComponentBase<State> {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      recordState: null,\n      audioData: null\n    }\n  }\n\n  start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  pause = () => {\n    this.setState({\n      recordState: RecordState.PAUSE\n    })\n  }\n\n  stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  onStop = (data) => {\n    this.setState({\n      audioData: data\n    })\n    console.log('onStop: audio data', data)\n  }\n\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    const { recordState } = this.state\n\n    return (\n      <div>\n        <AudioReactRecorder\n          state={recordState}\n          onStop={this.onStop}\n          backgroundColor='rgb(255,255,255)'\n        />\n        <audio\n          id='audio'\n          controls\n          src={this.state.audioData ? this.state.audioData.url : null}\n        ></audio>\n        <button id='record' onClick={this.start}>\n          Start\n        </button>\n        <button id='pause' onClick={this.pause}>\n          Pause\n        </button>\n        <button id='stop' onClick={this.stop}>\n          Stop\n        </button>\n      </div>\n    )\n  }\n\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n\n// export an object of class MyComponent!\nexport default withStreamlitConnection(MyComponent)\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}