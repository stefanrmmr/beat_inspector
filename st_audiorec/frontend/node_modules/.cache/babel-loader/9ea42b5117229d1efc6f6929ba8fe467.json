{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/_MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n// class that implements objects of the application\n// these objects return the application's contents\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n\n    this.render = () => {\n      const name = this.props.args[\"name\"];\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        style: style,\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// export an object of class MyComponent!\n\n\nexport default withStreamlitConnection(MyComponent); // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/_MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","render","name","props","args","style","onClicked","disabled","_onFocus","_onBlur","setState","prevState","numClicks","setComponentValue","state","isFocused","setComponentReady","setFrameHeight"],"mappings":";AAAA,SACEA,SADF,EAEEC,sBAFF,EAGEC,uBAHF,QAIO,yBAJP;AAKA,OAAOC,KAAP,MAAiC,OAAjC;;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA,MAAMC,WAAN,SAA0BH,sBAA1B,CAAwD;AAAA;AAAA;;AAAA,SAE/CI,MAF+C,GAEtC,MAAiB;AAE/B,YAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb;AAGA,0BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACUF,IADV,yBAEE;AACE,QAAA,KAAK,EAAEG,KADT;AAEE,QAAA,OAAO,EAAE,KAAKC,SAFhB;AAGE,QAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWI,QAHvB;AAIE,QAAA,OAAO,EAAE,KAAKC,QAJhB;AAKE,QAAA,MAAM,EAAE,KAAKC,OALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAcD,KArBqD;;AAAA,SAwB9CH,SAxB8C,GAwBlC,MAAY;AAC9B;AACA;AACA,WAAKI,QAAL,CACEC,SAAS,KAAK;AAAEC,QAAAA,SAAS,EAAED,SAAS,CAACC,SAAV,GAAsB;AAAnC,OAAL,CADX,EAEE,MAAMhB,SAAS,CAACiB,iBAAV,CAA4B,KAAKC,KAAL,CAAWF,SAAvC,CAFR;AAID,KA/BqD;;AAAA,SAkC9CJ,QAlC8C,GAkCnC,MAAY;AAC7B,WAAKE,QAAL,CAAc;AAAEK,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KApCqD;;AAAA,SAuC9CN,OAvC8C,GAuCpC,MAAY;AAC5B,WAAKC,QAAL,CAAc;AAAEK,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD,KAzCqD;AAAA;;AAAA,C,CA4CxD;AACA;AACA;AAEA;;;AACA,eAAejB,uBAAuB,CAACE,WAAD,CAAtC,C,CACA;AAEA;AACA;;AACAJ,SAAS,CAACoB,iBAAV,G,CAEA;AACA;;AACApB,SAAS,CAACqB,cAAV","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\n// class that implements objects of the application\n// these objects return the application's contents\nclass MyComponent extends StreamlitComponentBase<State> {\n\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n\n\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n\n// export an object of class MyComponent!\nexport default withStreamlitConnection(MyComponent)\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}