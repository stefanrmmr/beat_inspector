{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css';\nimport * as fs from 'fs';\nimport axios from 'axios'; //import { FilesManager } from 'turbodepot-node';\n\nclass StAudioRec extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false,\n      recordState: null,\n      audioDataURL: '',\n      reset: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // compatibility with older vers of Streamlit that don't send theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.onClick_start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }, \"Start Recording\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.onClick_stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"reset\",\n        onClick: this.onClick_reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop_audio,\n        type: \"audio/wav\",\n        backgroundColor: \"rgb(15, 17, 22)\",\n        foregroundColor: \"rgb(227, 252, 3)\",\n        canvasWidth: 450,\n        canvasHeight: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"continue\",\n        onClick: this.onClick_continue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }, \"Continue to Analysis\")));\n    };\n\n    this.onClick_start = () => {\n      this.setState({\n        reset: false,\n        audioDataURL: '',\n        recordState: RecordState.START\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_stop = () => {\n      this.setState({\n        reset: false,\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onClick_reset = () => {\n      this.setState({\n        reset: true,\n        audioDataURL: '',\n        recordState: RecordState.STOP\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_continue = () => {\n      if (this.state.audioDataURL !== '') {\n        // NOT WORKING THO: --> see python code notes\n        // return a string to the blob content\n        //var blob_url = String(this.state.audioDataURL)\n        //Streamlit.setComponentValue(blob_url.substring(5))\n        var content = fs.readFileSync('file.ogg');\n        Streamlit.setComponentValue(content); // 1. fetch content from blob url directly\n        // 2. store content in tmp folder as files\n        // 3. convert audioblob --> arraybuffer --> audiobuffer --> wav files\n        // 4. get url of file stored in tmp folder and hand it to python\n        // 5. maybe also hand the file directly to python?\n        //let filesManager = new FilesManager();\n        //const temp_path = filesManager.createTempDirectory('temp-dir-name');\n        //Streamlit.setComponentValue(String(temp_path))\n      }\n    };\n\n    this.onStop_audio = data => {\n      if (this.state.reset === true) {\n        this.setState({\n          audioDataURL: ''\n        });\n        Streamlit.setComponentValue('');\n      } else {\n        this.setState({\n          audioDataURL: data.url\n        });\n        axios({\n          method: 'get',\n          url: data.url,\n          // blob url eg. blob:http://127.0.0.1:8000/e89c5d87-a634-4540-974c-30dc476825cc\n          responseType: 'blob'\n        }).then(function (response) {\n          var reader = new FileReader();\n          reader.readAsDataURL(response.data);\n\n          reader.onloadend = function () {\n            var base64data = reader.result; // self.props.onMainImageDrop(base64data)\n\n            fs.writeFileSync('file.ogg', Buffer.from(base64data.replace('data:audio/ogg; codecs=opus;base64,', ''), 'base64'));\n          };\n        });\n      }\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(StAudioRec); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","fs","axios","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","content","readFileSync","data","url","method","responseType","then","response","reader","FileReader","readAsDataURL","onloadend","base64data","result","writeFileSync","Buffer","from","replace","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\nimport * as fs from 'fs'\nimport axios, { AxiosRequestConfig, AxiosPromise, AxiosResponse } from 'axios';\n\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      // NOT WORKING THO: --> see python code notes\n      // return a string to the blob content\n      //var blob_url = String(this.state.audioDataURL)\n      //Streamlit.setComponentValue(blob_url.substring(5))\n\n      var content = fs.readFileSync('file.ogg');\n      Streamlit.setComponentValue(content)\n\n\n      // 1. fetch content from blob url directly\n      // 2. store content in tmp folder as files\n      // 3. convert audioblob --> arraybuffer --> audiobuffer --> wav files\n      // 4. get url of file stored in tmp folder and hand it to python\n      // 5. maybe also hand the file directly to python?\n\n      //let filesManager = new FilesManager();\n      //const temp_path = filesManager.createTempDirectory('temp-dir-name');\n\n      //Streamlit.setComponentValue(String(temp_path))\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n\n      axios({\n              method: 'get',\n              url: data.url, // blob url eg. blob:http://127.0.0.1:8000/e89c5d87-a634-4540-974c-30dc476825cc\n              responseType: 'blob'\n          }).then(function(response){\n               var reader = new FileReader();\n               reader.readAsDataURL(response.data);\n               reader.onloadend = function() {\n                   var base64data = reader.result;\n                   // self.props.onMainImageDrop(base64data)\n                   fs.writeFileSync('file.ogg', Buffer.from(base64data.replace('data:audio/ogg; codecs=opus;base64,', ''), 'base64'));\n               }\n\n          })\n\n\n    }\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}