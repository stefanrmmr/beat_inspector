{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css';\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      recordState: null,\n      audioDataUrl: ''\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      // const name = this.props.args[\"name\"]\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // compatibility with older vers. of Streamlit that don't send theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border.\n        // Alternatively, the theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop_audio,\n        backgroundColor: \"rgb(255,255,255)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.onClick_start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"pause\",\n        onClick: this.onClick_pause,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.onClick_stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }\n      }, \"Stop\")));\n    };\n\n    this.onClick_start = () => {\n      this.setState({\n        recordState: RecordState.START\n      });\n    };\n\n    this.onClick_pause = () => {\n      this.setState({\n        recordState: RecordState.PAUSE\n      });\n    };\n\n    this.onClick_stop = () => {\n      this.setState({\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onStop_audio = data => {\n      this.setState({\n        audioDataUrl: data.url\n      });\n      Streamlit.setComponentValue(data.url);\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent); // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","MyComponent","state","recordState","audioDataUrl","render","theme","props","style","borderStyling","isFocused","primaryColor","border","outline","onStop_audio","onClick_start","onClick_pause","onClick_stop","setState","START","PAUSE","STOP","data","url","setComponentValue","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  recordState: null\n  audioDataUrl: string\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { recordState: null, audioDataUrl: ''}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    // const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers. of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border.\n      // Alternatively, the theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            backgroundColor='rgb(255,255,255)'\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataUrl}\n          ></audio>\n\n          <button id='record' onClick={this.onClick_start}>\n            Start\n          </button>\n          <button id='pause' onClick={this.onClick_pause}>\n            Pause\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n        </div>\n      </span>\n    )\n  }\n\n  /** fucntions from react audio recorder app */\n  private onClick_start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  private onClick_pause = () => {\n    this.setState({\n      recordState: RecordState.PAUSE\n    })\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onStop_audio = (data) => {\n    this.setState({\n      audioDataUrl: data.url\n    })\n    Streamlit.setComponentValue(data.url)\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}