{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nconst display = document.querySelector('.display');\nconst controllerWrapper = document.querySelector('.controllers');\nconst State = ['Initial', 'Record', 'Download'];\nlet stateIndex = 0;\nlet mediaRecorder,\n    chunks = [],\n    audioURL = ''; // mediaRecorder setup for audio\n\nif (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n  console.log('mediaDevices supported..');\n  navigator.mediaDevices.getUserMedia({\n    audio: true\n  }).then(stream => {\n    mediaRecorder = new MediaRecorder(stream);\n\n    mediaRecorder.ondataavailable = e => {\n      chunks.push(e.data);\n    };\n\n    mediaRecorder.onstop = () => {\n      const blob = new Blob(chunks, {\n        'type': 'audio/ogg; codecs=opus'\n      });\n      chunks = [];\n      audioURL = window.URL.createObjectURL(blob);\n      document.querySelector('audio').src = audioURL;\n    };\n  }).catch(error => {\n    console.log('Following error has occured : ', error);\n  });\n} else {\n  stateIndex = '';\n  application(stateIndex);\n}\n\nconst clearDisplay = () => {\n  display.textContent = '';\n};\n\nconst clearControls = () => {\n  controllerWrapper.textContent = '';\n};\n\nconst record = () => {\n  stateIndex = 1;\n  mediaRecorder.start();\n  application(stateIndex);\n};\n\nconst stopRecording = () => {\n  stateIndex = 2;\n  mediaRecorder.stop();\n  application(stateIndex);\n};\n\nconst analyzeAudio = () => {\n  // this element needs to create a return value for streamlit\n  const downloadLink = document.createElement('a');\n  downloadLink.href = audioURL;\n  downloadLink.setAttribute('download', 'audio');\n  downloadLink.click();\n};\n\nconst addButton = (id, funString, text) => {\n  const btn = document.createElement('button');\n  btn.id = id;\n  btn.setAttribute('onclick', funString);\n  btn.textContent = text;\n  controllerWrapper.append(btn);\n};\n\nconst addMessage = text => {\n  const msg = document.createElement('p');\n  msg.textContent = text;\n  display.append(msg);\n};\n\nconst addAudio = () => {\n  const audio = document.createElement('audio');\n  audio.controls = true;\n  audio.src = audioURL;\n  display.append(audio);\n};\n\nconst application = index => {\n  switch (State[index]) {\n    case 'Initial':\n      clearDisplay();\n      clearControls();\n      addMessage('Press the start button to start recording\\n');\n      addButton('record', 'record()', 'Start Recording');\n      break;\n\n    case 'Record':\n      clearDisplay();\n      clearControls();\n      addMessage('Recording...\\n');\n      addButton('stop', 'stopRecording()', 'Stop Recording');\n      break;\n\n    case 'Download':\n      clearControls();\n      clearDisplay();\n      addAudio();\n      addButton('continue', 'analyzeAudio()', 'Continue');\n      addButton('record', 'record()', 'Record Again');\n      break;\n\n    default:\n      clearControls();\n      clearDisplay();\n      addMessage('Your browser does not support mediaDevices');\n      break;\n  }\n};\n\napplication(stateIndex);\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"]; // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n\n      const {\n        theme\n      } = this.props;\n      const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      } // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        style: style,\n        onClick: this.onClicked,\n        disabled: this.props.disabled,\n        onFocus: this._onFocus,\n        onBlur: this._onBlur,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }, \"Click Me!\"));\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","display","document","querySelector","controllerWrapper","State","stateIndex","mediaRecorder","chunks","audioURL","navigator","mediaDevices","getUserMedia","console","log","audio","then","stream","MediaRecorder","ondataavailable","e","push","data","onstop","blob","Blob","window","URL","createObjectURL","src","catch","error","application","clearDisplay","textContent","clearControls","record","start","stopRecording","stop","analyzeAudio","downloadLink","createElement","href","setAttribute","click","addButton","id","funString","text","btn","append","addMessage","msg","addAudio","controls","index","MyComponent","state","numClicks","isFocused","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","setState","prevState","setComponentValue","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nconst display = document.querySelector('.display')\nconst controllerWrapper = document.querySelector('.controllers')\n\nconst State = ['Initial', 'Record', 'Download']\nlet stateIndex = 0\nlet mediaRecorder, chunks = [], audioURL = ''\n\n// mediaRecorder setup for audio\nif(navigator.mediaDevices && navigator.mediaDevices.getUserMedia){\n    console.log('mediaDevices supported..')\n\n    navigator.mediaDevices.getUserMedia({\n        audio: true\n    }).then(stream => {\n        mediaRecorder = new MediaRecorder(stream)\n\n        mediaRecorder.ondataavailable = (e) => {\n            chunks.push(e.data)\n        }\n\n        mediaRecorder.onstop = () => {\n            const blob = new Blob(chunks, {'type': 'audio/ogg; codecs=opus'})\n            chunks = []\n            audioURL = window.URL.createObjectURL(blob)\n            document.querySelector('audio').src = audioURL\n\n        }\n    }).catch(error => {\n        console.log('Following error has occured : ',error)\n    })\n}else{\n    stateIndex = ''\n    application(stateIndex)\n}\n\nconst clearDisplay = () => {\n    display.textContent = ''\n}\n\nconst clearControls = () => {\n    controllerWrapper.textContent = ''\n}\n\nconst record = () => {\n    stateIndex = 1\n    mediaRecorder.start()\n    application(stateIndex)\n}\n\nconst stopRecording = () => {\n    stateIndex = 2\n    mediaRecorder.stop()\n    application(stateIndex)\n}\n\nconst analyzeAudio = () => {\n    // this element needs to create a return value for streamlit\n    const downloadLink = document.createElement('a')\n    downloadLink.href = audioURL\n    downloadLink.setAttribute('download', 'audio')\n    downloadLink.click()\n}\n\nconst addButton = (id, funString, text) => {\n    const btn = document.createElement('button')\n    btn.id = id\n    btn.setAttribute('onclick', funString)\n    btn.textContent = text\n    controllerWrapper.append(btn)\n}\n\nconst addMessage = (text) => {\n    const msg = document.createElement('p')\n    msg.textContent = text\n    display.append(msg)\n}\n\nconst addAudio = () => {\n    const audio = document.createElement('audio')\n    audio.controls = true\n    audio.src = audioURL\n    display.append(audio)\n}\n\nconst application = (index) => {\n    switch (State[index]) {\n        case 'Initial':\n            clearDisplay()\n            clearControls()\n\n            addMessage('Press the start button to start recording\\n')\n            addButton('record', 'record()', 'Start Recording')\n            break;\n\n        case 'Record':\n            clearDisplay()\n            clearControls()\n\n            addMessage('Recording...\\n')\n            addButton('stop', 'stopRecording()', 'Stop Recording')\n            break\n\n        case 'Download':\n            clearControls()\n            clearDisplay()\n\n            addAudio()\n            addButton('continue', 'analyzeAudio()', 'Continue')\n            addButton('record', 'record()', 'Record Again')\n            break\n\n        default:\n            clearControls()\n            clearDisplay()\n\n            addMessage('Your browser does not support mediaDevices')\n            break;\n    }\n\n}\n\napplication(stateIndex)\n\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}