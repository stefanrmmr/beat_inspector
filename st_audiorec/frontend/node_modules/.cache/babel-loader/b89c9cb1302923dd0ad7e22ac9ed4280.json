{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css'; // import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\nclass StAudioRec extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false,\n      recordState: null,\n      audioDataURL: '',\n      reset: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // compatibility with older vers of Streamlit that don't send theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.onClick_start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, \"Start Recording\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.onClick_stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"reset\",\n        onClick: this.onClick_reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop_audio,\n        type: \"audio/wav\",\n        backgroundColor: \"rgb(15, 17, 22)\",\n        foregroundColor: \"rgb(227, 252, 3)\",\n        canvasWidth: 450,\n        canvasHeight: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"continue\",\n        onClick: this.onClick_continue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, \"Continue to Analysis\")));\n    };\n\n    this.onClick_start = () => {\n      this.setState({\n        reset: false,\n        audioDataURL: '',\n        recordState: RecordState.START\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_stop = () => {\n      this.setState({\n        reset: false,\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onClick_reset = () => {\n      this.setState({\n        reset: true,\n        audioDataURL: '',\n        recordState: RecordState.STOP\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_continue = () => {\n      if (this.state.audioDataURL !== '') {//var content = fs.readFileSync('file.ogg');\n        //Streamlit.setComponentValue(content)\n      }\n    };\n\n    this.onStop_audio = data => {\n      if (this.state.reset === true) {\n        this.setState({\n          audioDataURL: ''\n        });\n        Streamlit.setComponentValue('');\n      } else {\n        this.setState({\n          audioDataURL: data.url\n        }); // **CONCEPT for Data-Handling**\n        // fetch blob-object from blob-url\n        // convert blob object --> blob base64data\n        // convert base64data --> ogg file and save to temp\n        // load file from temp and return via st component value\n        // tested: loading the blob from Url: low time consumption\n        // tested: initiating new filereader: low time consumption\n        // tested: loading blob into filereader: low time consumption\n        // tested: splitting blob into chunks: low time consumption\n        // tested: converting blob to base64: insane time consumption\n        // tested: fetching blob arrayBuffer: insane time consumption\n        // info: apparently for larger blob sizes converting to buffer\n        // via response constructor is 6x faster than using FileReader\n        // info: apparently WAV files take up around 10x more space\n        // then equivalent MP3-based files. (.ogg is even smaller)\n        // 20sec WAV audio blob --> 4Mb in memory size\n        // reading in the whole blob file into memory before processing\n        // causes memory overload and lag --> freezes the browser\n        // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', data.url, true);\n        xhr.responseType = 'blob';\n\n        xhr.onload = function (e) {\n          if (this.status == 200) {\n            var myBlob = this.response; // PROCESSING APPROACH A: all at once\n\n            /*var reader = new FileReader();\n            reader.readAsDataURL(myBlob);\n            reader.onloadend = () => {\n              const base64data = reader.result;\n              base64string = String(base64data);\n              base64string = base64string.substring(22);\n              Streamlit.setComponentValue(base64string);\n            }*/\n            // PROCESSING APPROACH B:\n\n            let cSize = 1024 * 10; // chunksize 10kB\n\n            var base64full = ''; // final base64 string\n\n            var base64string = ''; // substring for one chunk\n\n            let startPointer = 44; // start after WAV header\n\n            let endPointer = myBlob.size;\n            let endReached = false;\n            var wavHeader44byte = myBlob.slice(0, 44); // first 44 bytes\n            // the end byte is NOT included (exclusive byte44)\n\n            while (startPointer < endPointer) {\n              // initiate start chunk pointer\n              let newStartPointer = startPointer + cSize;\n\n              if (newStartPointer > endPointer) {\n                // in case all chunks have been processed\n                newStartPointer = endPointer;\n                endReached = true;\n              }\n\n              ; // **BAUSTELLE 1**\n              // slice out one chunk from the initial WAV-Blob\n              // concatenate sliced out chunk with header bytes\n              // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n\n              var chunk = myBlob.slice(startPointer, newStartPointer);\n              var chunkAudio = new Blob([wavHeader44byte, chunk], {\n                type: \"audio/wav\"\n              }); // var chunkAudio = new Blob([wavHeader44byte, chunk]);\n\n              var reader = new FileReader(); // initiate file reader\n\n              reader.readAsDataURL(chunkAudio); // read in the chunk\n\n              reader.onloadend = () => {\n                var base64data = reader.result; // export chunk to string of base64 WAV Audio including header\n\n                base64string = String(base64data); // **BAUSTELLE 2**\n                // concatenate two base64 strings\n                // ATTEMPT REMOVE BASE64\n\n                if (base64full == '') {\n                  // remove base64 WAV header \"data:audio/wav;base64,\"\n                  var base64string_ = base64string.split(',');\n                  base64string = base64string.substring(22);\n                  base64full = base64string;\n                } else {\n                  // both need to be header free before\n                  var bothData = atob(base64full) + atob(base64string); // binary string\n\n                  var bothData64 = btoa(bothData); // base64 encoded\n                  //base64full = //version of bothData64 without the header\n\n                  base64full = bothData64;\n                }\n\n                ; // ATTEMPT CONCAT BASE64 main\n\n                if (base64full == '') {\n                  base64full = base64string;\n                } else {\n                  // convert base64full to ArrayBuffer\n                  var myB64Data1 = base64full.split(',');\n                  var myB64Chunk1 = myB64Data1[1];\n                  var binary_string1 = window.atob(myB64Chunk1);\n                  var len1 = binary_string1.length;\n                  var bytes1 = new Uint8Array(len1);\n\n                  for (var i = 0; i < len1; i++) {\n                    bytes1[i] = binary_string1.charCodeAt(i);\n                  }\n\n                  var myBuffer1 = bytes1.buffer; // convert base64string to ArrayBuffer\n\n                  var myB64Data2 = base64string.split(',');\n                  var myB64Chunk2 = myB64Data2[1];\n                  var binary_string2 = window.atob(myB64Chunk2);\n                  var len2 = binary_string2.length;\n                  var bytes2 = new Uint8Array(len2);\n\n                  for (var j = 0; j < len2; j++) {\n                    bytes2[i] = binary_string2.charCodeAt(j);\n                  }\n\n                  var myBuffer2 = bytes2.buffer;\n                  Streamlit.setComponentValue('test_buffers'); // create final full array buffer\n\n                  var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                  myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                  myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n                  Streamlit.setComponentValue('test_buffers_concat');\n                  var options = {\n                    isFloat: false,\n                    numChannels: 2,\n                    sampleRate: 44100\n                  };\n                  const type = options.isFloat ? Float32Array : Uint16Array;\n                  const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT;\n                  options = Object.assign({}, options, {\n                    numFrames\n                  });\n                  const numChannels = options.numChannels || 2;\n                  const sampleRate = options.sampleRate || 44100;\n                  const bytesPerSample = options.isFloat ? 4 : 2;\n                  const format = options.isFloat ? 3 : 1;\n                  const blockAlign = numChannels * bytesPerSample;\n                  const byteRate = sampleRate * blockAlign;\n                  const dataSize = numFrames * blockAlign;\n                  const bufferHeader = new ArrayBuffer(44);\n                  const dv = new DataView(bufferHeader);\n                  let p = 0;\n                  let s = '';\n                  s = 'RIFF'; // ChunkID\n\n                  for (let i = 0; i < s.length; i++) {\n                    dv.setUint8(p + i, s.charCodeAt(i));\n                  }\n\n                  ;\n                  p += s.length;\n                  dv.setUint32(p, dataSize + 36, true);\n                  p += 4; // ChunkSize\n\n                  s = 'WAVE'; // Format\n\n                  for (let i = 0; i < s.length; i++) {\n                    dv.setUint8(p + i, s.charCodeAt(i));\n                  }\n\n                  ;\n                  p += s.length;\n                  s = 'fmt '; // Subchunk1ID\n\n                  for (let i = 0; i < s.length; i++) {\n                    dv.setUint8(p + i, s.charCodeAt(i));\n                  }\n\n                  ;\n                  p += s.length;\n                  dv.setUint32(p, 16, true);\n                  p += 4; // Subchunk1Size\n\n                  dv.setUint16(p, format, true);\n                  p += 2; // AudioFormat\n\n                  dv.setUint16(p, numChannels, true);\n                  p += 2; // NumChannels\n\n                  dv.setUint32(p, sampleRate, true);\n                  p += 4; // SampleRate\n\n                  dv.setUint32(p, byteRate, true);\n                  p += 4; // ByteRate\n\n                  dv.setUint16(p, blockAlign, true);\n                  p += 2; // BlockAlign\n\n                  dv.setUint16(p, bytesPerSample * 8, true);\n                  p += 2; // BitsPerSample\n\n                  s = 'data'; // Subchunk2ID\n\n                  for (let i = 0; i < s.length; i++) {\n                    dv.setUint8(p + i, s.charCodeAt(i));\n                  }\n\n                  ;\n                  p += s.length;\n                  dv.setUint32(p, dataSize, true);\n                  p += 4; // Subchunk2Size\n\n                  const headerBytes = new Uint8Array(bufferHeader);\n                  const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength); // prepend header, then add pcmBytes\n\n                  wavBytes.set(headerBytes, 0);\n                  wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length);\n                  myFinalBuffer = wavBytes;\n                  var binary = '';\n                  var bytes = new Uint8Array(myFinalBuffer);\n                  var len = bytes.byteLength;\n\n                  for (var k = 0; k < len; k++) {\n                    binary += String.fromCharCode(bytes[k]);\n                  }\n\n                  ;\n                  base64full = window.btoa(binary);\n                }\n\n                ; // close else\n                // update current status of base64full after every iteration\n                // keep the setComponentValue statement within the filereader!\n\n                if (endReached) {\n                  // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                  // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                  Streamlit.setComponentValue(base64full);\n                }\n              }; //update chunk pointer\n\n\n              startPointer = newStartPointer;\n            }\n\n            ;\n          }\n\n          ;\n        };\n\n        xhr.send();\n      }\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(StAudioRec); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","data","url","xhr","XMLHttpRequest","open","responseType","onload","e","status","myBlob","response","cSize","base64full","base64string","startPointer","endPointer","size","endReached","wavHeader44byte","slice","newStartPointer","chunk","chunkAudio","Blob","type","reader","FileReader","readAsDataURL","onloadend","base64data","result","String","base64string_","split","substring","bothData","atob","bothData64","btoa","myB64Data1","myB64Chunk1","binary_string1","window","len1","length","bytes1","Uint8Array","i","charCodeAt","myBuffer1","buffer","myB64Data2","myB64Chunk2","binary_string2","len2","bytes2","j","myBuffer2","myFinalBuffer","byteLength","set","options","isFloat","numChannels","sampleRate","Float32Array","Uint16Array","numFrames","BYTES_PER_ELEMENT","Object","assign","bytesPerSample","format","blockAlign","byteRate","dataSize","bufferHeader","ArrayBuffer","dv","DataView","p","s","setUint8","setUint32","setUint16","headerBytes","wavBytes","binary","bytes","len","k","fromCharCode","send","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      //var content = fs.readFileSync('file.ogg');\n      //Streamlit.setComponentValue(content)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n\n          // PROCESSING APPROACH A: all at once\n          /*var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }*/\n\n          // PROCESSING APPROACH B:\n          let cSize = 1024*10; // chunksize 10kB\n          var base64full = ''; // final base64 string\n          var base64string = ''; // substring for one chunk\n          let startPointer = 44; // start after WAV header\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          var wavHeader44byte = myBlob.slice(0, 44); // first 44 bytes\n          // the end byte is NOT included (exclusive byte44)\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize;\n            if (newStartPointer > endPointer){\n              // in case all chunks have been processed\n              newStartPointer = endPointer;\n              endReached = true;\n            };\n\n            // **BAUSTELLE 1**\n            // slice out one chunk from the initial WAV-Blob\n            // concatenate sliced out chunk with header bytes\n\n            // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n            var chunk = myBlob.slice(startPointer, newStartPointer);\n            var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n            // var chunkAudio = new Blob([wavHeader44byte, chunk]);\n\n            var reader = new FileReader(); // initiate file reader\n            reader.readAsDataURL(chunkAudio); // read in the chunk\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              // export chunk to string of base64 WAV Audio including header\n              base64string = String(base64data);\n\n\n\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n\n              // ATTEMPT REMOVE BASE64\n              if (base64full == ''){\n                // remove base64 WAV header \"data:audio/wav;base64,\"\n                var base64string_ = base64string.split(',');\n                base64string = base64string.substring(22);\n                base64full = base64string;\n              } else {\n\n                // both need to be header free before\n\n                var bothData = atob(base64full) + atob(base64string); // binary string\n                var bothData64 = btoa(bothData); // base64 encoded\n                //base64full = //version of bothData64 without the header\n                base64full = bothData64;\n              };\n\n\n\n\n\n\n              // ATTEMPT CONCAT BASE64 main\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                // convert base64full to ArrayBuffer\n                var myB64Data1  = base64full.split(',');\n                var myB64Chunk1 = myB64Data1[1];\n                var binary_string1 = window.atob(myB64Chunk1);\n                var len1 = binary_string1.length;\n                var bytes1 = new Uint8Array(len1);\n                for (var i = 0; i < len1; i++) {\n                    bytes1[i] = binary_string1.charCodeAt(i);\n                  }\n                var myBuffer1 = bytes1.buffer;\n\n                // convert base64string to ArrayBuffer\n                var myB64Data2  = base64string.split(',');\n                var myB64Chunk2 = myB64Data2[1];\n                var binary_string2 = window.atob(myB64Chunk2);\n                var len2 = binary_string2.length;\n                var bytes2 = new Uint8Array(len2);\n                for (var j = 0; j < len2; j++) {\n                    bytes2[i] = binary_string2.charCodeAt(j);\n                  }\n                var myBuffer2 = bytes2.buffer;\n\n                Streamlit.setComponentValue('test_buffers');\n\n                // create final full array buffer\n                var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n\n                Streamlit.setComponentValue('test_buffers_concat');\n\n\n                var options = {isFloat: false, numChannels: 2, sampleRate: 44100}\n\n                const type = options.isFloat ? Float32Array : Uint16Array\n                const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT\n\n                options = Object.assign({}, options, { numFrames })\n\n                const numChannels =    options.numChannels || 2;\n                const sampleRate =     options.sampleRate || 44100;\n                const bytesPerSample = options.isFloat? 4 : 2;\n                const format =         options.isFloat? 3 : 1;\n\n                const blockAlign = numChannels * bytesPerSample;\n                const byteRate = sampleRate * blockAlign;\n                const dataSize = numFrames * blockAlign;\n\n                const bufferHeader = new ArrayBuffer(44);\n                const dv = new DataView(bufferHeader);\n\n                let p = 0;\n                let s = '';\n\n                s = 'RIFF'; // ChunkID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, (dataSize + 36), true);\n                p += 4; // ChunkSize\n\n                s = 'WAVE'; // Format\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                s = 'fmt '; // Subchunk1ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, 16, true);\n                p += 4; // Subchunk1Size\n\n                dv.setUint16(p, format, true);\n                p += 2; // AudioFormat\n\n                dv.setUint16(p, numChannels, true);\n                p += 2; // NumChannels\n\n                dv.setUint32(p, sampleRate, true);\n                p += 4; // SampleRate\n\n                dv.setUint32(p, byteRate, true);\n                p += 4; // ByteRate\n\n                dv.setUint16(p, blockAlign, true);\n                p += 2; // BlockAlign\n\n                dv.setUint16(p, (bytesPerSample * 8), true);\n                p += 2; // BitsPerSample\n\n                s = 'data'; // Subchunk2ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, dataSize, true);\n                p += 4; // Subchunk2Size\n\n                const headerBytes = new Uint8Array(bufferHeader);\n                const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength);\n\n                // prepend header, then add pcmBytes\n                wavBytes.set(headerBytes, 0)\n                wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length)\n\n                myFinalBuffer = wavBytes;\n\n                var binary = '';\n                var bytes = new Uint8Array(myFinalBuffer);\n                var len = bytes.byteLength;\n                for (var k = 0; k < len; k++) {\n                   binary += String.fromCharCode(bytes[k]);\n                 };\n                base64full = window.btoa(binary);\n\n              }; // close else\n\n\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer;\n          };\n\n        };\n      };\n      xhr.send();\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}