{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */var MyComponent=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(MyComponent,_StreamlitComponentBa);var _super=_createSuper(MyComponent);function MyComponent(){var _this;_classCallCheck(this,MyComponent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={numClicks:0,isFocused:false};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nvar name=_this.props.args[\"name\"];// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/React.createElement(\"span\",null,\"Hello, \",name,\"! \\xA0\",/*#__PURE__*/React.createElement(\"button\",{id:\"button_a\",style:style,onClick:_this.onClickedA},\"Button A\"),/*#__PURE__*/React.createElement(\"button\",{id:\"button_b\",style:style,onClick:_this.onClickedB},\"Button B\"),/*#__PURE__*/React.createElement(\"button\",{id:\"button_c\",style:style,onClick:_this.onClickedC},\"Button C\"));};_this.onClicked=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\n_this.setState(function(prevState){return{numClicks:prevState.numClicks+1};},function(){return Streamlit.setComponentValue(_this.state.numClicks);});};_this.onClickedA=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nStreamlit.setComponentValue('A');};_this.onClickedB=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nStreamlit.setComponentValue('B');};_this.onClickedC=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nStreamlit.setComponentValue('C');};_this._onFocus=function(){_this.setState({isFocused:true});};_this._onBlur=function(){_this.setState({isFocused:false});};return _this;}return _createClass(MyComponent);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);// You don't need to edit withStreamlitConnection (but you're welcome to!).\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","MyComponent","state","numClicks","isFocused","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onClickedA","onClickedB","onClickedC","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur","setComponentReady","setFrameHeight"],"mappings":"4kBAAA,OACEA,SADF,CAEEC,sBAFF,CAGEC,uBAHF,KAIO,yBAJP,CAKA,MAAOC,CAAAA,KAAP,KAAiC,OAAjC,CAOA;AACA;AACA;AACA,G,GACMC,CAAAA,W,qWACGC,K,CAAQ,CAAEC,SAAS,CAAE,CAAb,CAAgBC,SAAS,CAAE,KAA3B,C,OAERC,M,CAAS,UAAiB,CAC/B;AACA;AACA,GAAMC,CAAAA,IAAI,CAAG,MAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb,CAEA;AACA;AACA;AACA,GAAQC,CAAAA,KAAR,CAAkB,MAAKF,KAAvB,CAAQE,KAAR,CACA,GAAMC,CAAAA,KAA0B,CAAG,EAAnC,CAEA;AACA;AACA,GAAID,KAAJ,CAAW,CACT;AACA;AACA,GAAME,CAAAA,aAAa,qBACjB,MAAKT,KAAL,CAAWE,SAAX,CAAuBK,KAAK,CAACG,YAA7B,CAA4C,MAD3B,CAAnB,CAGAF,KAAK,CAACG,MAAN,CAAeF,aAAf,CACAD,KAAK,CAACI,OAAN,CAAgBH,aAAhB,CACD,CAED;AACA;AACA;AACA;AACA,mBACE,0CACUL,IADV,uBAEE,8BAAQ,EAAE,CAAC,UAAX,CAAsB,KAAK,CAAEI,KAA7B,CAAoC,OAAO,CAAE,MAAKK,UAAlD,aAFF,cAKE,8BAAQ,EAAE,CAAC,UAAX,CAAsB,KAAK,CAAEL,KAA7B,CAAoC,OAAO,CAAE,MAAKM,UAAlD,aALF,cAQE,8BAAQ,EAAE,CAAC,UAAX,CAAsB,KAAK,CAAEN,KAA7B,CAAoC,OAAO,CAAE,MAAKO,UAAlD,aARF,CADF,CAcD,C,OAGOC,S,CAAY,UAAY,CAC9B;AACA;AACA,MAAKC,QAAL,CACE,SAAAC,SAAS,QAAK,CAAEjB,SAAS,CAAEiB,SAAS,CAACjB,SAAV,CAAsB,CAAnC,CAAL,EADX,CAEE,iBAAMN,CAAAA,SAAS,CAACwB,iBAAV,CAA4B,MAAKnB,KAAL,CAAWC,SAAvC,CAAN,EAFF,EAID,C,OAGOY,U,CAAa,UAAY,CAC/B;AACA;AACAlB,SAAS,CAACwB,iBAAV,CAA4B,GAA5B,EACD,C,OAEOL,U,CAAa,UAAY,CAC/B;AACA;AACAnB,SAAS,CAACwB,iBAAV,CAA4B,GAA5B,EACD,C,OAEOJ,U,CAAa,UAAY,CAC/B;AACA;AACApB,SAAS,CAACwB,iBAAV,CAA4B,GAA5B,EACD,C,OAKOC,Q,CAAW,UAAY,CAC7B,MAAKH,QAAL,CAAc,CAAEf,SAAS,CAAE,IAAb,CAAd,EACD,C,OAGOmB,O,CAAU,UAAY,CAC5B,MAAKJ,QAAL,CAAc,CAAEf,SAAS,CAAE,KAAb,CAAd,EACD,C,kDArFuBN,sB,EAwF1B;AACA;AACA;AACA;AACA;AACA,cAAeC,CAAAA,uBAAuB,CAACE,WAAD,CAAtC,CACA;AAEA;AACA;AACAJ,SAAS,CAAC2B,iBAAV,GAEA;AACA;AACA3B,SAAS,CAAC4B,cAAV","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button id='button_a' style={style} onClick={this.onClickedA}>\n          Button A\n        </button>\n        <button id='button_b' style={style} onClick={this.onClickedB}>\n          Button B\n        </button>\n        <button id='button_c' style={style} onClick={this.onClickedC}>\n          Button C\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n\n  private onClickedA = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('A')\n  }\n\n  private onClickedB = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('B')\n  }\n\n  private onClickedC = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('C')\n  }\n\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}