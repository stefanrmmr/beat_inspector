{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import AudioReactRecorder,{RecordState}from'audio-react-recorder';import'audio-react-recorder/dist/index.css';// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\nvar StAudioRec=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(StAudioRec,_StreamlitComponentBa);var _super=_createSuper(StAudioRec);function StAudioRec(){var _this;_classCallCheck(this,StAudioRec);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={isFocused:false,recordState:null,audioDataURL:'',reset:false};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};var recordState=_this.state.recordState;// compatibility with older vers of Streamlit that don't send theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}return/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{id:\"record\",onClick:_this.onClick_start},\"Start Recording\"),/*#__PURE__*/React.createElement(\"button\",{id:\"stop\",onClick:_this.onClick_stop},\"Stop\"),/*#__PURE__*/React.createElement(\"button\",{id:\"reset\",onClick:_this.onClick_reset},\"Reset\"),/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:_this.onStop_audio,type:\"audio/wav\",backgroundColor:\"rgb(15, 17, 22)\",foregroundColor:\"rgb(227, 252, 3)\",canvasWidth:450,canvasHeight:100}),/*#__PURE__*/React.createElement(\"audio\",{id:\"audio\",controls:true,src:_this.state.audioDataURL}),/*#__PURE__*/React.createElement(\"button\",{id:\"continue\",onClick:_this.onClick_continue},\"Continue to Analysis\")));};_this.onClick_start=function(){_this.setState({reset:false,audioDataURL:'',recordState:RecordState.START});Streamlit.setComponentValue('');};_this.onClick_stop=function(){_this.setState({reset:false,recordState:RecordState.STOP});};_this.onClick_reset=function(){_this.setState({reset:true,audioDataURL:'',recordState:RecordState.STOP});Streamlit.setComponentValue('');};_this.onClick_continue=function(){if(_this.state.audioDataURL!==''){//var content = fs.readFileSync('file.ogg');\n//Streamlit.setComponentValue(content)\n}};_this.onStop_audio=function(data){if(_this.state.reset===true){_this.setState({audioDataURL:''});Streamlit.setComponentValue('');}else{_this.setState({audioDataURL:data.url});// **CONCEPT for Data-Handling**\n// fetch blob-object from blob-url\n// convert blob object --> blob base64data\n// convert base64data --> ogg file and save to temp\n// load file from temp and return via st component value\n// tested: loading the blob from Url: low time consumption\n// tested: initiating new filereader: low time consumption\n// tested: loading blob into filereader: low time consumption\n// tested: splitting blob into chunks: low time consumption\n// tested: converting blob to base64: insane time consumption\n// tested: fetching blob arrayBuffer: insane time consumption\n// info: apparently for larger blob sizes converting to buffer\n// via response constructor is 6x faster than using FileReader\n// info: apparently WAV files take up around 10x more space\n// then equivalent MP3-based files. (.ogg is even smaller)\n// 20sec WAV audio blob --> 4Mb in memory size\n// reading in the whole blob file into memory before processing\n// causes memory overload and lag --> freezes the browser\n// read in the blob in sub-sets/blob chunks to avoid inefficiencies\nvar xhr=new XMLHttpRequest();xhr.open('GET',data.url,true);xhr.responseType='blob';xhr.onload=function(e){var _this2=this;if(this.status==200){var myBlob;var base64full;var base64string;var wavHeader44byte;var chunk;var chunkAudio;var reader;(function(){myBlob=_this2.response;// PROCESSING APPROACH A: all at once\n/*var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }*/ // PROCESSING APPROACH B:\nvar cSize=1024*100;// chunksize 100kB\nbase64full='';// final base64 string\nbase64string='';// substring for one chunk\nvar startPointer=44;// start after WAV header\nvar endPointer=myBlob.size;var endReached=false;wavHeader44byte=myBlob.slice(0,43);// first 44 bytes\nwhile(startPointer<endPointer){// initiate start chunk pointer\nvar newStartPointer=startPointer+cSize-1;if(newStartPointer>endPointer){// in case all chunks have been processed\nnewStartPointer=endPointer;endReached=true;};// **BAUSTELLE 1**\n// slice out one chunk from the initial WAV-Blob\n// concatenate sliced out chunk with header bytes\n// var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\nchunk=myBlob.slice(startPointer,newStartPointer);chunkAudio=new Blob([wavHeader44byte,chunk],{type:\"audio/wav\"});reader=new FileReader();// initiate file reader\nreader.readAsDataURL(chunkAudio);// read in the chunk\nreader.onloadend=function(){var base64data=reader.result;// export chunk to string of base64 WAV Audio including header\nbase64string=String(base64data);if(base64full==''){base64full=base64string;}else{// convert base64string to ArrayBuffer\nvar myB64Data1=base64string.split(',');var myB64Chunk1=myB64Data1[1];var binary_string1=window.atob(myB64Chunk1);var len1=binary_string1.length;var bytes1=new Uint8Array(len1);for(var i=0;i<len1;i++){bytes1[i]=binary_string1.charCodeAt(i);}var myBuffer1=bytes1.buffer;Streamlit.setComponentValue('test_buffers');// convert base64full to ArrayBuffer\nvar myB64Data2=base64full.split(',');var myB64Chunk2=myB64Data2[1];var binary_string2=window.atob(myB64Chunk2);var len2=binary_string2.length;var bytes2=new Uint8Array(len2);for(var j=0;j<len2;j++){bytes2[i]=binary_string2.charCodeAt(j);}var myBuffer2=bytes2.buffer;Streamlit.setComponentValue('test_buffers');// create final full array buffer\nvar myFinalBuffer=new Uint8Array(myBuffer1.byteLength+myBuffer2.byteLength);myFinalBuffer.set(new Uint8Array(myBuffer1),0);myFinalBuffer.set(new Uint8Array(myBuffer2),myBuffer1.byteLength);var options={isFloat:false,numChannels:2,sampleRate:44100};var type=options.isFloat?Float32Array:Uint16Array;var numFrames=myFinalBuffer.byteLength/type.BYTES_PER_ELEMENT;options=Object.assign({},options,{numFrames:numFrames});var numChannels=options.numChannels||2;var sampleRate=options.sampleRate||44100;var bytesPerSample=options.isFloat?4:2;var format=options.isFloat?3:1;var blockAlign=numChannels*bytesPerSample;var byteRate=sampleRate*blockAlign;var dataSize=numFrames*blockAlign;var bufferHeader=new ArrayBuffer(44);var dv=new DataView(bufferHeader);var p=0;var s='';s='RIFF';// ChunkID\nfor(var _i=0;_i<s.length;_i++){dv.setUint8(p+_i,s.charCodeAt(_i));};p+=s.length;dv.setUint32(p,dataSize+36,true);p+=4;// ChunkSize\ns='WAVE';// Format\nfor(var _i2=0;_i2<s.length;_i2++){dv.setUint8(p+_i2,s.charCodeAt(_i2));};p+=s.length;s='fmt ';// Subchunk1ID\nfor(var _i3=0;_i3<s.length;_i3++){dv.setUint8(p+_i3,s.charCodeAt(_i3));};p+=s.length;dv.setUint32(p,16,true);p+=4;// Subchunk1Size\ndv.setUint16(p,format,true);p+=2;// AudioFormat\ndv.setUint16(p,numChannels,true);p+=2;// NumChannels\ndv.setUint32(p,sampleRate,true);p+=4;// SampleRate\ndv.setUint32(p,byteRate,true);p+=4;// ByteRate\ndv.setUint16(p,blockAlign,true);p+=2;// BlockAlign\ndv.setUint16(p,bytesPerSample*8,true);p+=2;// BitsPerSample\ns='data';// Subchunk2ID\nfor(var _i4=0;_i4<s.length;_i4++){dv.setUint8(p+_i4,s.charCodeAt(_i4));};p+=s.length;dv.setUint32(p,dataSize,true);p+=4;// Subchunk2Size\nvar headerBytes=new Uint8Array(bufferHeader);var wavBytes=new Uint8Array(headerBytes.length+myFinalBuffer.byteLength);// prepend header, then add pcmBytes\nwavBytes.set(headerBytes,0);wavBytes.set(new Uint8Array(myFinalBuffer),headerBytes.length);myFinalBuffer=wavBytes;var binary='';var bytes=new Uint8Array(myFinalBuffer);var len=bytes.byteLength;for(var k=0;k<len;k++){binary+=String.fromCharCode(bytes[k]);};base64full=window.btoa(binary);};/*// remove base64 WAV header \"data:audio/wav;base64,\"\n              base64string = base64string.substring(22);\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n              // ? or export as arraybuffers that are concatenated and then transformed to base64\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                var bothData = atob(base64full) + atob(base64string); // binary string\n                var bothData64 = btoa(bothData); // base64 encoded\n                //base64full = //version of bothData64 without the header\n                base64full = bothData64;\n              };*/ // update current status of base64full after every iteration\n// keep the setComponentValue statement within the filereader!\nif(endReached){// fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n// base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n// Streamlit.setComponentValue(base64full);\n}};//update chunk pointer\nstartPointer=newStartPointer+1;};})();};};xhr.send();}};return _this;}return _createClass(StAudioRec);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","data","url","xhr","XMLHttpRequest","open","responseType","onload","e","status","myBlob","base64full","base64string","wavHeader44byte","chunk","chunkAudio","reader","response","cSize","startPointer","endPointer","size","endReached","slice","newStartPointer","Blob","type","FileReader","readAsDataURL","onloadend","base64data","result","String","myB64Data1","split","myB64Chunk1","binary_string1","window","atob","len1","length","bytes1","Uint8Array","i","charCodeAt","myBuffer1","buffer","myB64Data2","myB64Chunk2","binary_string2","len2","bytes2","j","myBuffer2","myFinalBuffer","byteLength","set","options","isFloat","numChannels","sampleRate","Float32Array","Uint16Array","numFrames","BYTES_PER_ELEMENT","Object","assign","bytesPerSample","format","blockAlign","byteRate","dataSize","bufferHeader","ArrayBuffer","dv","DataView","p","s","setUint8","setUint32","setUint16","headerBytes","wavBytes","binary","bytes","len","k","fromCharCode","btoa","send","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  //\n\n\n\n\n\n  //\n\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      //var content = fs.readFileSync('file.ogg');\n      //Streamlit.setComponentValue(content)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n          // PROCESSING APPROACH A: all at once\n          /*var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }*/\n\n          // PROCESSING APPROACH B:\n          let cSize = 1024*100; // chunksize 100kB\n          var base64full = ''; // final base64 string\n          var base64string = ''; // substring for one chunk\n          let startPointer = 44; // start after WAV header\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          var wavHeader44byte = myBlob.slice(0, 43); // first 44 bytes\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize-1;\n            if (newStartPointer > endPointer){\n              // in case all chunks have been processed\n              newStartPointer = endPointer;\n              endReached = true;\n            };\n\n            // **BAUSTELLE 1**\n            // slice out one chunk from the initial WAV-Blob\n            // concatenate sliced out chunk with header bytes\n\n            // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n            var chunk = myBlob.slice(startPointer, newStartPointer);\n            var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n\n            var reader = new FileReader(); // initiate file reader\n            reader.readAsDataURL(chunkAudio); // read in the chunk\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              // export chunk to string of base64 WAV Audio including header\n              base64string = String(base64data);\n\n\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                // convert base64string to ArrayBuffer\n                var myB64Data1  = base64string.split(',');\n                var myB64Chunk1 = myB64Data1[1];\n                var binary_string1 = window.atob(myB64Chunk1);\n                var len1 = binary_string1.length;\n                var bytes1 = new Uint8Array(len1);\n                for (var i = 0; i < len1; i++) {\n                    bytes1[i] = binary_string1.charCodeAt(i);\n                  }\n                var myBuffer1 = bytes1.buffer;\n                Streamlit.setComponentValue('test_buffers');\n\n                // convert base64full to ArrayBuffer\n                var myB64Data2  = base64full.split(',');\n                var myB64Chunk2 = myB64Data2[1];\n                var binary_string2 = window.atob(myB64Chunk2);\n                var len2 = binary_string2.length;\n                var bytes2 = new Uint8Array(len2);\n                for (var j = 0; j < len2; j++) {\n                    bytes2[i] = binary_string2.charCodeAt(j);\n                  }\n                var myBuffer2 = bytes2.buffer;\n\n                Streamlit.setComponentValue('test_buffers');\n\n                // create final full array buffer\n                var myFinalBuffer = new Uint8Array(myBuffer1.byteLength + myBuffer2.byteLength);\n                myFinalBuffer.set(new Uint8Array(myBuffer1), 0);\n                myFinalBuffer.set(new Uint8Array(myBuffer2), myBuffer1.byteLength);\n\n\n                var options = {isFloat: false, numChannels: 2, sampleRate: 44100}\n\n                const type = options.isFloat ? Float32Array : Uint16Array\n                const numFrames = myFinalBuffer.byteLength / type.BYTES_PER_ELEMENT\n\n                options = Object.assign({}, options, { numFrames })\n\n                const numChannels =    options.numChannels || 2;\n                const sampleRate =     options.sampleRate || 44100;\n                const bytesPerSample = options.isFloat? 4 : 2;\n                const format =         options.isFloat? 3 : 1;\n\n                const blockAlign = numChannels * bytesPerSample;\n                const byteRate = sampleRate * blockAlign;\n                const dataSize = numFrames * blockAlign;\n\n                const bufferHeader = new ArrayBuffer(44);\n                const dv = new DataView(bufferHeader);\n\n                let p = 0;\n                let s = '';\n\n                s = 'RIFF'; // ChunkID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, (dataSize + 36), true);\n                p += 4; // ChunkSize\n\n                s = 'WAVE'; // Format\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                s = 'fmt '; // Subchunk1ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, 16, true);\n                p += 4; // Subchunk1Size\n\n                dv.setUint16(p, format, true);\n                p += 2; // AudioFormat\n\n                dv.setUint16(p, numChannels, true);\n                p += 2; // NumChannels\n\n                dv.setUint32(p, sampleRate, true);\n                p += 4; // SampleRate\n\n                dv.setUint32(p, byteRate, true);\n                p += 4; // ByteRate\n\n                dv.setUint16(p, blockAlign, true);\n                p += 2; // BlockAlign\n\n                dv.setUint16(p, (bytesPerSample * 8), true);\n                p += 2; // BitsPerSample\n\n                s = 'data'; // Subchunk2ID\n                for (let i = 0; i < s.length; i++) {\n                  dv.setUint8(p + i, s.charCodeAt(i));};\n                p += s.length;\n\n                dv.setUint32(p, dataSize, true);\n                p += 4; // Subchunk2Size\n\n                const headerBytes = new Uint8Array(bufferHeader);\n                const wavBytes = new Uint8Array(headerBytes.length + myFinalBuffer.byteLength);\n\n                // prepend header, then add pcmBytes\n                wavBytes.set(headerBytes, 0)\n                wavBytes.set(new Uint8Array(myFinalBuffer), headerBytes.length)\n\n                myFinalBuffer = wavBytes;\n\n                var binary = '';\n                var bytes = new Uint8Array(myFinalBuffer);\n                var len = bytes.byteLength;\n                for (var k = 0; k < len; k++) {\n                   binary += String.fromCharCode(bytes[k]);\n                 };\n                base64full = window.btoa(binary);\n\n\n\n              };\n\n\n\n              /*// remove base64 WAV header \"data:audio/wav;base64,\"\n              base64string = base64string.substring(22);\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n              // ? or export as arraybuffers that are concatenated and then transformed to base64\n\n              if (base64full == ''){\n                base64full = base64string;\n              } else {\n\n                var bothData = atob(base64full) + atob(base64string); // binary string\n                var bothData64 = btoa(bothData); // base64 encoded\n                //base64full = //version of bothData64 without the header\n                base64full = bothData64;\n              };*/\n\n\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                // base64full is returned WITHOUT the base64 header \"data:audio/wav;base64,\"\n                // Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer+1;\n          };\n\n        };\n      };\n      xhr.send();\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}