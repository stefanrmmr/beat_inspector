{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css';\n\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false,\n      recordState: null,\n      audioDataUrl: '',\n      reset: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // compatibility with older vers of Streamlit that don't send theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop_audio,\n        backgroundColor: \"rgb(255,255,255)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.onClick_start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.onClick_stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"reset\",\n        onClick: this.onClick_reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }, \"Reset\")));\n    };\n\n    this.onClick_start = () => {\n      this.state.reset = false;\n      this.setState({\n        recordState: RecordState.START\n      });\n    };\n\n    this.onClick_stop = () => {\n      this.state.reset = false;\n      this.setState({\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onClick_reset = () => {\n      this.state.reset = true;\n      Streamlit.setComponentValue('');\n      this.setState({\n        audioDataUrl: ''\n      });\n      this.setState({\n        recordState: RecordState.STOP\n      }); // stop recording\n    };\n\n    this.onStop_audio = data => {\n      if (this.state.reset) {\n        this.setState({\n          audioDataUrl: ''\n        });\n        Streamlit.setComponentValue('');\n      } else {\n        this.setState({\n          audioDataUrl: data.url\n        });\n        Streamlit.setComponentValue(data.url);\n      }\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","MyComponent","state","isFocused","recordState","audioDataUrl","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onStop_audio","onClick_start","onClick_stop","onClick_reset","setState","START","STOP","setComponentValue","data","url","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataUrl: string\n  reset: boolean\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataUrl: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            backgroundColor='rgb(255,255,255)'\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataUrl}\n          ></audio>\n\n          <button id='record' onClick={this.onClick_start}>\n            Start\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private onClick_start = () => {\n    this.state.reset = false\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  private onClick_stop = () => {\n    this.state.reset = false\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.state.reset = true\n    Streamlit.setComponentValue('')\n    this.setState({\n      audioDataUrl: ''\n    })\n    this.setState({\n      recordState: RecordState.STOP,\n    }) // stop recording\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset)\n    {\n      this.setState({\n        audioDataUrl: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataUrl: data.url\n      })\n      Streamlit.setComponentValue(data.url)\n    }\n\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}