{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import AudioReactRecorder,{RecordState}from'audio-react-recorder';import'audio-react-recorder/dist/index.css';// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\nvar StAudioRec=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(StAudioRec,_StreamlitComponentBa);var _super=_createSuper(StAudioRec);function StAudioRec(){var _this;_classCallCheck(this,StAudioRec);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={isFocused:false,recordState:null,audioDataURL:'',reset:false};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};var recordState=_this.state.recordState;// compatibility with older vers of Streamlit that don't send theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}return/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{id:\"record\",onClick:_this.onClick_start},\"Start Recording\"),/*#__PURE__*/React.createElement(\"button\",{id:\"stop\",onClick:_this.onClick_stop},\"Stop\"),/*#__PURE__*/React.createElement(\"button\",{id:\"reset\",onClick:_this.onClick_reset},\"Reset\"),/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:_this.onStop_audio,type:\"audio/wav\",backgroundColor:\"rgb(15, 17, 22)\",foregroundColor:\"rgb(227, 252, 3)\",canvasWidth:450,canvasHeight:100}),/*#__PURE__*/React.createElement(\"audio\",{id:\"audio\",controls:true,src:_this.state.audioDataURL}),/*#__PURE__*/React.createElement(\"button\",{id:\"continue\",onClick:_this.onClick_continue},\"Continue to Analysis\")));};_this.onClick_start=function(){_this.setState({reset:false,audioDataURL:'',recordState:RecordState.START});Streamlit.setComponentValue('');};_this.onClick_stop=function(){_this.setState({reset:false,recordState:RecordState.STOP});};_this.onClick_reset=function(){_this.setState({reset:true,audioDataURL:'',recordState:RecordState.STOP});Streamlit.setComponentValue('');};_this.onClick_continue=function(){if(_this.state.audioDataURL!==''){//var content = fs.readFileSync('file.ogg');\n//Streamlit.setComponentValue(content)\n}};_this.onStop_audio=function(data){if(_this.state.reset===true){_this.setState({audioDataURL:''});Streamlit.setComponentValue('');}else{_this.setState({audioDataURL:data.url});// **CONCEPT for Data-Handling**\n// fetch blob-object from blob-url\n// convert blob object --> blob base64data\n// convert base64data --> ogg file and save to temp\n// load file from temp and return via st component value\n// tested: loading the blob from Url: low time consumption\n// tested: initiating new filereader: low time consumption\n// tested: loading blob into filereader: low time consumption\n// tested: splitting blob into chunks: low time consumption\n// tested: converting blob to base64: insane time consumption\n// tested: fetching blob arrayBuffer: insane time consumption\n// info: apparently for larger blob sizes converting to buffer\n// via response constructor is 6x faster than using FileReader\n// info: apparently WAV files take up around 10x more space\n// then equivalent MP3-based files. (.ogg is even smaller)\n// 20sec WAV audio blob --> 4Mb in memory size\n// reading in the whole blob file into memory before processing\n// causes memory overload and lag --> freezes the browser\n// read in the blob in sub-sets/blob chunks to avoid inefficiencies\nvar xhr=new XMLHttpRequest();xhr.open('GET',data.url,true);xhr.responseType='blob';xhr.onload=function(e){var _this2=this;if(this.status==200){var myBlob;var base64full;var base64string;var chunk;var reader;(function(){myBlob=_this2.response;// Streamlit.setComponentValue('test');\n/*var base64stringA = '';\n          var base64stringB = '';\n          var blobChunkA = myBlob.slice(startPointer, midPointer, 'audio/wav');\n          var blobChunkB = myBlob.slice(midPointer, endPointer, 'audio/wav');\n\n          var readerA = new FileReader();\n          readerA.readAsDataURL(blobChunkA);\n          readerA.onloadend = () => {\n            const base64dataA = readerA.result;\n            base64stringA = String(base64dataA);\n            base64stringA = base64stringA.substring(22);\n            // Streamlit.setComponentValue(base64stringA);\n          }\n\n          var readerB = new FileReader();\n          readerB.readAsDataURL(blobChunkB);\n          readerB.onloadend = () => {\n            const base64dataB = readerB.result;\n            base64stringB = String(base64dataB);\n            base64stringB = base64stringB.substring(22);\n            // Streamlit.setComponentValue(base64stringB);\n          }*/ // IDEA: split into multiple subblobs and execute the following\n// block for every subblob --> resulting in sending multiple base64\n//strings in order to the streamlit backend. On the streamlit side:\n// everytime the signal changes --> add it to array, collecting all array inputs\n// merge all array inputs and have full base 64 file\n/*var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }*/ // Split blob into chunks of that are 100kB in size\nvar cSize=1024*100;base64full='';base64string='';var startPointer=0;var endPointer=myBlob.size;var endReached=false;while(startPointer<endPointer){// initiate start chunk pointer\nvar newStartPointer=startPointer+cSize-1;if(newStartPointer>endPointer){newStartPointer=endPointer;endReached=true;// all chunks processed\n};// process the selected chunk to base64\nchunk=myBlob.slice(startPointer,newStartPointer,'audio/wav');reader=new FileReader();reader.readAsDataURL(chunk);reader.onloadend=function(){var base64data=reader.result;base64string=String(base64data);base64string=base64string.substring(22);base64full=base64full+base64string;// update current status of base64full after every iteration\n// keep the setComponentValue statement within the filereader!\nif(endReached){Streamlit.setComponentValue(base64full);}};//update chunk pointer\nstartPointer=newStartPointer+1;};//var reader = new FileReader();\n//reader.readAsDataURL(myBlob)\n//reader.onloadend = () => {\n//const base64data = reader.result;\n//Streamlit.setComponentValue(base64data)\n// data:audio/wav;base64,UklGRiwAAwBXQVZFZm10IBAAAAAB...\n// conversion to base64 works just fine! Milestone achieved lol\n// fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n})();};};xhr.send();}};return _this;}return _createClass(StAudioRec);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","data","url","xhr","XMLHttpRequest","open","responseType","onload","e","status","myBlob","base64full","base64string","chunk","reader","response","cSize","startPointer","endPointer","size","endReached","newStartPointer","slice","FileReader","readAsDataURL","onloadend","base64data","result","String","substring","send","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      //var content = fs.readFileSync('file.ogg');\n      //Streamlit.setComponentValue(content)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n          // Streamlit.setComponentValue('test');\n\n          /*var base64stringA = '';\n          var base64stringB = '';\n          var blobChunkA = myBlob.slice(startPointer, midPointer, 'audio/wav');\n          var blobChunkB = myBlob.slice(midPointer, endPointer, 'audio/wav');\n\n          var readerA = new FileReader();\n          readerA.readAsDataURL(blobChunkA);\n          readerA.onloadend = () => {\n            const base64dataA = readerA.result;\n            base64stringA = String(base64dataA);\n            base64stringA = base64stringA.substring(22);\n            // Streamlit.setComponentValue(base64stringA);\n          }\n\n          var readerB = new FileReader();\n          readerB.readAsDataURL(blobChunkB);\n          readerB.onloadend = () => {\n            const base64dataB = readerB.result;\n            base64stringB = String(base64dataB);\n            base64stringB = base64stringB.substring(22);\n            // Streamlit.setComponentValue(base64stringB);\n          }*/\n\n\n          // IDEA: split into multiple subblobs and execute the following\n          // block for every subblob --> resulting in sending multiple base64\n          //strings in order to the streamlit backend. On the streamlit side:\n          // everytime the signal changes --> add it to array, collecting all array inputs\n          // merge all array inputs and have full base 64 file\n\n          /*var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }*/\n\n\n          // Split blob into chunks of that are 100kB in size\n          let cSize = 1024*100;\n          var base64full = '';\n          var base64string = '';\n          let startPointer = 0;\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize-1;\n            if (newStartPointer > endPointer){\n              newStartPointer = endPointer;\n              endReached = true; // all chunks processed\n            };\n            // process the selected chunk to base64\n            var chunk = myBlob.slice(startPointer, newStartPointer, 'audio/wav');\n            var reader = new FileReader();\n            reader.readAsDataURL(chunk);\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              base64string = String(base64data);\n              base64string = base64string.substring(22);\n              base64full = base64full + base64string;\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer+1;\n          };\n\n\n\n          //var reader = new FileReader();\n          //reader.readAsDataURL(myBlob)\n          //reader.onloadend = () => {\n            //const base64data = reader.result;\n            //Streamlit.setComponentValue(base64data)\n            // data:audio/wav;base64,UklGRiwAAwBXQVZFZm10IBAAAAAB...\n            // conversion to base64 works just fine! Milestone achieved lol\n\n            // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n        };\n      };\n      xhr.send();\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}