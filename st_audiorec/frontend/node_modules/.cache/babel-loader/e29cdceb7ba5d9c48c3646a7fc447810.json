{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css'; // import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\nclass StAudioRec extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false,\n      recordState: null,\n      audioDataURL: '',\n      reset: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // compatibility with older vers of Streamlit that don't send theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.onClick_start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, \"Start Recording\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.onClick_stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"reset\",\n        onClick: this.onClick_reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop_audio,\n        type: \"audio/wav\",\n        backgroundColor: \"rgb(15, 17, 22)\",\n        foregroundColor: \"rgb(227, 252, 3)\",\n        canvasWidth: 450,\n        canvasHeight: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"continue\",\n        onClick: this.onClick_continue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, \"Continue to Analysis\")));\n    };\n\n    this.onClick_start = () => {\n      this.setState({\n        reset: false,\n        audioDataURL: '',\n        recordState: RecordState.START\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_stop = () => {\n      this.setState({\n        reset: false,\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onClick_reset = () => {\n      this.setState({\n        reset: true,\n        audioDataURL: '',\n        recordState: RecordState.STOP\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_continue = () => {\n      if (this.state.audioDataURL !== '') {//var content = fs.readFileSync('file.ogg');\n        //Streamlit.setComponentValue(content)\n      }\n    };\n\n    this.onStop_audio = data => {\n      if (this.state.reset === true) {\n        this.setState({\n          audioDataURL: ''\n        });\n        Streamlit.setComponentValue('');\n      } else {\n        this.setState({\n          audioDataURL: data.url\n        }); // **CONCEPT for Data-Handling**\n        // fetch blob-object from blob-url\n        // convert blob object --> blob base64data\n        // convert base64data --> ogg file and save to temp\n        // load file from temp and return via st component value\n        // tested: loading the blob from Url: low time consumption\n        // tested: initiating new filereader: low time consumption\n        // tested: loading blob into filereader: low time consumption\n        // tested: splitting blob into chunks: low time consumption\n        // tested: converting blob to base64: insane time consumption\n        // tested: fetching blob arrayBuffer: insane time consumption\n        // info: apparently for larger blob sizes converting to buffer\n        // via response constructor is 6x faster than using FileReader\n        // info: apparently WAV files take up around 10x more space\n        // then equivalent MP3-based files. (.ogg is even smaller)\n        // 20sec WAV audio blob --> 4Mb in memory size\n        // reading in the whole blob file into memory before processing\n        // causes memory overload and lag --> freezes the browser\n        // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', data.url, true);\n        xhr.responseType = 'blob';\n\n        xhr.onload = function (e) {\n          if (this.status == 200) {\n            var myBlob = this.response;\n            let startPointer = 0;\n            let endPointer = myBlob.size;\n            let midPointer = endPointer / 2;\n            var blobChunkA = myBlob.slice(startPointer, midPointer - 1);\n            var blobChunkB = myBlob.slice(midPointer, endPointer);\n            var readerA = new FileReader();\n            readerA.readAsDataURL(blobChunkA);\n\n            readerA.onloadend = () => {\n              var base64dataA = readerA.result;\n              var base64stringA = String(base64dataA);\n              base64stringA = base64stringA.substring(22);\n            };\n\n            var readerB = new FileReader();\n            readerB.readAsDataURL(blobChunkB);\n\n            readerB.onloadend = () => {\n              var base64dataB = readerB.result;\n              var base64stringB = String(base64dataB);\n              base64stringB = base64stringB.substring(22);\n            };\n\n            var base64full = base64stringA.concat(base64stringB);\n            Streamlit.setComponentValue(base64full);\n            /*// Split blob into chunks of that are 1kB in size\n            let cSize = 1024;\n            var base64full = '';\n            var base64string = '';\n            let startPointer = 0;\n            let endPointer = myBlob.size;\n            while(startPointer<endPointer){\n              // initiate start chunk pointer\n              let newStartPointer = startPointer+cSize;\n              // process the selected chunk to base64\n              var chunk = myBlob.slice(startPointer, newStartPointer);\n              var reader = new FileReader();\n              reader.readAsDataURL(chunk)\n              reader.onloadend = () => {\n                var base64data = reader.result;\n                base64string = String(base64data);\n                base64string = base64string.substring(22);\n                base64full = base64full.concat(base64string);\n              };\n              //update chunk pointer\n              startPointer = newStartPointer;\n            };*/\n            //var reader = new FileReader();\n            //reader.readAsDataURL(myBlob)\n            //reader.onloadend = () => {\n            //const base64data = reader.result;\n            //Streamlit.setComponentValue(base64data)\n            // data:audio/wav;base64,UklGRiwAAwBXQVZFZm10IBAAAAAB...\n            // conversion to base64 works just fine! Milestone achieved lol\n            // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n          }\n\n          ;\n        };\n\n        xhr.send();\n      }\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(StAudioRec); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","data","url","xhr","XMLHttpRequest","open","responseType","onload","e","status","myBlob","response","startPointer","endPointer","size","midPointer","blobChunkA","slice","blobChunkB","readerA","FileReader","readAsDataURL","onloadend","base64dataA","result","base64stringA","String","substring","readerB","base64dataB","base64stringB","base64full","concat","send","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      //var content = fs.readFileSync('file.ogg');\n      //Streamlit.setComponentValue(content)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n          let startPointer = 0;\n          let endPointer = myBlob.size;\n          let midPointer = endPointer/2;\n\n          var blobChunkA = myBlob.slice(startPointer, (midPointer-1));\n          var blobChunkB = myBlob.slice(midPointer, endPointer);\n\n          var readerA = new FileReader();\n          readerA.readAsDataURL(blobChunkA)\n          readerA.onloadend = () => {\n            var base64dataA = readerA.result;\n            var base64stringA = String(base64dataA);\n            base64stringA = base64stringA.substring(22);\n          }\n\n          var readerB = new FileReader();\n          readerB.readAsDataURL(blobChunkB)\n          readerB.onloadend = () => {\n            var base64dataB = readerB.result;\n            var base64stringB = String(base64dataB);\n            base64stringB = base64stringB.substring(22);\n          }\n\n          var base64full = base64stringA.concat(base64stringB);\n          Streamlit.setComponentValue(base64full)\n\n\n\n          /*// Split blob into chunks of that are 1kB in size\n          let cSize = 1024;\n          var base64full = '';\n          var base64string = '';\n          let startPointer = 0;\n          let endPointer = myBlob.size;\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize;\n            // process the selected chunk to base64\n            var chunk = myBlob.slice(startPointer, newStartPointer);\n            var reader = new FileReader();\n            reader.readAsDataURL(chunk)\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              base64string = String(base64data);\n              base64string = base64string.substring(22);\n              base64full = base64full.concat(base64string);\n            };\n            //update chunk pointer\n            startPointer = newStartPointer;\n          };*/\n\n\n          //var reader = new FileReader();\n          //reader.readAsDataURL(myBlob)\n          //reader.onloadend = () => {\n            //const base64data = reader.result;\n            //Streamlit.setComponentValue(base64data)\n            // data:audio/wav;base64,UklGRiwAAwBXQVZFZm10IBAAAAAB...\n            // conversion to base64 works just fine! Milestone achieved lol\n\n            // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n        };\n      };\n      xhr.send();\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}