{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";var display=document.querySelector('.display');var controllerWrapper=document.querySelector('.controllers');var State=['Initial','Record','Download'];var stateIndex=0;var mediaRecorder,chunks=[],audioURL='';// mediaRecorder setup for audio\nif(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){console.log('mediaDevices supported..');navigator.mediaDevices.getUserMedia({audio:true}).then(function(stream){mediaRecorder=new MediaRecorder(stream);mediaRecorder.ondataavailable=function(e){chunks.push(e.data);};mediaRecorder.onstop=function(){var blob=new Blob(chunks,{'type':'audio/ogg; codecs=opus'});chunks=[];audioURL=window.URL.createObjectURL(blob);document.querySelector('audio').src=audioURL;};}).catch(function(error){console.log('Following error has occured : ',error);});}else{stateIndex='';application(stateIndex);}var clearDisplay=function clearDisplay(){display.textContent='';};var clearControls=function clearControls(){controllerWrapper.textContent='';};var record=function record(){stateIndex=1;mediaRecorder.start();application(stateIndex);};var stopRecording=function stopRecording(){stateIndex=2;mediaRecorder.stop();application(stateIndex);};var analyzeAudio=function analyzeAudio(){// this element needs to create a return value for streamlit\nvar downloadLink=document.createElement('a');downloadLink.href=audioURL;downloadLink.setAttribute('download','audio');downloadLink.click();};var addButton=function addButton(id,funString,text){var btn=document.createElement('button');btn.id=id;btn.setAttribute('onclick',funString);btn.textContent=text;controllerWrapper.append(btn);};var addMessage=function addMessage(text){var msg=document.createElement('p');msg.textContent=text;display.append(msg);};var addAudio=function addAudio(){var audio=document.createElement('audio');audio.controls=true;audio.src=audioURL;display.append(audio);};var application=function application(index){switch(State[index]){case'Initial':clearDisplay();clearControls();addMessage('Press the start button to start recording\\n');addButton('record','record()','Start Recording');break;case'Record':clearDisplay();clearControls();addMessage('Recording...\\n');addButton('stop','stopRecording()','Stop Recording');break;case'Download':clearControls();clearDisplay();addAudio();addButton('continue','analyzeAudio()','Continue');addButton('record','record()','Record Again');break;default:clearControls();clearDisplay();addMessage('Your browser does not support mediaDevices');break;}};application(stateIndex);/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */var MyComponent=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(MyComponent,_StreamlitComponentBa);var _super=_createSuper(MyComponent);function MyComponent(){var _this;_classCallCheck(this,MyComponent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={numClicks:0,isFocused:false};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nvar name=_this.props.args[\"name\"];// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/React.createElement(\"span\",null,\"Hello, \",name,\"! \\xA0\",/*#__PURE__*/React.createElement(\"button\",{style:style,onClick:_this.onClicked,disabled:_this.props.disabled,onFocus:_this._onFocus,onBlur:_this._onBlur},\"Click Me!\"));};_this.onClicked=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\n_this.setState(function(prevState){return{numClicks:prevState.numClicks+1};},function(){return Streamlit.setComponentValue(_this.state.numClicks);});};_this._onFocus=function(){_this.setState({isFocused:true});};_this._onBlur=function(){_this.setState({isFocused:false});};return _this;}return _createClass(MyComponent);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","display","document","querySelector","controllerWrapper","State","stateIndex","mediaRecorder","chunks","audioURL","navigator","mediaDevices","getUserMedia","console","log","audio","then","stream","MediaRecorder","ondataavailable","e","push","data","onstop","blob","Blob","window","URL","createObjectURL","src","catch","error","application","clearDisplay","textContent","clearControls","record","start","stopRecording","stop","analyzeAudio","downloadLink","createElement","href","setAttribute","click","addButton","id","funString","text","btn","append","addMessage","msg","addAudio","controls","index","MyComponent","state","numClicks","isFocused","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","setState","prevState","setComponentValue","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nconst display = document.querySelector('.display')\nconst controllerWrapper = document.querySelector('.controllers')\n\nconst State = ['Initial', 'Record', 'Download']\nlet stateIndex = 0\nlet mediaRecorder, chunks = [], audioURL = ''\n\n// mediaRecorder setup for audio\nif(navigator.mediaDevices && navigator.mediaDevices.getUserMedia){\n    console.log('mediaDevices supported..')\n\n    navigator.mediaDevices.getUserMedia({\n        audio: true\n    }).then(stream => {\n        mediaRecorder = new MediaRecorder(stream)\n\n        mediaRecorder.ondataavailable = (e) => {\n            chunks.push(e.data)\n        }\n\n        mediaRecorder.onstop = () => {\n            const blob = new Blob(chunks, {'type': 'audio/ogg; codecs=opus'})\n            chunks = []\n            audioURL = window.URL.createObjectURL(blob)\n            document.querySelector('audio').src = audioURL\n\n        }\n    }).catch(error => {\n        console.log('Following error has occured : ',error)\n    })\n}else{\n    stateIndex = ''\n    application(stateIndex)\n}\n\nconst clearDisplay = () => {\n    display.textContent = ''\n}\n\nconst clearControls = () => {\n    controllerWrapper.textContent = ''\n}\n\nconst record = () => {\n    stateIndex = 1\n    mediaRecorder.start()\n    application(stateIndex)\n}\n\nconst stopRecording = () => {\n    stateIndex = 2\n    mediaRecorder.stop()\n    application(stateIndex)\n}\n\nconst analyzeAudio = () => {\n    // this element needs to create a return value for streamlit\n    const downloadLink = document.createElement('a')\n    downloadLink.href = audioURL\n    downloadLink.setAttribute('download', 'audio')\n    downloadLink.click()\n}\n\nconst addButton = (id, funString, text) => {\n    const btn = document.createElement('button')\n    btn.id = id\n    btn.setAttribute('onclick', funString)\n    btn.textContent = text\n    controllerWrapper.append(btn)\n}\n\nconst addMessage = (text) => {\n    const msg = document.createElement('p')\n    msg.textContent = text\n    display.append(msg)\n}\n\nconst addAudio = () => {\n    const audio = document.createElement('audio')\n    audio.controls = true\n    audio.src = audioURL\n    display.append(audio)\n}\n\nconst application = (index) => {\n    switch (State[index]) {\n        case 'Initial':\n            clearDisplay()\n            clearControls()\n\n            addMessage('Press the start button to start recording\\n')\n            addButton('record', 'record()', 'Start Recording')\n            break;\n\n        case 'Record':\n            clearDisplay()\n            clearControls()\n\n            addMessage('Recording...\\n')\n            addButton('stop', 'stopRecording()', 'Stop Recording')\n            break\n\n        case 'Download':\n            clearControls()\n            clearDisplay()\n\n            addAudio()\n            addButton('continue', 'analyzeAudio()', 'Continue')\n            addButton('record', 'record()', 'Record Again')\n            break\n\n        default:\n            clearControls()\n            clearDisplay()\n\n            addMessage('Your browser does not support mediaDevices')\n            break;\n    }\n\n}\n\napplication(stateIndex)\n\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Click Me!\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}