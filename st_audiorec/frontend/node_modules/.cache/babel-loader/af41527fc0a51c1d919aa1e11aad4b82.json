{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css'; // import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\nclass StAudioRec extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      isFocused: false,\n      recordState: null,\n      audioDataURL: '',\n      reset: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // compatibility with older vers of Streamlit that don't send theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      }\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.onClick_start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, \"Start Recording\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.onClick_stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }, \"Stop\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"reset\",\n        onClick: this.onClick_reset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }, \"Reset\"), /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop_audio,\n        type: \"audio/wav\",\n        backgroundColor: \"rgb(15, 17, 22)\",\n        foregroundColor: \"rgb(227, 252, 3)\",\n        canvasWidth: 450,\n        canvasHeight: 100,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"continue\",\n        onClick: this.onClick_continue,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, \"Continue to Analysis\")));\n    };\n\n    this.onClick_start = () => {\n      this.setState({\n        reset: false,\n        audioDataURL: '',\n        recordState: RecordState.START\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_stop = () => {\n      this.setState({\n        reset: false,\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onClick_reset = () => {\n      this.setState({\n        reset: true,\n        audioDataURL: '',\n        recordState: RecordState.STOP\n      });\n      Streamlit.setComponentValue('');\n    };\n\n    this.onClick_continue = () => {\n      if (this.state.audioDataURL !== '') {//var content = fs.readFileSync('file.ogg');\n        //Streamlit.setComponentValue(content)\n      }\n    };\n\n    this.onStop_audio = data => {\n      if (this.state.reset === true) {\n        this.setState({\n          audioDataURL: ''\n        });\n        Streamlit.setComponentValue('');\n      } else {\n        this.setState({\n          audioDataURL: data.url\n        }); // **CONCEPT for Data-Handling**\n        // fetch blob-object from blob-url\n        // convert blob object --> blob base64data\n        // convert base64data --> ogg file and save to temp\n        // load file from temp and return via st component value\n        // tested: loading the blob from Url: low time consumption\n        // tested: initiating new filereader: low time consumption\n        // tested: loading blob into filereader: low time consumption\n        // tested: splitting blob into chunks: low time consumption\n        // tested: converting blob to base64: insane time consumption\n        // tested: fetching blob arrayBuffer: insane time consumption\n        // info: apparently for larger blob sizes converting to buffer\n        // via response constructor is 6x faster than using FileReader\n        // info: apparently WAV files take up around 10x more space\n        // then equivalent MP3-based files. (.ogg is even smaller)\n        // 20sec WAV audio blob --> 4Mb in memory size\n        // reading in the whole blob file into memory before processing\n        // causes memory overload and lag --> freezes the browser\n        // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', data.url, true);\n        xhr.responseType = 'blob';\n\n        xhr.onload = function (e) {\n          if (this.status == 200) {\n            var myBlob = this.response; // PROCESSING APPROACH A: all at once\n\n            /*var reader = new FileReader();\n            reader.readAsDataURL(myBlob);\n            reader.onloadend = () => {\n              const base64data = reader.result;\n              base64string = String(base64data);\n              base64string = base64string.substring(22);\n              Streamlit.setComponentValue(base64string);\n            }*/\n            // PROCESSING APPROACH B:\n\n            let cSize = 1024 * 100; // chunksize 100kB\n\n            var base64full = ''; // final base64 string\n\n            var base64string = ''; // substring for one chunk\n\n            let startPointer = 44; // start after WAV header\n\n            let endPointer = myBlob.size;\n            let endReached = false;\n            var wavHeader44byte = myBlob.slice(0, 43); // first 44 bytes\n\n            while (startPointer < endPointer) {\n              // initiate start chunk pointer\n              let newStartPointer = startPointer + cSize - 1;\n\n              if (newStartPointer > endPointer) {\n                // in case all chunks have been processed\n                newStartPointer = endPointer;\n                endReached = true;\n              }\n\n              ; // **BAUSTELLE 1**\n              // slice out one chunk from the initial WAV-Blob\n              // concatenate sliced out chunk with header bytes\n              // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n\n              var chunk = myBlob.slice(startPointer, newStartPointer);\n              var chunkAudio = new Blob([wavHeader44byte, chunk], {\n                type: \"audio/wav\"\n              });\n              var reader = new FileReader(); // initiate file reader\n\n              reader.readAsDataURL(chunkAudio); // read in the chunk\n\n              reader.onloadend = () => {\n                var base64data = reader.result; // export chunk to string of base64 WAV Audio including header\n\n                base64string = String(base64data); // **BAUSTELLE 2**\n                // concatenate two base64 strings\n                // ? OR only concatenate strings, transforming to base64 + header only after all strings are collected & added\n                // output base64full without the header!\n\n                base64string = base64string.substring(22); // new string read for procesing HERE CHECK\n\n                var bothData = atob(base64full) + atob(base64string); // binary string\n\n                var bothData64 = btoa(bothData); // base64 encoded\n\n                base64full = bothData64; // MISSING remove header to be ready for next iteration\n                // in last iteration not remove header but change header to be the audio wav base 64 header\n                // update current status of base64full after every iteration\n                // keep the setComponentValue statement within the filereader!\n\n                if (endReached) {\n                  // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                  Streamlit.setComponentValue(base64full);\n                }\n              }; //update chunk pointer\n\n\n              startPointer = newStartPointer + 1;\n            }\n\n            ;\n          }\n\n          ;\n        };\n\n        xhr.send();\n      }\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(StAudioRec); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","setState","START","setComponentValue","STOP","data","url","xhr","XMLHttpRequest","open","responseType","onload","e","status","myBlob","response","cSize","base64full","base64string","startPointer","endPointer","size","endReached","wavHeader44byte","slice","newStartPointer","chunk","chunkAudio","Blob","type","reader","FileReader","readAsDataURL","onloadend","base64data","result","String","substring","bothData","atob","bothData64","btoa","send","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n// import * as fs from 'fs'\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      //var content = fs.readFileSync('file.ogg');\n      //Streamlit.setComponentValue(content)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataURL: data.url\n      })\n\n      // **CONCEPT for Data-Handling**\n      // fetch blob-object from blob-url\n      // convert blob object --> blob base64data\n      // convert base64data --> ogg file and save to temp\n      // load file from temp and return via st component value\n\n      // tested: loading the blob from Url: low time consumption\n      // tested: initiating new filereader: low time consumption\n      // tested: loading blob into filereader: low time consumption\n      // tested: splitting blob into chunks: low time consumption\n      // tested: converting blob to base64: insane time consumption\n      // tested: fetching blob arrayBuffer: insane time consumption\n\n      // info: apparently for larger blob sizes converting to buffer\n      // via response constructor is 6x faster than using FileReader\n\n      // info: apparently WAV files take up around 10x more space\n      // then equivalent MP3-based files. (.ogg is even smaller)\n\n      // 20sec WAV audio blob --> 4Mb in memory size\n      // reading in the whole blob file into memory before processing\n      // causes memory overload and lag --> freezes the browser\n      // read in the blob in sub-sets/blob chunks to avoid inefficiencies\n\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', data.url, true);\n      xhr.responseType = 'blob';\n      xhr.onload = function(e) {\n        if (this.status == 200) {\n          var myBlob = this.response;\n\n          // PROCESSING APPROACH A: all at once\n          /*var reader = new FileReader();\n          reader.readAsDataURL(myBlob);\n          reader.onloadend = () => {\n            const base64data = reader.result;\n            base64string = String(base64data);\n            base64string = base64string.substring(22);\n            Streamlit.setComponentValue(base64string);\n          }*/\n\n          // PROCESSING APPROACH B:\n          let cSize = 1024*100; // chunksize 100kB\n          var base64full = ''; // final base64 string\n          var base64string = ''; // substring for one chunk\n          let startPointer = 44; // start after WAV header\n          let endPointer = myBlob.size;\n          let endReached = false;\n\n          var wavHeader44byte = myBlob.slice(0, 43); // first 44 bytes\n\n          while(startPointer<endPointer){\n            // initiate start chunk pointer\n            let newStartPointer = startPointer+cSize-1;\n            if (newStartPointer > endPointer){\n              // in case all chunks have been processed\n              newStartPointer = endPointer;\n              endReached = true;\n            };\n\n            // **BAUSTELLE 1**\n            // slice out one chunk from the initial WAV-Blob\n            // concatenate sliced out chunk with header bytes\n\n            // var chunk = new Blob([myBlob.slice(startPointer, newStartPointer, 'audio/wav')]);\n            var chunk = myBlob.slice(startPointer, newStartPointer);\n            var chunkAudio = new Blob([wavHeader44byte, chunk], { type: \"audio/wav\" });\n\n            var reader = new FileReader(); // initiate file reader\n            reader.readAsDataURL(chunkAudio); // read in the chunk\n            reader.onloadend = () => {\n              var base64data = reader.result;\n              // export chunk to string of base64 WAV Audio including header\n              base64string = String(base64data);\n\n              // **BAUSTELLE 2**\n              // concatenate two base64 strings\n\n\n\n\n              // ? OR only concatenate strings, transforming to base64 + header only after all strings are collected & added\n\n\n              // output base64full without the header!\n\n\n\n\n\n\n\n              base64string = base64string.substring(22);\n              // new string read for procesing HERE CHECK\n\n              var bothData = atob(base64full) + atob(base64string); // binary string\n              var bothData64 = btoa(bothData); // base64 encoded\n\n              base64full = bothData64 // MISSING remove header to be ready for next iteration\n\n              // in last iteration not remove header but change header to be the audio wav base 64 header\n\n\n\n\n\n\n\n\n\n              // update current status of base64full after every iteration\n              // keep the setComponentValue statement within the filereader!\n              if (endReached){\n                // fs.writeFileSync('file.ogg', Buffer.from(base64data, 'base64'));\n                Streamlit.setComponentValue(base64full);\n              }\n            };\n            //update chunk pointer\n            startPointer = newStartPointer+1;\n          };\n\n        };\n      };\n      xhr.send();\n\n    }\n\n\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}