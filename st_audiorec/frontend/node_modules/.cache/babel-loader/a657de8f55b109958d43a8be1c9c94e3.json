{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css';\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"]; // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n\n      const {\n        theme\n      } = this.props;\n      const style = {}; // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      } // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }\n      }, \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        id: \"button_a\",\n        style: style,\n        onClick: this.onClickedA,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, \"Button A\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"button_b\",\n        style: style,\n        onClick: this.onClickedB,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }\n      }, \"Button B\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"button_c\",\n        style: style,\n        onClick: this.onClickedC,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, \"Button C\"));\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n\n    this.onClickedA = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      Streamlit.setComponentValue('A');\n    };\n\n    this.onClickedB = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      Streamlit.setComponentValue('B');\n    };\n\n    this.onClickedC = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      Streamlit.setComponentValue('C');\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n\n    this.start = () => {\n      this.setState({\n        recordState: RecordState.START\n      });\n    };\n\n    this.pause = () => {\n      this.setState({\n        recordState: RecordState.PAUSE\n      });\n    };\n\n    this.stop = () => {\n      this.setState({\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onStop = data => {\n      this.setState({\n        audioData: data\n      });\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent); // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","RecordState","MyComponent","state","numClicks","isFocused","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onClickedA","onClickedB","onClickedC","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur","start","recordState","START","pause","PAUSE","stop","STOP","onStop","data","audioData","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  recordState: null\n  audioData: null\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! &nbsp;\n        <button id='button_a' style={style} onClick={this.onClickedA}>\n          Button A\n        </button>\n        <button id='button_b' style={style} onClick={this.onClickedB}>\n          Button B\n        </button>\n        <button id='button_c' style={style} onClick={this.onClickedC}>\n          Button C\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n\n  private onClickedA = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('A')\n  }\n\n  private onClickedB = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('B')\n  }\n\n  private onClickedC = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('C')\n  }\n\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n\n\n  private start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  private pause = () => {\n    this.setState({\n      recordState: RecordState.PAUSE\n    })\n  }\n\n  private stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onStop = (data) => {\n    this.setState({\n      audioData: data\n    })\n  }\n  \n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}