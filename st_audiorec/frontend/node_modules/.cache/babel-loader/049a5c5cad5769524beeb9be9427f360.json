{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import AudioReactRecorder,{RecordState}from'audio-react-recorder';import'audio-react-recorder/dist/index.css';//import { FilesManager } from 'turbodepot-node';\nvar StAudioRec=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(StAudioRec,_StreamlitComponentBa);var _super=_createSuper(StAudioRec);function StAudioRec(){var _this;_classCallCheck(this,StAudioRec);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={isFocused:false,recordState:null,audioDataURL:'',reset:false};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};var recordState=_this.state.recordState;// compatibility with older vers of Streamlit that don't send theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}return/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{id:\"record\",onClick:_this.onClick_start},\"Start Recording\"),/*#__PURE__*/React.createElement(\"button\",{id:\"stop\",onClick:_this.onClick_stop},\"Stop\"),/*#__PURE__*/React.createElement(\"button\",{id:\"reset\",onClick:_this.onClick_reset},\"Reset\"),/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:_this.onStop_audio,type:\"audio/wav\",backgroundColor:\"rgb(15, 17, 22)\",foregroundColor:\"rgb(227, 252, 3)\",canvasWidth:450,canvasHeight:100}),/*#__PURE__*/React.createElement(\"audio\",{id:\"audio\",controls:true,src:_this.state.audioDataURL}),/*#__PURE__*/React.createElement(\"button\",{id:\"continue\",onClick:_this.onClick_continue},\"Continue to Analysis\")));};_this.sendAudioFile=function(file){var formData=new FormData();formData.append('audio-file',file);return fetch('http://localhost:3000/audioUpload',{method:'POST',body:formData});};_this.onClick_start=function(){_this.setState({reset:false,audioDataURL:'',recordState:RecordState.START});Streamlit.setComponentValue('');};_this.onClick_stop=function(){_this.setState({reset:false,recordState:RecordState.STOP});};_this.onClick_reset=function(){_this.setState({reset:true,audioDataURL:'',recordState:RecordState.STOP});Streamlit.setComponentValue('');};_this.onClick_continue=function(){if(_this.state.audioDataURL!==''){// NOT WORKING THO: --> see python code notes\n// return a string to the blob content\nvar blob_url=String(_this.state.audioDataURL);//Streamlit.setComponentValue(blob_url.substring(5))\nStreamlit.setComponentValue(audioDataURL);//let filesManager = new FilesManager();\n//const temp_path = filesManager.createTempDirectory('temp-dir-name');\n//Streamlit.setComponentValue(String(temp_path))\n}};_this.onStop_audio=function(data){if(_this.state.reset===true){_this.setState({audioDataURL:''});Streamlit.setComponentValue('');}else{_this.sendAudioFile(data);_this.setState({audioDataURL:data});}};return _this;}return _createClass(StAudioRec);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/st_audiorec/frontend/src/StreamlitAudioRecorder.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","StAudioRec","state","isFocused","recordState","audioDataURL","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick_start","onClick_stop","onClick_reset","onStop_audio","onClick_continue","sendAudioFile","file","formData","FormData","append","fetch","method","body","setState","START","setComponentValue","STOP","blob_url","String","data","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\n\n\n//import { FilesManager } from 'turbodepot-node';\n\n\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataURL: string\n  reset: boolean\n}\n\nclass StAudioRec extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataURL: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            type='audio/wav'\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={100}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataURL}\n          />\n\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private sendAudioFile = file => {\n    const formData = new FormData();\n    formData.append('audio-file', file);\n    return fetch('http://localhost:3000/audioUpload', {\n      method: 'POST',\n      body: formData\n    });\n  };\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataURL: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataURL: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataURL !== '')\n    {\n      // NOT WORKING THO: --> see python code notes\n      // return a string to the blob content\n      var blob_url = String(this.state.audioDataURL)\n      //Streamlit.setComponentValue(blob_url.substring(5))\n      Streamlit.setComponentValue(audioDataURL)\n\n      //let filesManager = new FilesManager();\n      //const temp_path = filesManager.createTempDirectory('temp-dir-name');\n\n      //Streamlit.setComponentValue(String(temp_path))\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataURL: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n\n      this.sendAudioFile(data)\n\n      this.setState({\n        audioDataURL: data\n      })\n    }\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(StAudioRec)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}