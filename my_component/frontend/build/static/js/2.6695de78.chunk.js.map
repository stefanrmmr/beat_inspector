{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/react/index.js","../node_modules/prop-types/index.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../../src/event.mjs","../../src/event-target.mjs","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/AwaitValue.js","../node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js","../node_modules/@babel/runtime/helpers/esm/AsyncGenerator.js","../node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js","../node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate.js","../node_modules/flatbuffers/js/flatbuffers.mjs","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../util/utf8.ts","../io/interfaces.ts","../util/compat.ts","../util/buffer.ts","../io/adapters.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../vector.ts","../fb/Schema.ts","../fb/Message.ts","../enum.ts","../util/bit.ts","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../visitor.ts","../visitor/typecomparator.ts","../type.ts","../data.ts","../util/pretty.ts","../builder/valid.ts","../builder/buffer.ts","../builder.ts","../builder/bool.ts","../builder/null.ts","../builder/date.ts","../builder/decimal.ts","../builder/dictionary.ts","../builder/fixedsizebinary.ts","../util/math.ts","../builder/float.ts","../node_modules/@babel/runtime/helpers/esm/construct.js","../util/bn.ts","../builder/int.ts","../builder/time.ts","../builder/timestamp.ts","../builder/interval.ts","../builder/binary.ts","../builder/utf8.ts","../builder/run.ts","../vector/row.ts","../util/vector.ts","../vector/chunked.ts","../column.ts","../util/args.ts","../schema.ts","../builder/list.ts","../builder/fixedsizelist.ts","../builder/map.ts","../builder/struct.ts","../builder/union.ts","../visitor/set.ts","../fb/File.ts","../visitor/builderctor.ts","../builder/index.ts","../ipc/metadata/file.ts","../io/stream.ts","../io/file.ts","../util/int.ts","../visitor/vectorloader.ts","../visitor/typeassembler.ts","../ipc/metadata/json.ts","../ipc/metadata/message.ts","../ipc/message.ts","../visitor/vectorassembler.ts","../ipc/writer.ts","../util/recordbatch.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../vector/base.ts","../vector/binary.ts","../vector/bool.ts","../vector/date.ts","../vector/decimal.ts","../vector/dictionary.ts","../vector/fixedsizebinary.ts","../vector/fixedsizelist.ts","../vector/float.ts","../vector/interval.ts","../vector/int.ts","../vector/list.ts","../vector/map.ts","../vector/null.ts","../vector/struct.ts","../vector/timestamp.ts","../vector/time.ts","../vector/union.ts","../vector/utf8.ts","../util/fn.ts","../visitor/get.ts","../visitor/indexof.ts","../visitor/iterator.ts","../visitor/toarray.ts","../visitor/bytewidth.ts","../visitor/vectorctor.ts","../vector/index.ts","../table.ts","../recordbatch.ts","../ipc/reader.ts","../io/whatwg/builder.ts","../compute/predicate.ts","../compute/dataframe.ts","../Arrow.ts","../Arrow.dom.ts","../io/whatwg/iterable.ts","../io/whatwg/reader.ts","../io/whatwg/writer.ts","../node_modules/streamlit-component-lib/dist/ArrowTable.js","../node_modules/streamlit-component-lib/dist/streamlit.js","../node_modules/streamlit-component-lib/dist/StreamlitReact.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../../src/index.js","../node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js","../node_modules/react-is/index.js","../node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/object-assign/index.js","../node_modules/regenerator-runtime/runtime.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_inherits","subClass","superClass","create","constructor","value","_createSuper","Derived","result","Super","NewTarget","this","Reflect","construct","arguments","apply","module","exports","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","require","_assertThisInitialized","self","ReferenceError","_typeof","obj","Symbol","iterator","_possibleConstructorReturn","call","assertThisInitialized","privateData","WeakMap","wrappers","pd","event","retv","get","console","assert","setCancelFlag","data","passiveListener","cancelable","canceled","preventDefault","error","Event","eventTarget","set","eventPhase","currentTarget","stopped","immediateStopped","timeStamp","Date","now","keys","defineRedirectDescriptor","defineCallDescriptor","getWrapper","proto","wrapper","BaseEvent","CustomEvent","isFunc","getOwnPropertyDescriptor","defineWrapper","isStopped","setPassiveListener","type","composedPath","stopPropagation","stopImmediatePropagation","Boolean","bubbles","composed","cancelBubble","initEvent","window","listenersMap","isObject","x","getListeners","listeners","defineEventAttribute","eventTargetPrototype","eventName","node","listenerType","listener","next","prev","delete","newNode","passive","once","defineEventAttributeDescriptor","defineCustomEventTarget","eventNames","CustomEventTarget","EventTarget","Array","isArray","types","Map","addEventListener","options","optionsIsObj","capture","undefined","removeEventListener","dispatchEvent","wrappedEvent","wrapEvent","err","handleEvent","setEventPhase","setCurrentTarget","defaultPrevented","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","minLen","n","toString","slice","name","from","test","_createForOfIteratorHelper","F","s","done","e","_e","f","it","normalCompletion","didErr","step","_e2","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","Promise","then","_asyncToGenerator","fn","args","_slicedToArray","_arr","_n","_d","_s","_i","push","_AwaitValue","wrapped","_awaitAsyncGenerator","AsyncGenerator","front","back","resume","wrappedAwait","settle","_invoke","request","_wrapAsyncGenerator","_asyncGeneratorDelegate","inner","awaitWrap","iter","waiting","pump","asyncIterator","flatbuffers","inRange","a","min","max","ToDictionary","Offset","Table","SIZEOF_SHORT","SIZEOF_INT","FILE_IDENTIFIER_LENGTH","Encoding","UTF8_BYTES","UTF16_STRING","int32","Int32Array","float32","Float32Array","buffer","float64","Float64Array","isLittleEndian","Uint16Array","Uint8Array","Long","low","high","ZERO","toFloat64","equals","other","Builder","opt_initial_size","initial_size","bb","ByteBuffer","allocate","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","clear","capacity","forceDefaults","dataBuffer","asUint8Array","bytes","subarray","position","offset","prep","size","additional_bytes","align_size","old_buf_size","growByteBuffer","pad","byte_size","writeInt8","writeInt16","writeInt32","writeInt64","writeFloat32","writeFloat64","addInt8","addInt16","addInt32","addInt64","addFloat32","addFloat64","addFieldInt8","voffset","defaultValue","slot","addFieldInt16","addFieldInt32","addFieldInt64","addFieldFloat32","addFieldFloat64","addFieldOffset","addOffset","addFieldStruct","nested","Error","notNested","new_buf_size","nbb","setPosition","startObject","numfields","endObject","vtableloc","trimmed_size","existing_vtable","vt1","outer_loop","vt2","readInt16","j","finish","root_table","opt_file_identifier","file_identifier","charCodeAt","requiredField","table","field","table_start","vtable_start","readInt32","startVector","elem_size","num_elems","alignment","endVector","createString","utf8","codePoint","createLong","bytes_","position_","readInt8","readUint8","readUint16","readUint32","readInt64","readUint64","readFloat32","readFloat64","writeUint8","writeUint16","writeUint32","writeUint64","getBufferIdentifier","String","fromCharCode","__offset","bb_pos","vtable_offset","__union","t","__string","opt_encoding","b","c","__indirect","__vector","__vector_len","__has_identifier","ident","Stream","tokens","endOfStream","read","shift","prepend","token","unshift","pop","decoderError","fatal","opt_code_point","TextDecoder","encoding","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","TextEncoder","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","handler","stream","bite","code_point","UTF8Encoder","count","temp","decode","input","ArrayBuffer","byteOffset","byteLength","input_stream","code_points","indexOf","cp","codePointsToString","encode","opt_string","string","u","d","stringToCodePoints","_Buffer","Buffer","useNativeEncoders","decodeUtf8","decoder","toUint8Array","TextDecoderPolyfill","encodeUtf8","encoder","TextEncoderPolyfill","ITERATOR_DONE","freeze","ArrowJSON","_json","ReadableInterop","_getDOMStream","tee","_getNodeStream","pipe","pipeTo","duplex","pipeThrough","_DOMStream","toDOMStream","_nodeStream","toNodeStream","AsyncQueue","_values","resolvers","_closedPromise","r","_closedPromiseResolve","reason","return","_ensureOpen","_error","streamAdapters","_","abort","close","BigIntUnavailableError","BigIntUnavailable","asIntN","asUintN","BigInt","BigIntCtor","BigIntAvailable","BigInt64ArrayUnavailableError","BigInt64Array","BigInt64ArrayCtor","BigUint64ArrayUnavailableError","BigUint64Array","BigUint64ArrayCtor","isNumber","isBoolean","isFunction","isPromise","isIterable","isAsyncIterable","isArrowJSON","isIteratorResult","isFileHandle","isFetchResponse","isReadableDOMStream","isWritableDOMStream","isWritableNodeStream","isReadableNodeStream","toArrayBufferViewIterator","SharedArrayBuf","SharedArrayBuffer","memcpy","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","joinUint8Arrays","chunks","sliced","xOffset","yOffset","xLen","yLen","y","collapseContiguousByteRanges","reduce","index","Infinity","toArrayBufferView","ArrayBufferViewCtor","isView","BYTES_PER_ELEMENT","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toBigInt64Array","toUint16Array","toUint32Array","Uint32Array","toBigUint64Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","ArrayCtor","wrap","buffers","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toArrayBufferViewAsyncIterator","emit","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","compareArrayLike","fromIterable","fromAsyncIterable","fromDOMStream","fromNodeStream","byteRange","cmd","bufferLength","threw","isNaN","throw","AdaptiveByteReader","releaseLock","byobReader","defaultReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","readFromBYOBReader","mode","readInto","onEvent","cleanup","events","evt","destroy","race","map","isFinite","_defineProperty","object","enumerableOnly","getOwnPropertySymbols","symbols","filter","sym","_objectSpread2","forEach","getOwnPropertyDescriptors","defineProperties","property","receiver","base","hasOwnProperty","desc","org","flatbuf","arrow","apache","AbstractVector","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","Endianness","Null","__init","builder","startNull","endNull","Struct_","startStruct_","endStruct_","List","startList","endList","LargeList","startLargeList","endLargeList","FixedSizeList","listSize","startFixedSizeList","addListSize","endFixedSizeList","keysSorted","startMap","addKeysSorted","endMap","Union","Sparse","typeIdsOffset","numElems","startUnion","addMode","addTypeIds","endUnion","Int","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","HALF","precision","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","startUtf8","endUtf8","Binary","startBinary","endBinary","LargeUtf8","startLargeUtf8","endLargeUtf8","LargeBinary","startLargeBinary","endLargeBinary","FixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","startBool","endBool","Decimal","scale","startDecimal","addScale","endDecimal","MILLISECOND","unit","startDate","addUnit","endDate","Time","startTime","endTime","Timestamp","SECOND","optionalEncoding","timezoneOffset","startTimestamp","addTimezone","endTimestamp","Interval","YEAR_MONTH","startInterval","endInterval","Duration","startDuration","endDuration","KeyValue","keyOffset","valueOffset","startKeyValue","addKey","addValue","endKeyValue","DictionaryEncoding","id","indexTypeOffset","isOrdered","startDictionaryEncoding","addId","addIndexType","addIsOrdered","endDictionaryEncoding","Field","NONE","nameOffset","nullable","typeType","typeOffset","dictionaryOffset","childrenOffset","customMetadataOffset","startField","addName","addNullable","addTypeType","addType","addDictionary","addChildren","addCustomMetadata","endField","Schema","Little","endianness","fieldsOffset","startSchema","addEndianness","addFields","endSchema","NS7624605610262437867","MessageHeader","FieldNode","null_count","RecordBatch","nodesOffset","buffersOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","DictionaryBatch","dataOffset","isDelta","startDictionaryBatch","addData","addIsDelta","endDictionaryBatch","Message","V1","version","headerType","headerOffset","bodyLength","startMessage","addVersion","addHeaderType","addHeader","addBodyLength","endMessage","Schema_","BufferType","Message_","iterateBits","getBool","_data","_index","byte","bit","getBit","setBool","truncateBitmap","bitmap","alignedSize","packBools","values","xs","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","_toConsumableArray","Visitor","nodes","visit","getVisitFn","throwIfNotFound","_node","visitor","dtype","Data","Vector","inferDType","DataType","visitNull","visitBool","visitInt","Int8","visitInt8","Int16","visitInt16","Int32","visitInt32","Int64","visitInt64","Uint8","visitUint8","Uint16","visitUint16","Uint32","visitUint32","Uint64","visitUint64","Float","visitFloat","Float16","visitFloat16","Float32","visitFloat32","Float64","visitFloat64","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","DateDay","visitDateDay","DateMillisecond","visitDateMillisecond","visitTimestamp","TimestampSecond","visitTimestampSecond","TimestampMillisecond","visitTimestampMillisecond","TimestampMicrosecond","visitTimestampMicrosecond","TimestampNanosecond","visitTimestampNanosecond","visitTime","TimeSecond","visitTimeSecond","TimeMillisecond","visitTimeMillisecond","TimeMicrosecond","visitTimeMicrosecond","TimeNanosecond","visitTimeNanosecond","visitDecimal","visitList","Struct","visitStruct","visitUnion","DenseUnion","visitDenseUnion","SparseUnion","visitSparseUnion","Dictionary","visitDictionary","visitInterval","IntervalDayTime","visitIntervalDayTime","IntervalYearMonth","visitIntervalYearMonth","visitFixedSizeList","visitMap","typeId","SINGLE","DOUBLE","MICROSECOND","NANOSECOND","DAY","DAY_TIME","Dense","TypeComparator","schema","compareFields","fields","others","every","compareField","compareConstructor","compareAny","compareInt","compareFloat","compareDate","compareTimestamp","timezone","compareTime","compareUnion","typeIds","children","compareInterval","indices","dictionary","comparer","toStringTag","ArrayType","Int_","Date_","Time_","Timestamp_","Interval_","child","valueType","join","Union_","typeIdToChildIndex","idx","Map_","atomicDictionaryId","getId","strideForType","nullCount","childData","floor","_nullCount","stride","nullBitmap","childStride","_sliceBuffers","clone","_sliceChildren","newLength","fill","VALIDITY","TYPE","OFFSET","DATA","valueOffsetsOrChildren","valueToString","toPrimitive","JSON","stringify","createIsValidFunction","nullValues","fnBody","noNaNs","valueToCase","Function","roundLengthUpToNearest64Bytes","BPE","sliceOrExtendArray","BufferBuilder","_resize","extra","reserved","array","DataBufferBuilder","reserve","BitmapBufferBuilder","numValid","val","cur","OffsetsBufferBuilder","WideBufferBuilder","_ArrayType64","buffer64","ArrayType64","nulls","finished","_nulls","_isValid","new","flush","numInvalid","_offsets","_typeIds","reservedLength","reservedByteLength","setValid","isValid","setValue","_setValue","valid","numChildren","offsets","last","queueingStrategy","highWaterMark","sizeProperty","numChunks","append","toVector","throughIterable","throughAsyncIterable","FixedWidthBuilder","opts","VariableWidthBuilder","_pendingLength","pending","_pending","current","_flush","pendingLength","_flushPending","BoolBuilder","NullBuilder","DateBuilder","DateDayBuilder","DateMillisecondBuilder","DecimalBuilder","DictionaryBuilder","hashFn","_dictionaryOffset","_keysToIndices","valueToKey","keysToIndices","_dictionary","curr","concat","FixedSizeBinaryBuilder","f64","u32","uint16ToFloat64","h","expo","sigf","sign","NaN","float64ToUint16","FloatBuilder","Float16Builder","Float32Builder","Float64Builder","Parent","Class","isNativeReflectConstruct","bind","bignumToString","bignumToBigInt","isArrowBigNumSymbol","for","BigNum","SignedBigNum","UnsignedBigNum","DecimalBigNum","bignumToNumber","bn","hi","lo","signed","words","number","decimalToString","digits","base64","base32","checks","reverse","toJSON","valueOf","hint","assign","memo","BN","num","IntBuilder","Int8Builder","Int16Builder","Int32Builder","Int64Builder","toBigInt","Uint8Builder","Uint16Builder","Uint32Builder","Uint64Builder","TimeBuilder","TimeSecondBuilder","TimeMillisecondBuilder","TimeMicrosecondBuilder","TimeNanosecondBuilder","TimestampBuilder","TimestampSecondBuilder","TimestampMillisecondBuilder","TimestampMicrosecondBuilder","TimestampNanosecondBuilder","IntervalBuilder","IntervalDayTimeBuilder","IntervalYearMonthBuilder","BinaryBuilder","Utf8Builder","Run","kParent","kRowIndex","kKeyToIdx","kIdxToVal","kCustomInspect","Row","parent","numKeys","ktoi","itov","getValue","getIndex","ki","vi","kr","vr","k","v","has","callbackfn","thisArg","callback","m","str","MapRow","createRowProxy","getChildAt","StructRow","defineRowProxyProperties","findIndex","tmp","row","getter","setter","Proxy","getKey","RowProxyHandler","isExtensible","deleteProperty","preventExtensions","ownKeys","clampIndex","adjust","clampRange","end","big0","isNaNFast","createElementComparator","search","typeofSearch","valueOfSearch","comparators","createSubElementsComparator","creatMapComparator","createArrayLikeComparator","createVectorComparator","createObjectComparator","compareArray","compareObject","vec","compareVector","lKeyItr","rKeyItr","rValItr","rVal","lKey","rKey","Chunked","calculateOffsets","_type","_chunks","_chunkOffsets","_length","_numChildren","chunk","isDictionary","_indices","flatten","_sliceInternal","columns","_children","vector","mid","isValidInternal","getInternal","element","indexOfInternal","toArray","arraySet","typedSet","chunkIndex","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","to","vectors","selectChunkArgs","Column","_field","SingleChunkColumn","metadata","column","rest","some","_chunk","selectArgs","Ctor","vals","_selectArgs","selectColumnArgs","_selectFieldArgs","selectFieldArgs","_selectChunkArgs","res","selectVectorChildrenArgs","_selectVectorChildrenArgs","toKeysAndValues","ret","entries","fieldIndex","valueIndex","dictionaries","generateDictionaryMap","compareSchemas","columnNames","names","columnIndices","curFields","mergeMaps","newFields","f2","newDictionaries","m1","m2","ListBuilder","_run","run","FixedSizeListBuilder","childIndex","MapBuilder","StructBuilder","UnionBuilder","_valueToChildTypeId","childTypeId","SparseUnionBuilder","DenseUnionBuilder","SetVisitor","setEpochMsToMillisecondsLong","epochMs","setVariableWidthBytes","setDateDay","setEpochMsToDays","setDateMillisecond","setNumeric","setFloat16","setNumericX2","values64","long","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setEpochMsToMicrosecondsLong","setTimestampNanosecond","setEpochMsToNanosecondsLong","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","itr","_setStructVectorValue","_setStructArrayValue","_setStructObjectValue","newBuilder","getBuilderConstructor","defaultOptions","getChildOptions","T","setVisitor","Footer","Block","schemaOffset","dictionariesOffset","recordBatchesOffset","startFooter","addSchema","addDictionaries","addRecordBatches","endFooter","metaDataLength","_Block","File_","_Footer","Footer_","V4","recordBatches","dictionaryBatches","_recordBatches","_dictionaryBatches","numRecordBatches","block","getRecordBatch","numDictionaries","getDictionaryBatch","buf","footer","getRootAsFooter","OffHeapFooter","startRecordBatchesVector","rb","FileBlock","startDictionariesVector","db","dictionaryBatchesOffset","finishFooterBuffer","_footer","recordBatchesLength","dictionariesLength","fileBlock","createBlock","AsyncByteQueue","sync","ByteStream","ByteStreamSource","peek","AsyncByteStream","AsyncByteStreamSource","body","closed","cancel","RandomAccessFile","readAt","getInt32","nBytes","AsyncRandomAccessFile","file","_handle","stat","bytesRead","intAsHex","kPowersOfTen","BaseInt64","L","R","product","lessThan","_times","_plus","out_buffer","fromString","out","posn","group","parseInt","substr","multiple","times","plus","left","right","this_high","other_high","negate","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","multiply","sums","VectorLoader","nodesIndex","buffersIndex","nextFieldNode","readNullBitmap","readData","readOffsets","visitMany","readTypeIds","readDictionary","nextBufferRange","JSONVectorLoader","sources","isTimestamp","isInt","isTime","isDate","convertArray","isDecimal","isBinary","isFixedSizeBinary","binaryDataFromJSON","isBool","isUtf8","joined","startTypeIdsVector","createTypeIdsVector","indexType","recordBatchFromJSON","fieldNodesFromJSON","fieldNodes","validity","buffersFromJSON","BufferRegion","schemaFieldsFromJSON","_schema","fromJSON","fieldChildrenFromJSON","customMetadataFromJSON","_metadata","indexTypeFromJSON","typeFromJSON","_Field","_Schema","_Message","_KeyValue","_FieldNode","_Endianness","_RecordBatch","_DictionaryBatch","header","_version","_headerType","_createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","getRootAsMessage","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","finishMessageBuffer","_nodes","_buffers","_isDelta","_id","decodeFieldNodes","batch","nodesLength","decodeBuffers","bufferRegions","buffersLength","decodeSchemaFields","fieldsLength","decodeFieldChildren","childrenLength","decodeCustomMetadata","entry","customMetadataLength","customMetadata","decodeIndexType","decodeFieldType","typeIdsArray","typeAssembler","childOffsets","childrenVectorOffset","createChildrenVector","metadataOffset","createCustomMetadataVector","dictType","dictMeta","fieldOffsets","startFieldsVector","fieldsVectorOffset","createFieldsVector","platformIsLittleEndian","Big","recordBatch","startNodesVector","nodesVectorOffset","startBuffersVector","b_","buffersVectorOffset","dictionaryBatch","createFieldNode","createBuffer","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","readMetadataLength","readMetadata","throwIfNull","readMessage","PADDING","metadataLength","AsyncMessageReader","JSONMessageReader","_body","_batchIndex","_dictionaryIndex","batches","flattenDataSources","MAGIC","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","VectorAssembler","_byteLength","_bufferRegions","RangeError","isNull","addBuffer","_nullV","assembler","vectorChildren","assembleResult","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","childLength","RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_dictionaryDeltaOffsets","autoDestroy","writeLegacyIpcFormat","_autoDestroy","_writeLegacyIpcFormat","writeAll","writeAllAsync","reset","sink","objectMode","_writeFooter","compareTo","_writeSchema","payload","_InternalEmptyPlaceholderRecordBatch","_writeRecordBatch","flatbufferSize","prefixSize","nPaddingBytes","_write","of","_writePadding","write","_writeMessage","assemble","_writeDictionaries","_writeBodyBuffers","padding","_writeDictionaryBatch","writableStrategy","readableStrategy","RecordBatchStreamWriter","writer","RecordBatchFileWriter","_writeMagic","noopBuf","nullBufs","bitmapLength","ensureSameLengthData","batchLength","l","batchData","_changeLengthAndBackfillNullBitmap","distributeColumnsIntoRecordBatches","distributeVectorsIntoRecordBatches","vecs","batchArgs","numBatches","numColumns","Number","POSITIVE_INFINITY","distributeChildData","uniformlyDistributeChunksAcrossRecordBatches","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","propertyIsEnumerable","BaseVector","_bindDataAccessors","VectorName","isConcatSpreadable","BinaryVector","BoolVector","vectorFromValuesWithType","DateVector","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","ArrowType","vectorTypeToDataType","InputType","arrayTypeToDataType","convertTo16Bit","Float16Vector","Float32Vector","Float64Vector","typeCtor","dataCtor","ctor","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","is64bit","convert32To64Bit","Int8Vector","Int16Vector","Int32Vector","Int64Vector","_values64","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","NullVector","StructVector","_row","bound","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","Utf8Vector","partial0","partial2","GetVisitor","epochMillisecondsLongToMs","epochMillisecondsToDate","getVariableWidthBytes","getDateDay","epochDaysToMs","epochDaysToDate","getDateMillisecond","epochMillisecondsLongToDate","getNumeric","getFloat16","getBigInts","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","epochMicrosecondsLongToMs","getTimestampNanosecond","epochNanosecondsLongToMs","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","_vector","decimal","IndexOfVisitor","indexOfValue","searchElement","indexOfNull","compare","indexOfUnion","IteratorVisitor","vectorIterator","getFn","getVisitor","nullByte","nullBit","nullableIterator","ToArrayVisitor","arrayOfVector","iteratorVisitor","variableWidthColumnErrorMessage","____","visitFields","newDataType","getVectorConstructor","transform","indexOfVisitor","toArrayVisitor","getByteWidth","byteWidthVisitor","wrapNullableSet","VectorCtor","partialType0","getColumnAt","getColumnIndex","Writer","nameToIndex","selectAt","columnName","newIdx","oldToNew","_f","_fs","empty","fromStruct","tableFromIterable","tableFromAsyncIterable","RecordBatchReader","isSync","open","opening","cols","_dictionaries","DictionaryCollector","collect","fs","vs","readAllSync","impl","_impl","isFile","isAsync","isStream","readRecordBatch","RecordBatchStreamReader","RecordBatchJSONReaderImpl","fromArrowJSON","fromFileHandle","fromAsyncByteStream","RecordBatchFileReader","RecordBatchFileReaderImpl","RecordBatchStreamReaderImpl","fromByteStream","readAllAsync","AsyncRecordBatchStreamReader","AsyncRecordBatchFileReader","RecordBatchReaderImpl","_recordBatchIndex","_loadVectors","_reader","shouldAutoDestroy","readSchema","_readNextMessageAndValidate","readMessageBody","_loadRecordBatch","_loadDictionaryBatch","AsyncRecordBatchStreamReaderImpl","_readFooter","_readDictionaryBatch","seek","AsyncRecordBatchFileReaderImpl","BuilderTransform","_numChunks","_finished","_bufferedSize","builderOptions","_controller","_builder","_getSize","chunkByteLength","readableHighWaterMark","writableHighWaterMark","ReadableStream","_maybeFlush","WritableStream","_writeValueAndReturnChunkSize","bufferedSize","controller","desiredSize","_enqueue","enqueue","Value","Literal","Equals","LTeq","GTeq","Not","ge","le","eq","Col","colidx","Predicate","expr","And","Or","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","p","_batch","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","reverseLookup","lastKey","func","countBy","DataFrame","scan","scanReverse","predicate","FilteredDataFrame","batchIndex","numRows","count_by","countByteLength","ceil","log","counts","CountByResult","_predicate","isBound","and","util_bn_","util_int_","util_bit_","util_math_","util_buffer_","util_vector_","bm","hwm","pull","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","queue","readable","ComponentMessageType","ArrowTable","indexBuffer","columnsBuffer","styler","_this","getCell","rowIndex","columnIndex","isBlankCell","headerRows","headerColumns","isIndexCell","isColumnsCell","classNames","content","dataColumnIndex","getContent","columnsTable","dataRowIndex","uuid","indexTable","displayValuesTable","dataTable","getColumnTypeId","nanosToDate","caption","displayValues","styles","numCols","rows","dataRows","dataColumns","serialize","nanos","__assign","Streamlit","API_VERSION","RENDER_EVENT","registeredMessageListener","setComponentReady","onMessageEvent","sendBackMsg","COMPONENT_READY","apiVersion","setFrameHeight","height","document","scrollHeight","lastFrameHeight","SET_FRAME_HEIGHT","setComponentValue","dataType","isBigIntArray","isTypedArray","SET_COMPONENT_VALUE","onRenderMessage","dataframeArgs","argsDataframeToObject","disabled","theme","_injectTheme","eventData","detail","argsDataframe","argsDataframeArrow","_a","toArrowTable","fromEntries","df","postMessage","isStreamlitMessage","style","createElement","head","appendChild","innerHTML","primaryColor","backgroundColor","secondaryBackgroundColor","textColor","font","__extends","extendStatics","__","_super","StreamlitComponentBase","componentDidMount","componentDidUpdate","React","PureComponent","_setPrototypeOf","_isNativeReflectConstruct","sham","RecordState","START","PAUSE","STOP","AudioReactRecorder","init","leftchannel","rightchannel","recorder","recording","recordingLength","volume","audioInput","sampleRate","AudioContext","webkitAudioContext","analyser","canvas","canvasRef","canvasCtx","getContext","tested","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","getStream","constraints","audio","video","mediaDevices","setUpRecording","createGain","createMediaStreamSource","createAnalyser","connect","createScriptProcessor","destination","onaudioprocess","inputBuffer","getChannelData","stop","getTracks","track","visualize","mergeBuffers","channelBuffer","lng","interleave","leftChannel","rightChannel","inputIndex","writeUTFBytes","setUint8","foregroundColor","WIDTH","width","HEIGHT","CENTERX","CENTERY","fftSize","dataArray","clearRect","draw","drawVisual","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","moveTo","lineTo","stroke","setupMic","recover","onStop","closeMic","leftBuffer","rightBuffer","interleaved","setUint32","setUint16","blob","Blob","audioUrl","URL","createObjectURL","url","pause","getAudioTracks","disconnect","createRef","prevProps","prevState","state","checkState","previousState","doIfState","cb","componentWillUnmount","render","canvasWidth","canvasHeight","className","ref","Component","propTypes","PropTypes","isRequired","oneOfType","defaultProps","reactIs","REACT_STATICS","childContextTypes","contextType","contextTypes","displayName","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","KNOWN_STATICS","caller","callee","arity","MEMO_STATICS","TYPE_STATICS","getStatics","component","isMemo","ForwardRef","Memo","getOwnPropertyNames","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","blacklist","inheritedComponent","targetStatics","sourceStatics","g","q","w","z","$$typeof","A","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","Fragment","Lazy","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","B","C","encodeURIComponent","D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","E","refs","updater","G","H","isReactComponent","setState","forceUpdate","I","isPureReactComponent","J","K","__self","__source","M","_owner","O","P","Q","keyPrefix","S","V","U","replace","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","Children","only","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","createContext","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Provider","Consumer","_context","createFactory","forwardRef","isValidElement","lazy","_ctor","_status","_result","useCallback","useContext","useDebugValue","useEffect","useImperativeHandle","useLayoutEffect","useMemo","useReducer","useRef","useState","propIsEnumerable","toObject","test1","test2","test3","split","letter","shouldUseNative","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","toStringTagSymbol","define","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","Context","method","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","__await","unwrapped","resultName","nextLoc","pushTryEntry","locs","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","iterable","iteratorMethod","isGeneratorFunction","genFun","mark","awrap","async","skipTempReset","charAt","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","ReactPropTypesSecret","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","propName","componentName","location","propFullName","secret","getShim","ReactPropTypes","bigint","bool","symbol","any","arrayOf","elementType","instanceOf","objectOf","oneOf","shape","exact","checkPropTypes"],"mappings":"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","file":"static/js/2.6695de78.chunk.js","sourcesContent":["export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn\";\nexport default function _createSuper(Derived) {\n  return function () {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (isNativeReflectConstruct()) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","module.exports = require(\"regenerator-runtime\");\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","/**\n * @typedef {object} PrivateData\n * @property {EventTarget} eventTarget The event target.\n * @property {{type:string}} event The original event object.\n * @property {number} eventPhase The current event phase.\n * @property {EventTarget|null} currentTarget The current event target.\n * @property {boolean} canceled The flag to prevent default.\n * @property {boolean} stopped The flag to stop propagation.\n * @property {boolean} immediateStopped The flag to stop propagation immediately.\n * @property {Function|null} passiveListener The listener if the current listener is passive. Otherwise this is null.\n * @property {number} timeStamp The unix time.\n * @private\n */\n\n/**\n * Private data for event wrappers.\n * @type {WeakMap<Event, PrivateData>}\n * @private\n */\nconst privateData = new WeakMap()\n\n/**\n * Cache for wrapper classes.\n * @type {WeakMap<Object, Function>}\n * @private\n */\nconst wrappers = new WeakMap()\n\n/**\n * Get private data.\n * @param {Event} event The event object to get private data.\n * @returns {PrivateData} The private data of the event.\n * @private\n */\nfunction pd(event) {\n    const retv = privateData.get(event)\n    console.assert(\n        retv != null,\n        \"'this' is expected an Event object, but got\",\n        event\n    )\n    return retv\n}\n\n/**\n * https://dom.spec.whatwg.org/#set-the-canceled-flag\n * @param data {PrivateData} private data.\n */\nfunction setCancelFlag(data) {\n    if (data.passiveListener != null) {\n        if (\n            typeof console !== \"undefined\" &&\n            typeof console.error === \"function\"\n        ) {\n            console.error(\n                \"Unable to preventDefault inside passive event listener invocation.\",\n                data.passiveListener\n            )\n        }\n        return\n    }\n    if (!data.event.cancelable) {\n        return\n    }\n\n    data.canceled = true\n    if (typeof data.event.preventDefault === \"function\") {\n        data.event.preventDefault()\n    }\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#interface-event\n * @private\n */\n/**\n * The event wrapper.\n * @constructor\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Event|{type:string}} event The original event to wrap.\n */\nfunction Event(eventTarget, event) {\n    privateData.set(this, {\n        eventTarget,\n        event,\n        eventPhase: 2,\n        currentTarget: eventTarget,\n        canceled: false,\n        stopped: false,\n        immediateStopped: false,\n        passiveListener: null,\n        timeStamp: event.timeStamp || Date.now(),\n    })\n\n    // https://heycam.github.io/webidl/#Unforgeable\n    Object.defineProperty(this, \"isTrusted\", { value: false, enumerable: true })\n\n    // Define accessors\n    const keys = Object.keys(event)\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in this)) {\n            Object.defineProperty(this, key, defineRedirectDescriptor(key))\n        }\n    }\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEvent.prototype = {\n    /**\n     * The type of this event.\n     * @type {string}\n     */\n    get type() {\n        return pd(this).event.type\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get target() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     */\n    get currentTarget() {\n        return pd(this).currentTarget\n    },\n\n    /**\n     * @returns {EventTarget[]} The composed path of this event.\n     */\n    composedPath() {\n        const currentTarget = pd(this).currentTarget\n        if (currentTarget == null) {\n            return []\n        }\n        return [currentTarget]\n    },\n\n    /**\n     * Constant of NONE.\n     * @type {number}\n     */\n    get NONE() {\n        return 0\n    },\n\n    /**\n     * Constant of CAPTURING_PHASE.\n     * @type {number}\n     */\n    get CAPTURING_PHASE() {\n        return 1\n    },\n\n    /**\n     * Constant of AT_TARGET.\n     * @type {number}\n     */\n    get AT_TARGET() {\n        return 2\n    },\n\n    /**\n     * Constant of BUBBLING_PHASE.\n     * @type {number}\n     */\n    get BUBBLING_PHASE() {\n        return 3\n    },\n\n    /**\n     * The target of this event.\n     * @type {number}\n     */\n    get eventPhase() {\n        return pd(this).eventPhase\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopPropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.stopPropagation === \"function\") {\n            data.event.stopPropagation()\n        }\n    },\n\n    /**\n     * Stop event bubbling.\n     * @returns {void}\n     */\n    stopImmediatePropagation() {\n        const data = pd(this)\n\n        data.stopped = true\n        data.immediateStopped = true\n        if (typeof data.event.stopImmediatePropagation === \"function\") {\n            data.event.stopImmediatePropagation()\n        }\n    },\n\n    /**\n     * The flag to be bubbling.\n     * @type {boolean}\n     */\n    get bubbles() {\n        return Boolean(pd(this).event.bubbles)\n    },\n\n    /**\n     * The flag to be cancelable.\n     * @type {boolean}\n     */\n    get cancelable() {\n        return Boolean(pd(this).event.cancelable)\n    },\n\n    /**\n     * Cancel this event.\n     * @returns {void}\n     */\n    preventDefault() {\n        setCancelFlag(pd(this))\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     */\n    get defaultPrevented() {\n        return pd(this).canceled\n    },\n\n    /**\n     * The flag to be composed.\n     * @type {boolean}\n     */\n    get composed() {\n        return Boolean(pd(this).event.composed)\n    },\n\n    /**\n     * The unix time of this event.\n     * @type {number}\n     */\n    get timeStamp() {\n        return pd(this).timeStamp\n    },\n\n    /**\n     * The target of this event.\n     * @type {EventTarget}\n     * @deprecated\n     */\n    get srcElement() {\n        return pd(this).eventTarget\n    },\n\n    /**\n     * The flag to stop event bubbling.\n     * @type {boolean}\n     * @deprecated\n     */\n    get cancelBubble() {\n        return pd(this).stopped\n    },\n    set cancelBubble(value) {\n        if (!value) {\n            return\n        }\n        const data = pd(this)\n\n        data.stopped = true\n        if (typeof data.event.cancelBubble === \"boolean\") {\n            data.event.cancelBubble = true\n        }\n    },\n\n    /**\n     * The flag to indicate cancellation state.\n     * @type {boolean}\n     * @deprecated\n     */\n    get returnValue() {\n        return !pd(this).canceled\n    },\n    set returnValue(value) {\n        if (!value) {\n            setCancelFlag(pd(this))\n        }\n    },\n\n    /**\n     * Initialize this event object. But do nothing under event dispatching.\n     * @param {string} type The event type.\n     * @param {boolean} [bubbles=false] The flag to be possible to bubble up.\n     * @param {boolean} [cancelable=false] The flag to be possible to cancel.\n     * @deprecated\n     */\n    initEvent() {\n        // Do nothing.\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(Event.prototype, \"constructor\", {\n    value: Event,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `event instanceof window.Event` is `true`.\nif (typeof window !== \"undefined\" && typeof window.Event !== \"undefined\") {\n    Object.setPrototypeOf(Event.prototype, window.Event.prototype)\n\n    // Make association for wrappers.\n    wrappers.set(window.Event.prototype, Event)\n}\n\n/**\n * Get the property descriptor to redirect a given property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to redirect the property.\n * @private\n */\nfunction defineRedirectDescriptor(key) {\n    return {\n        get() {\n            return pd(this).event[key]\n        },\n        set(value) {\n            pd(this).event[key] = value\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Get the property descriptor to call a given method property.\n * @param {string} key Property name to define property descriptor.\n * @returns {PropertyDescriptor} The property descriptor to call the method property.\n * @private\n */\nfunction defineCallDescriptor(key) {\n    return {\n        value() {\n            const event = pd(this).event\n            return event[key].apply(event, arguments)\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define new wrapper class.\n * @param {Function} BaseEvent The base wrapper class.\n * @param {Object} proto The prototype of the original event.\n * @returns {Function} The defined wrapper class.\n * @private\n */\nfunction defineWrapper(BaseEvent, proto) {\n    const keys = Object.keys(proto)\n    if (keys.length === 0) {\n        return BaseEvent\n    }\n\n    /** CustomEvent */\n    function CustomEvent(eventTarget, event) {\n        BaseEvent.call(this, eventTarget, event)\n    }\n\n    CustomEvent.prototype = Object.create(BaseEvent.prototype, {\n        constructor: { value: CustomEvent, configurable: true, writable: true },\n    })\n\n    // Define accessors.\n    for (let i = 0; i < keys.length; ++i) {\n        const key = keys[i]\n        if (!(key in BaseEvent.prototype)) {\n            const descriptor = Object.getOwnPropertyDescriptor(proto, key)\n            const isFunc = typeof descriptor.value === \"function\"\n            Object.defineProperty(\n                CustomEvent.prototype,\n                key,\n                isFunc\n                    ? defineCallDescriptor(key)\n                    : defineRedirectDescriptor(key)\n            )\n        }\n    }\n\n    return CustomEvent\n}\n\n/**\n * Get the wrapper class of a given prototype.\n * @param {Object} proto The prototype of the original event to get its wrapper.\n * @returns {Function} The wrapper class.\n * @private\n */\nfunction getWrapper(proto) {\n    if (proto == null || proto === Object.prototype) {\n        return Event\n    }\n\n    let wrapper = wrappers.get(proto)\n    if (wrapper == null) {\n        wrapper = defineWrapper(getWrapper(Object.getPrototypeOf(proto)), proto)\n        wrappers.set(proto, wrapper)\n    }\n    return wrapper\n}\n\n/**\n * Wrap a given event to management a dispatching.\n * @param {EventTarget} eventTarget The event target of this dispatching.\n * @param {Object} event The event to wrap.\n * @returns {Event} The wrapper instance.\n * @private\n */\nexport function wrapEvent(eventTarget, event) {\n    const Wrapper = getWrapper(Object.getPrototypeOf(event))\n    return new Wrapper(eventTarget, event)\n}\n\n/**\n * Get the immediateStopped flag of a given event.\n * @param {Event} event The event to get.\n * @returns {boolean} The flag to stop propagation immediately.\n * @private\n */\nexport function isStopped(event) {\n    return pd(event).immediateStopped\n}\n\n/**\n * Set the current event phase of a given event.\n * @param {Event} event The event to set current target.\n * @param {number} eventPhase New event phase.\n * @returns {void}\n * @private\n */\nexport function setEventPhase(event, eventPhase) {\n    pd(event).eventPhase = eventPhase\n}\n\n/**\n * Set the current target of a given event.\n * @param {Event} event The event to set current target.\n * @param {EventTarget|null} currentTarget New current target.\n * @returns {void}\n * @private\n */\nexport function setCurrentTarget(event, currentTarget) {\n    pd(event).currentTarget = currentTarget\n}\n\n/**\n * Set a passive listener of a given event.\n * @param {Event} event The event to set current target.\n * @param {Function|null} passiveListener New passive listener.\n * @returns {void}\n * @private\n */\nexport function setPassiveListener(event, passiveListener) {\n    pd(event).passiveListener = passiveListener\n}\n","import {\n    isStopped,\n    setCurrentTarget,\n    setEventPhase,\n    setPassiveListener,\n    wrapEvent,\n} from \"./event.mjs\"\n\n/**\n * @typedef {object} ListenerNode\n * @property {Function} listener\n * @property {1|2|3} listenerType\n * @property {boolean} passive\n * @property {boolean} once\n * @property {ListenerNode|null} next\n * @private\n */\n\n/**\n * @type {WeakMap<object, Map<string, ListenerNode>>}\n * @private\n */\nconst listenersMap = new WeakMap()\n\n// Listener types\nconst CAPTURE = 1\nconst BUBBLE = 2\nconst ATTRIBUTE = 3\n\n/**\n * Check whether a given value is an object or not.\n * @param {any} x The value to check.\n * @returns {boolean} `true` if the value is an object.\n */\nfunction isObject(x) {\n    return x !== null && typeof x === \"object\" //eslint-disable-line no-restricted-syntax\n}\n\n/**\n * Get listeners.\n * @param {EventTarget} eventTarget The event target to get.\n * @returns {Map<string, ListenerNode>} The listeners.\n * @private\n */\nfunction getListeners(eventTarget) {\n    const listeners = listenersMap.get(eventTarget)\n    if (listeners == null) {\n        throw new TypeError(\n            \"'this' is expected an EventTarget object, but got another value.\"\n        )\n    }\n    return listeners\n}\n\n/**\n * Get the property descriptor for the event attribute of a given event.\n * @param {string} eventName The event name to get property descriptor.\n * @returns {PropertyDescriptor} The property descriptor.\n * @private\n */\nfunction defineEventAttributeDescriptor(eventName) {\n    return {\n        get() {\n            const listeners = getListeners(this)\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    return node.listener\n                }\n                node = node.next\n            }\n            return null\n        },\n\n        set(listener) {\n            if (typeof listener !== \"function\" && !isObject(listener)) {\n                listener = null // eslint-disable-line no-param-reassign\n            }\n            const listeners = getListeners(this)\n\n            // Traverse to the tail while removing old value.\n            let prev = null\n            let node = listeners.get(eventName)\n            while (node != null) {\n                if (node.listenerType === ATTRIBUTE) {\n                    // Remove old value.\n                    if (prev !== null) {\n                        prev.next = node.next\n                    } else if (node.next !== null) {\n                        listeners.set(eventName, node.next)\n                    } else {\n                        listeners.delete(eventName)\n                    }\n                } else {\n                    prev = node\n                }\n\n                node = node.next\n            }\n\n            // Add new value.\n            if (listener !== null) {\n                const newNode = {\n                    listener,\n                    listenerType: ATTRIBUTE,\n                    passive: false,\n                    once: false,\n                    next: null,\n                }\n                if (prev === null) {\n                    listeners.set(eventName, newNode)\n                } else {\n                    prev.next = newNode\n                }\n            }\n        },\n        configurable: true,\n        enumerable: true,\n    }\n}\n\n/**\n * Define an event attribute (e.g. `eventTarget.onclick`).\n * @param {Object} eventTargetPrototype The event target prototype to define an event attrbite.\n * @param {string} eventName The event name to define.\n * @returns {void}\n */\nfunction defineEventAttribute(eventTargetPrototype, eventName) {\n    Object.defineProperty(\n        eventTargetPrototype,\n        `on${eventName}`,\n        defineEventAttributeDescriptor(eventName)\n    )\n}\n\n/**\n * Define a custom EventTarget with event attributes.\n * @param {string[]} eventNames Event names for event attributes.\n * @returns {EventTarget} The custom EventTarget.\n * @private\n */\nfunction defineCustomEventTarget(eventNames) {\n    /** CustomEventTarget */\n    function CustomEventTarget() {\n        EventTarget.call(this)\n    }\n\n    CustomEventTarget.prototype = Object.create(EventTarget.prototype, {\n        constructor: {\n            value: CustomEventTarget,\n            configurable: true,\n            writable: true,\n        },\n    })\n\n    for (let i = 0; i < eventNames.length; ++i) {\n        defineEventAttribute(CustomEventTarget.prototype, eventNames[i])\n    }\n\n    return CustomEventTarget\n}\n\n/**\n * EventTarget.\n *\n * - This is constructor if no arguments.\n * - This is a function which returns a CustomEventTarget constructor if there are arguments.\n *\n * For example:\n *\n *     class A extends EventTarget {}\n *     class B extends EventTarget(\"message\") {}\n *     class C extends EventTarget(\"message\", \"error\") {}\n *     class D extends EventTarget([\"message\", \"error\"]) {}\n */\nfunction EventTarget() {\n    /*eslint-disable consistent-return */\n    if (this instanceof EventTarget) {\n        listenersMap.set(this, new Map())\n        return\n    }\n    if (arguments.length === 1 && Array.isArray(arguments[0])) {\n        return defineCustomEventTarget(arguments[0])\n    }\n    if (arguments.length > 0) {\n        const types = new Array(arguments.length)\n        for (let i = 0; i < arguments.length; ++i) {\n            types[i] = arguments[i]\n        }\n        return defineCustomEventTarget(types)\n    }\n    throw new TypeError(\"Cannot call a class as a function\")\n    /*eslint-enable consistent-return */\n}\n\n// Should be enumerable, but class methods are not enumerable.\nEventTarget.prototype = {\n    /**\n     * Add a given listener to this event target.\n     * @param {string} eventName The event name to add.\n     * @param {Function} listener The listener to add.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    addEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n        if (typeof listener !== \"function\" && !isObject(listener)) {\n            throw new TypeError(\"'listener' should be a function or an object.\")\n        }\n\n        const listeners = getListeners(this)\n        const optionsIsObj = isObject(options)\n        const capture = optionsIsObj\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n        const newNode = {\n            listener,\n            listenerType,\n            passive: optionsIsObj && Boolean(options.passive),\n            once: optionsIsObj && Boolean(options.once),\n            next: null,\n        }\n\n        // Set it as the first node if the first node is null.\n        let node = listeners.get(eventName)\n        if (node === undefined) {\n            listeners.set(eventName, newNode)\n            return\n        }\n\n        // Traverse to the tail while checking duplication..\n        let prev = null\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                // Should ignore duplication.\n                return\n            }\n            prev = node\n            node = node.next\n        }\n\n        // Add it.\n        prev.next = newNode\n    },\n\n    /**\n     * Remove a given listener from this event target.\n     * @param {string} eventName The event name to remove.\n     * @param {Function} listener The listener to remove.\n     * @param {boolean|{capture?:boolean,passive?:boolean,once?:boolean}} [options] The options for this listener.\n     * @returns {void}\n     */\n    removeEventListener(eventName, listener, options) {\n        if (listener == null) {\n            return\n        }\n\n        const listeners = getListeners(this)\n        const capture = isObject(options)\n            ? Boolean(options.capture)\n            : Boolean(options)\n        const listenerType = capture ? CAPTURE : BUBBLE\n\n        let prev = null\n        let node = listeners.get(eventName)\n        while (node != null) {\n            if (\n                node.listener === listener &&\n                node.listenerType === listenerType\n            ) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n                return\n            }\n\n            prev = node\n            node = node.next\n        }\n    },\n\n    /**\n     * Dispatch a given event.\n     * @param {Event|{type:string}} event The event to dispatch.\n     * @returns {boolean} `false` if canceled.\n     */\n    dispatchEvent(event) {\n        if (event == null || typeof event.type !== \"string\") {\n            throw new TypeError('\"event.type\" should be a string.')\n        }\n\n        // If listeners aren't registered, terminate.\n        const listeners = getListeners(this)\n        const eventName = event.type\n        let node = listeners.get(eventName)\n        if (node == null) {\n            return true\n        }\n\n        // Since we cannot rewrite several properties, so wrap object.\n        const wrappedEvent = wrapEvent(this, event)\n\n        // This doesn't process capturing phase and bubbling phase.\n        // This isn't participating in a tree.\n        let prev = null\n        while (node != null) {\n            // Remove this listener if it's once\n            if (node.once) {\n                if (prev !== null) {\n                    prev.next = node.next\n                } else if (node.next !== null) {\n                    listeners.set(eventName, node.next)\n                } else {\n                    listeners.delete(eventName)\n                }\n            } else {\n                prev = node\n            }\n\n            // Call this listener\n            setPassiveListener(\n                wrappedEvent,\n                node.passive ? node.listener : null\n            )\n            if (typeof node.listener === \"function\") {\n                try {\n                    node.listener.call(this, wrappedEvent)\n                } catch (err) {\n                    if (\n                        typeof console !== \"undefined\" &&\n                        typeof console.error === \"function\"\n                    ) {\n                        console.error(err)\n                    }\n                }\n            } else if (\n                node.listenerType !== ATTRIBUTE &&\n                typeof node.listener.handleEvent === \"function\"\n            ) {\n                node.listener.handleEvent(wrappedEvent)\n            }\n\n            // Break if `event.stopImmediatePropagation` was called.\n            if (isStopped(wrappedEvent)) {\n                break\n            }\n\n            node = node.next\n        }\n        setPassiveListener(wrappedEvent, null)\n        setEventPhase(wrappedEvent, 0)\n        setCurrentTarget(wrappedEvent, null)\n\n        return !wrappedEvent.defaultPrevented\n    },\n}\n\n// `constructor` is not enumerable.\nObject.defineProperty(EventTarget.prototype, \"constructor\", {\n    value: EventTarget,\n    configurable: true,\n    writable: true,\n})\n\n// Ensure `eventTarget instanceof window.EventTarget` is `true`.\nif (\n    typeof window !== \"undefined\" &&\n    typeof window.EventTarget !== \"undefined\"\n) {\n    Object.setPrototypeOf(EventTarget.prototype, window.EventTarget.prototype)\n}\n\nexport { defineEventAttribute, EventTarget }\nexport default EventTarget\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o) {\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (o = unsupportedIterableToArray(o))) {\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var it,\n      normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _AwaitValue(value) {\n  this.wrapped = value;\n}","import AwaitValue from \"./AwaitValue\";\nexport default function _awaitAsyncGenerator(value) {\n  return new AwaitValue(value);\n}","import AwaitValue from \"./AwaitValue\";\nexport default function AsyncGenerator(gen) {\n  var front, back;\n\n  function send(key, arg) {\n    return new Promise(function (resolve, reject) {\n      var request = {\n        key: key,\n        arg: arg,\n        resolve: resolve,\n        reject: reject,\n        next: null\n      };\n\n      if (back) {\n        back = back.next = request;\n      } else {\n        front = back = request;\n        resume(key, arg);\n      }\n    });\n  }\n\n  function resume(key, arg) {\n    try {\n      var result = gen[key](arg);\n      var value = result.value;\n      var wrappedAwait = value instanceof AwaitValue;\n      Promise.resolve(wrappedAwait ? value.wrapped : value).then(function (arg) {\n        if (wrappedAwait) {\n          resume(key === \"return\" ? \"return\" : \"next\", arg);\n          return;\n        }\n\n        settle(result.done ? \"return\" : \"normal\", arg);\n      }, function (err) {\n        resume(\"throw\", err);\n      });\n    } catch (err) {\n      settle(\"throw\", err);\n    }\n  }\n\n  function settle(type, value) {\n    switch (type) {\n      case \"return\":\n        front.resolve({\n          value: value,\n          done: true\n        });\n        break;\n\n      case \"throw\":\n        front.reject(value);\n        break;\n\n      default:\n        front.resolve({\n          value: value,\n          done: false\n        });\n        break;\n    }\n\n    front = front.next;\n\n    if (front) {\n      resume(front.key, front.arg);\n    } else {\n      back = null;\n    }\n  }\n\n  this._invoke = send;\n\n  if (typeof gen[\"return\"] !== \"function\") {\n    this[\"return\"] = undefined;\n  }\n}\n\nif (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n  AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n    return this;\n  };\n}\n\nAsyncGenerator.prototype.next = function (arg) {\n  return this._invoke(\"next\", arg);\n};\n\nAsyncGenerator.prototype[\"throw\"] = function (arg) {\n  return this._invoke(\"throw\", arg);\n};\n\nAsyncGenerator.prototype[\"return\"] = function (arg) {\n  return this._invoke(\"return\", arg);\n};","import AsyncGenerator from \"./AsyncGenerator\";\nexport default function _wrapAsyncGenerator(fn) {\n  return function () {\n    return new AsyncGenerator(fn.apply(this, arguments));\n  };\n}","export default function _asyncGeneratorDelegate(inner, awaitWrap) {\n  var iter = {},\n      waiting = false;\n\n  function pump(key, value) {\n    waiting = true;\n    value = new Promise(function (resolve) {\n      resolve(inner[key](value));\n    });\n    return {\n      done: false,\n      value: awaitWrap(value)\n    };\n  }\n\n  ;\n\n  if (typeof Symbol === \"function\" && Symbol.iterator) {\n    iter[Symbol.iterator] = function () {\n      return this;\n    };\n  }\n\n  iter.next = function (value) {\n    if (waiting) {\n      waiting = false;\n      return value;\n    }\n\n    return pump(\"next\", value);\n  };\n\n  if (typeof inner[\"throw\"] === \"function\") {\n    iter[\"throw\"] = function (value) {\n      if (waiting) {\n        waiting = false;\n        throw value;\n      }\n\n      return pump(\"throw\", value);\n    };\n  }\n\n  if (typeof inner[\"return\"] === \"function\") {\n    iter[\"return\"] = function (value) {\n      if (waiting) {\n        waiting = false;\n        return value;\n      }\n\n      return pump(\"return\", value);\n    };\n  }\n\n  return iter;\n}","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\nflatbuffers.Builder.prototype.clear = function() {\n  this.bb.clear();\n  this.space = this.bb.capacity();\n  this.minalign = 1;\n  this.vtable = null;\n  this.vtable_in_use = 0;\n  this.isNested = false;\n  this.object_start = 0;\n  this.vtables = [];\n  this.vector_num_elems = 0;\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\nflatbuffers.ByteBuffer.prototype.clear = function() {\n  this.position_ = 0;\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from './buffer';\nimport {\n    TextDecoder as TextDecoderPolyfill,\n    TextEncoder as TextEncoderPolyfill,\n} from 'text-encoding-utf-8';\n\n/** @ignore @suppress {missingRequire} */\nconst _Buffer = typeof Buffer === 'function' ? Buffer : null;\n/** @ignore */\nconst useNativeEncoders = typeof TextDecoder === 'function' && typeof TextEncoder === 'function';\n\n/** @ignore */\nexport const decodeUtf8 = ((TextDecoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const decoder = new TextDecoder('utf-8');\n        return (buffer?: ArrayBuffer | ArrayBufferView) => decoder.decode(buffer);\n    }\n    return (input: ArrayBufferLike | ArrayBufferView) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return _Buffer.from(buffer, byteOffset, length).toString();\n    };\n})(typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill);\n\n/** @ignore */\nexport const encodeUtf8 = ((TextEncoder) => {\n    if (useNativeEncoders || !_Buffer) {\n        const encoder = new TextEncoder();\n        return (value?: string) => encoder.encode(value);\n    }\n    return (input = '') => toUint8Array(_Buffer.from(input, 'utf8'));\n})(typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\n\n/** @ignore */\nexport const ITERATOR_DONE: any = Object.freeze({ done: true, value: void (0) });\n\n/** @ignore */\nexport type FileHandle = import('fs').promises.FileHandle;\n/** @ignore */\nexport type ArrowJSONLike = { schema: any; batches?: any[]; dictionaries?: any[]; };\n/** @ignore */\nexport type ReadableDOMStreamOptions = { type: 'bytes' | undefined, autoAllocateChunkSize?: number, highWaterMark?: number };\n\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(private _json: ArrowJSONLike) {}\n    public get schema(): any { return this._json['schema']; }\n    public get batches(): any[] { return (this._json['batches'] || []) as any[]; }\n    public get dictionaries(): any[] { return (this._json['dictionaries'] || []) as any[]; }\n}\n\n/** @ignore */\nexport interface Readable<T> {\n\n    readonly closed: Promise<void>;\n    cancel(reason?: any): Promise<void>;\n\n    read(size?: number | null): Promise<T | null>;\n    peek(size?: number | null): Promise<T | null>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(size?: number | null): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nexport interface Writable<T> {\n    readonly closed: Promise<void>;\n    close(): void;\n    write(chunk: T): void;\n    abort(reason?: any): void;\n}\n\n/** @ignore */\nexport interface ReadableWritable<TReadable, TWritable> extends Readable<TReadable>, Writable<TWritable> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<TReadable>;\n    toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<TReadable>;\n    toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n}\n\n/** @ignore */\nexport abstract class ReadableInterop<T> {\n\n    public abstract toDOMStream(options?: ReadableDOMStreamOptions): ReadableStream<T>;\n    public abstract toNodeStream(options?: import('stream').ReadableOptions): import('stream').Readable;\n\n    public tee(): [ReadableStream<T>, ReadableStream<T>] {\n        return this._getDOMStream().tee();\n    }\n    public pipe<R extends NodeJS.WritableStream>(writable: R, options?: { end?: boolean; }) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    public pipeTo(writable: WritableStream<T>, options?: PipeOptions) { return this._getDOMStream().pipeTo(writable, options); }\n    public pipeThrough<R extends ReadableStream<any>>(duplex: { writable: WritableStream<T>, readable: R }, options?: PipeOptions) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n\n    protected _DOMStream?: ReadableStream<T>;\n    private _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n\n    protected _nodeStream?: import('stream').Readable;\n    private _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n\n/** @ignore */\ntype Resolution<T> = { resolve: (value?: T | PromiseLike<T>) => void; reject: (reason?: any) => void; };\n\n/** @ignore */\nexport class AsyncQueue<TReadable = Uint8Array, TWritable = TReadable> extends ReadableInterop<TReadable>\n    implements AsyncIterableIterator<TReadable>, ReadableWritable<TReadable, TWritable> {\n\n    protected _values: TWritable[] = [];\n    protected _error?: { error: any; };\n    protected _closedPromise: Promise<void>;\n    protected _closedPromiseResolve?: (value?: any) => void;\n    protected resolvers: Resolution<IteratorResult<TReadable>>[] = [];\n\n    constructor() {\n        super();\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public write(value: TWritable) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift()!.resolve({ done: false, value } as any));\n        }\n    }\n    public abort(value?: any) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift()!.reject({ done: true, value }));\n        }\n    }\n    public close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift()!.resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n\n    public [Symbol.asyncIterator]() { return this; }\n    public toDOMStream(options?: ReadableDOMStreamOptions) {\n        return streamAdapters.toDOMStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public toNodeStream(options?: import('stream').ReadableOptions) {\n        return streamAdapters.toNodeStream(\n            (this._closedPromiseResolve || this._error)\n                ? (this as AsyncIterable<TReadable>)\n                : (this._values as any) as Iterable<TReadable>,\n            options);\n    }\n    public async throw(_?: any) { await this.abort(_); return ITERATOR_DONE; }\n    public async return(_?: any) { await this.close(); return ITERATOR_DONE; }\n\n    public async read(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<TReadable | null> { return (await this.next(size, 'peek')).value; }\n    public next(..._args: any[]): Promise<IteratorResult<TReadable>> {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift()! } as any);\n        } else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        } else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        } else {\n            return new Promise<IteratorResult<TReadable>>((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n\n    protected _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ReadableInterop, ArrowJSONLike } from '../io/interfaces';\n\n/** @ignore */\ntype FSReadStream = import('fs').ReadStream;\n/** @ignore */\ntype FileHandle = import('fs').promises.FileHandle;\n\n/** @ignore */\nexport interface Subscription {\n    unsubscribe: () => void;\n}\n\n/** @ignore */\nexport interface Observer<T> {\n    closed?: boolean;\n    next: (value: T) => void;\n    error: (err: any) => void;\n    complete: () => void;\n}\n\n/** @ignore */\nexport interface Observable<T> {\n    subscribe: (observer: Observer<T>) => Subscription;\n}\n\n/** @ignore */\nconst [BigIntCtor, BigIntAvailable] = (() => {\n    const BigIntUnavailableError = () => { throw new Error('BigInt is not available in this environment'); };\n    function BigIntUnavailable() { throw BigIntUnavailableError(); }\n    BigIntUnavailable.asIntN = () => { throw BigIntUnavailableError(); };\n    BigIntUnavailable.asUintN = () => { throw BigIntUnavailableError(); };\n    return typeof BigInt !== 'undefined' ? [BigInt, true] : [<any> BigIntUnavailable, false];\n})() as [BigIntConstructor, boolean];\n\n/** @ignore */\nconst [BigInt64ArrayCtor, BigInt64ArrayAvailable] = (() => {\n    const BigInt64ArrayUnavailableError = () => { throw new Error('BigInt64Array is not available in this environment'); };\n    class BigInt64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigInt64ArrayUnavailableError(); }\n        static from() { throw BigInt64ArrayUnavailableError(); }\n        constructor() { throw BigInt64ArrayUnavailableError(); }\n    }\n    return typeof BigInt64Array !== 'undefined' ? [BigInt64Array, true] : [<any> BigInt64ArrayUnavailable, false];\n})() as [BigInt64ArrayConstructor, boolean];\n\n/** @ignore */\nconst [BigUint64ArrayCtor, BigUint64ArrayAvailable] = (() => {\n    const BigUint64ArrayUnavailableError = () => { throw new Error('BigUint64Array is not available in this environment'); };\n    class BigUint64ArrayUnavailable {\n        static get BYTES_PER_ELEMENT() { return 8; }\n        static of() { throw BigUint64ArrayUnavailableError(); }\n        static from() { throw BigUint64ArrayUnavailableError(); }\n        constructor() { throw BigUint64ArrayUnavailableError(); }\n    }\n    return typeof BigUint64Array !== 'undefined' ? [BigUint64Array, true] : [<any> BigUint64ArrayUnavailable, false];\n})() as [BigUint64ArrayConstructor, boolean];\n\nexport { BigIntCtor as BigInt, BigIntAvailable };\nexport { BigInt64ArrayCtor as BigInt64Array, BigInt64ArrayAvailable };\nexport { BigUint64ArrayCtor as BigUint64Array, BigUint64ArrayAvailable };\n\n/** @ignore */ const isNumber = (x: any) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x: any) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x: any) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x: any): x is Object => x != null && Object(x) === x;\n\n/** @ignore */\nexport const isPromise = <T = any>(x: any): x is PromiseLike<T> => {\n    return isObject(x) && isFunction(x.then);\n};\n\n/** @ignore */\nexport const isObservable = <T = any>(x: any): x is Observable<T> => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n\n/** @ignore */\nexport const isIterable = <T = any>(x: any): x is Iterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n\n/** @ignore */\nexport const isAsyncIterable = <T = any>(x: any): x is AsyncIterable<T> => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n\n/** @ignore */\nexport const isArrowJSON = (x: any): x is ArrowJSONLike  => {\n    return isObject(x) && isObject(x['schema']);\n};\n\n/** @ignore */\nexport const isArrayLike = <T = any>(x: any): x is ArrayLike<T> => {\n    return isObject(x) && isNumber(x['length']);\n};\n\n/** @ignore */\nexport const isIteratorResult = <T = any>(x: any): x is IteratorResult<T> => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n\n/** @ignore */\nexport const isUnderlyingSink = <T = any>(x: any): x is UnderlyingSink<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n\n/** @ignore */\nexport const isFileHandle = (x: any): x is FileHandle => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n\n/** @ignore */\nexport const isFSReadStream = (x: any): x is FSReadStream => {\n    return isReadableNodeStream(x) && isNumber((<any> x)['bytesRead']);\n};\n\n/** @ignore */\nexport const isFetchResponse = (x: any): x is Response => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n\n/** @ignore */\nexport const isWritableDOMStream = <T = any>(x: any): x is WritableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableDOMStream = <T = any>(x: any): x is ReadableStream<T> => {\n    return isObject(x) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isWritableNodeStream = (x: any): x is NodeJS.WritableStream => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n/** @ignore */\nexport const isReadableNodeStream = (x: any): x is NodeJS.ReadableStream => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks: Uint8Array[]) {\n    let result = chunks[0] ? [chunks[0]] : [];\n    let xOffset: number, yOffset: number, xLen: number, yLen: number;\n    for (let x, y, i = 0, j = 0, n = chunks.length; ++i < n;) {\n        x = result[j];\n        y = chunks[i];\n        // continue if x and y don't share the same underlying ArrayBuffer, or if x isn't before y\n        if (!x || !y || x.buffer !== y.buffer || y.byteOffset < x.byteOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        ({ byteOffset: xOffset, byteLength: xLen } = x);\n        ({ byteOffset: yOffset, byteLength: yLen } = y);\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            y && (result[++j] = y);\n            continue;\n        }\n        result[j] = new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen);\n    }\n    return result;\n}\n\n/** @ignore */\nexport function memcpy<TTarget extends ArrayBufferView, TSource extends ArrayBufferView>(target: TTarget, source: TSource, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n\n/** @ignore */\nexport function joinUint8Arrays(chunks: Uint8Array[], size?: number | null): [Uint8Array, Uint8Array[], number] {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    let result = collapseContiguousByteRanges(chunks);\n    let byteLength = result.reduce((x, b) => x + b.byteLength, 0);\n    let source: Uint8Array, sliced: Uint8Array, buffer: Uint8Array | void;\n    let offset = 0, index = -1, length = Math.min(size || Infinity, byteLength);\n    for (let n = result.length; ++index < n;) {\n        source = result[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                result[index] = source.subarray(sliced.length);\n            } else if (sliced.length === source.length) { index++; }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        memcpy(buffer || (buffer = new Uint8Array(length)), sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), result.slice(index), byteLength - (buffer ? buffer.byteLength : 0)];\n}\n\n/** @ignore */\nexport type ArrayBufferViewInput = ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined  |\n                    IteratorResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> |\n          ReadableStreamReadResult<ArrayBufferView | ArrayBufferLike | ArrayBufferView | Iterable<number> | ArrayLike<number> | ByteBuffer | string | null | undefined> ;\n\n/** @ignore */\nexport function toArrayBufferView<T extends TypedArray>(ArrayBufferViewCtor: TypedArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView<T extends BigIntArray>(ArrayBufferViewCtor: BigIntArrayConstructor<T>, input: ArrayBufferViewInput): T;\nexport function toArrayBufferView(ArrayBufferViewCtor: any, input: ArrayBufferViewInput) {\n\n    let value: any = isIteratorResult(input) ? input.value : input;\n\n    if (value instanceof ArrayBufferViewCtor) {\n        if (ArrayBufferViewCtor === Uint8Array) {\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            return new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength);\n        }\n        return value;\n    }\n    if (!value) { return new ArrayBufferViewCtor(0); }\n    if (typeof value === 'string') { value = encodeUtf8(value); }\n    if (value instanceof ArrayBuffer) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof SharedArrayBuf) { return new ArrayBufferViewCtor(value); }\n    if (value instanceof ByteBuffer) { return toArrayBufferView(ArrayBufferViewCtor, value.bytes()); }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n\n/** @ignore */ export const toInt8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toBigInt64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigInt64Array, input);\n/** @ignore */ export const toUint8Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toBigUint64Array = (input: ArrayBufferViewInput) => toArrayBufferView(BigUint64Array, input);\n/** @ignore */ export const toFloat32Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input: ArrayBufferViewInput) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input: ArrayBufferViewInput) => toArrayBufferView(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewIteratorInput = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nexport function* toArrayBufferViewIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewIteratorInput) {\n\n    const wrap = function*<T>(x: T) { yield x; };\n    const buffers: Iterable<ArrayBufferViewInput> =\n                   (typeof source === 'string') ? wrap(source)\n                 : (ArrayBuffer.isView(source)) ? wrap(source)\n              : (source instanceof ArrayBuffer) ? wrap(source)\n           : (source instanceof SharedArrayBuf) ? wrap(source)\n    : !isIterable<ArrayBufferViewInput>(source) ? wrap(source) : source;\n\n    yield* pump((function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input: ArrayBufferViewIteratorInput) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n\n/** @ignore */\ntype ArrayBufferViewAsyncIteratorInput = AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput> | PromiseLike<ArrayBufferViewInput> | ArrayBufferViewInput;\n\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator<T extends TypedArray>(ArrayCtor: TypedArrayConstructor<T>, source: ArrayBufferViewAsyncIteratorInput): AsyncIterableIterator<T> {\n\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise<ArrayBufferViewInput>(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n\n    const wrap = async function*<T>(x: T) { yield await x; };\n    const emit = async function* <T extends Iterable<any>>(source: T) {\n        yield* pump((function*(it: Iterator<any>) {\n            let r: IteratorResult<any> = <any> null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n\n    const buffers: AsyncIterable<ArrayBufferViewInput> =\n                        (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n                      : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                   : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n          : isIterable<ArrayBufferViewInput>(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n    : !isAsyncIterable<ArrayBufferViewInput>(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                                     : source; // otherwise if AsyncIterable, use it\n\n    yield* pump((async function* (it) {\n        let r: IteratorResult<any> = <any> null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input: ArrayBufferViewAsyncIteratorInput) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n\n/** @ignore */\nexport function rebaseValueOffsets(offset: number, length: number, valueOffsets: Int32Array) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n/** @ignore */\nexport function compareArrayLike<T extends ArrayLike<any>>(a: T, b: T) {\n    let i = 0, n = a.length;\n    if (n !== b.length) { return false; }\n    if (n > 0) {\n        do { if (a[i] !== b[i]) { return false; } } while (++i < n);\n    }\n    return true;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport {\n    toUint8Array,\n    joinUint8Arrays,\n    ArrayBufferViewInput,\n    toUint8ArrayIterator,\n    toUint8ArrayAsyncIterator\n} from '../util/buffer';\n\nimport { ReadableDOMStreamOptions } from './interfaces';\n\n/** @ignore */\nexport default {\n    fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n        return pump(fromIterable<T>(source));\n    },\n    fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromAsyncIterable<T>(source));\n    },\n    fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n        return pump(fromDOMStream<T>(source));\n    },\n    fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: import('stream').ReadableOptions): import('stream').Readable {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n\n/** @ignore */\nconst pump = <T extends Iterator<any> | AsyncIterator<any>>(iterator: T) => { iterator.next(); return iterator; };\n\n/** @ignore */\nfunction* fromIterable<T extends ArrayBufferViewInput>(source: Iterable<T> | T): IterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n\n/** @ignore */\nasync function* fromAsyncIterable<T extends ArrayBufferViewInput>(source: AsyncIterable<T> | PromiseLike<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done: boolean, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    } finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream<T extends ArrayBufferViewInput>(source: ReadableStream<T>): AsyncIterableIterator<Uint8Array> {\n\n    let done = false, threw = false;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield <any> null);\n\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    } finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n\n/** @ignore */\nclass AdaptiveByteReader<T extends ArrayBufferViewInput> {\n\n    private supportsBYOB: boolean;\n    private byobReader: ReadableStreamBYOBReader | null = null;\n    private defaultReader: ReadableStreamDefaultReader<T> | null = null;\n    private reader: ReadableStreamBYOBReader | ReadableStreamDefaultReader<T> | null;\n\n    constructor(private source: ReadableStream<T>) {\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        } catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n\n    get closed(): Promise<void> {\n        return this.reader ? this.reader['closed'].catch(() => {}) : Promise.resolve();\n    }\n\n    releaseLock(): void {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n\n    async cancel(reason?: any): Promise<void> {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason).catch(() => {}));\n        source && (source['locked'] && this.releaseLock());\n    }\n\n    async read(size?: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result as ReadableStreamReadResult<Uint8Array>));\n        return result as ReadableStreamReadResult<Uint8Array>;\n    }\n\n    private getDefaultReader() {\n        if (this.byobReader) { this.releaseLock(); }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.defaultReader);\n    }\n\n    private getBYOBReader() {\n        if (this.defaultReader) { this.releaseLock(); }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => {});\n        }\n        return (this.reader = this.byobReader);\n    }\n\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    private async readFromBYOBReader(size: number) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n\n/** @ignore */\nasync function readInto(reader: ReadableStreamBYOBReader, buffer: ArrayBufferLike, offset: number, size: number): Promise<ReadableStreamReadResult<Uint8Array>> {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n\n/** @ignore */\ntype EventName = 'end' | 'error' | 'readable';\n/** @ignore */\ntype Event = [EventName, (_: any) => void, Promise<[EventName, Error | null]>];\n/** @ignore */\nconst onEvent = <T extends string>(stream: NodeJS.ReadableStream, event: T) => {\n    let handler = (_: any) => resolve([event, _]);\n    let resolve: (value?: [T, any] | PromiseLike<[T, any]>) => void;\n    return [event, handler, new Promise<[T, any]>(\n        (r) => (resolve = r) && stream['once'](event, handler)\n    )] as Event;\n};\n\n/** @ignore */\nasync function* fromNodeStream(stream: NodeJS.ReadableStream): AsyncIterableIterator<Uint8Array> {\n\n    let events: Event[] = [];\n    let event: EventName = 'error';\n    let done = false, err: Error | null = null;\n    let cmd: 'peek' | 'read', size: number, bufferLength = 0;\n    let buffers: Uint8Array[] = [], buffer: Uint8Array | Buffer | string;\n\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers, size)[0];\n        }\n        [buffer, buffers, bufferLength] = joinUint8Arrays(buffers, size);\n        return buffer;\n    }\n\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield <any> null);\n\n    // ignore stdin if it's a TTY\n    if ((stream as any)['isTTY']) { return yield new Uint8Array(0); }\n\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n\n        do {\n            events[2] = onEvent(stream, 'readable');\n\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') { break; }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                } else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    } finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n\n    function cleanup<T extends Error | null | void>(events: Event[], err?: T) {\n        buffer = buffers = <any> null;\n        return new Promise<T>(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = (stream as any)['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            } catch (e) { err = e || err; } finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import superPropBase from \"./superPropBase\";\nexport default function _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}","import getPrototypeOf from \"./getPrototypeOf\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { DataType } from './type';\nimport { Chunked } from './vector/chunked';\n\n/** @ignore */\nexport interface Clonable<R extends AbstractVector> {\n    clone(...args: any[]): R;\n}\n\n/** @ignore */\nexport interface Sliceable<R extends AbstractVector> {\n    slice(begin?: number, end?: number): R;\n}\n\n/** @ignore */\nexport interface Applicative<T extends DataType, R extends Chunked> {\n    concat(...others: Vector<T>[]): R;\n    readonly [Symbol.isConcatSpreadable]: boolean;\n}\n\nexport interface AbstractVector<T extends DataType = any>\n    extends Clonable<Vector<T>>,\n            Sliceable<Vector<T>>,\n            Applicative<T, Chunked<T>> {\n\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\nexport abstract class AbstractVector<T extends DataType = any> implements Iterable<T['TValue'] | null> {\n\n    public abstract readonly data: Data<T>;\n    public abstract readonly type: T;\n    public abstract readonly typeId: T['TType'];\n    public abstract readonly length: number;\n    public abstract readonly stride: number;\n    public abstract readonly nullCount: number;\n    public abstract readonly byteLength: number;\n    public abstract readonly numChildren: number;\n\n    public abstract readonly ArrayType: T['ArrayType'];\n\n    public abstract isValid(index: number): boolean;\n    public abstract get(index: number): T['TValue'] | null;\n    public abstract set(index: number, value: T['TValue'] | null): void;\n    public abstract indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n    public abstract [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n\n    public abstract toArray(): T['TArray'];\n    public abstract getChildAt<R extends DataType = any>(index: number): Vector<R> | null;\n}\n\nexport { AbstractVector as Vector };\n","/* tslint:disable:class-name */\n\n// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MetadataVersion {\n        /**\n         * 0.1.0\n         */\n        V1 = 0,\n\n        /**\n         * 0.2.0\n         */\n        V2 = 1,\n\n        /**\n         * 0.3.0 -> 0.7.1\n         */\n        V3 = 2,\n\n        /**\n         * >= 0.8.0\n         */\n        V4 = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum UnionMode {\n        Sparse = 0,\n        Dense = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Precision {\n        HALF = 0,\n        SINGLE = 1,\n        DOUBLE = 2\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum DateUnit {\n        DAY = 0,\n        MILLISECOND = 1\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum TimeUnit {\n        SECOND = 0,\n        MILLISECOND = 1,\n        MICROSECOND = 2,\n        NANOSECOND = 3\n    }\n}\n\n/**\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum IntervalUnit {\n        YEAR_MONTH = 0,\n        DAY_TIME = 1\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Type {\n        NONE = 0,\n        Null = 1,\n        Int = 2,\n        FloatingPoint = 3,\n        Binary = 4,\n        Utf8 = 5,\n        Bool = 6,\n        Decimal = 7,\n        Date = 8,\n        Time = 9,\n        Timestamp = 10,\n        Interval = 11,\n        List = 12,\n        Struct_ = 13,\n        Union = 14,\n        FixedSizeBinary = 15,\n        FixedSizeList = 16,\n        Map = 17,\n        Duration = 18,\n        LargeBinary = 19,\n        LargeUtf8 = 20,\n        LargeList = 21\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum Endianness {\n        Little = 0,\n        Big = 1\n    }\n}\n\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Null {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Null\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Null {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Null= obj\n         * @returns Null\n         */\n        static getRootAsNull(bb: flatbuffers.ByteBuffer, obj?: Null): Null {\n            return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startNull(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createNull(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Null.startNull(builder);\n            return Null.endNull(builder);\n        }\n    }\n}\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Struct_ {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Struct_\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Struct_ {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Struct_= obj\n         * @returns Struct_\n         */\n        static getRootAsStruct_(bb: flatbuffers.ByteBuffer, obj?: Struct_): Struct_ {\n            return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startStruct_(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createStruct_(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Struct_.startStruct_(builder);\n            return Struct_.endStruct_(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class List {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns List\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): List {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param List= obj\n         * @returns List\n         */\n        static getRootAsList(bb: flatbuffers.ByteBuffer, obj?: List): List {\n            return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            List.startList(builder);\n            return List.endList(builder);\n        }\n    }\n}\n/**\n * Same as List, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeList= obj\n         * @returns LargeList\n         */\n        static getRootAsLargeList(bb: flatbuffers.ByteBuffer, obj?: LargeList): LargeList {\n            return (obj || new LargeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeList(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeList.startLargeList(builder);\n            return LargeList.endLargeList(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeList {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeList\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeList {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeList= obj\n         * @returns FixedSizeList\n         */\n        static getRootAsFixedSizeList(bb: flatbuffers.ByteBuffer, obj?: FixedSizeList): FixedSizeList {\n            return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of list items per value\n         *\n         * @returns number\n         */\n        listSize(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeList(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number listSize\n         */\n        static addListSize(builder: flatbuffers.Builder, listSize: number) {\n            builder.addFieldInt32(0, listSize, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeList(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeList(builder: flatbuffers.Builder, listSize: number): flatbuffers.Offset {\n            FixedSizeList.startFixedSizeList(builder);\n            FixedSizeList.addListSize(builder, listSize);\n            return FixedSizeList.endFixedSizeList(builder);\n        }\n    }\n}\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Map {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Map\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Map {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Map= obj\n         * @returns Map\n         */\n        static getRootAsMap(bb: flatbuffers.ByteBuffer, obj?: Map): Map {\n            return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Set to true if the keys within each value are sorted\n         *\n         * @returns boolean\n         */\n        keysSorted(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMap(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean keysSorted\n         */\n        static addKeysSorted(builder: flatbuffers.Builder, keysSorted: boolean) {\n            builder.addFieldInt8(0, +keysSorted, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMap(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createMap(builder: flatbuffers.Builder, keysSorted: boolean): flatbuffers.Offset {\n            Map.startMap(builder);\n            Map.addKeysSorted(builder, keysSorted);\n            return Map.endMap(builder);\n        }\n    }\n}\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Union {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Union\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Union {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Union= obj\n         * @returns Union\n         */\n        static getRootAsUnion(bb: flatbuffers.ByteBuffer, obj?: Union): Union {\n            return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.UnionMode\n         */\n        mode(): org.apache.arrow.flatbuf.UnionMode {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n        }\n\n        /**\n         * @param number index\n         * @returns number\n         */\n        typeIds(index: number): number | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;\n        }\n\n        /**\n         * @returns number\n         */\n        typeIdsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns Int32Array\n         */\n        typeIdsArray(): Int32Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? new Int32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUnion(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.UnionMode mode\n         */\n        static addMode(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode) {\n            builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeIdsOffset\n         */\n        static addTypeIds(builder: flatbuffers.Builder, typeIdsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, typeIdsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<number> data\n         * @returns flatbuffers.Offset\n         */\n        static createTypeIdsVector(builder: flatbuffers.Builder, data: number[] | Int32Array): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addInt32(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startTypeIdsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUnion(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUnion(builder: flatbuffers.Builder, mode: org.apache.arrow.flatbuf.UnionMode, typeIdsOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Union.startUnion(builder);\n            Union.addMode(builder, mode);\n            Union.addTypeIds(builder, typeIdsOffset);\n            return Union.endUnion(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Int {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Int\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Int {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Int= obj\n         * @returns Int\n         */\n        static getRootAsInt(bb: flatbuffers.ByteBuffer, obj?: Int): Int {\n            return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @returns boolean\n         */\n        isSigned(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInt(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(0, bitWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isSigned\n         */\n        static addIsSigned(builder: flatbuffers.Builder, isSigned: boolean) {\n            builder.addFieldInt8(1, +isSigned, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInt(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInt(builder: flatbuffers.Builder, bitWidth: number, isSigned: boolean): flatbuffers.Offset {\n            Int.startInt(builder);\n            Int.addBitWidth(builder, bitWidth);\n            Int.addIsSigned(builder, isSigned);\n            return Int.endInt(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FloatingPoint {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FloatingPoint\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FloatingPoint {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FloatingPoint= obj\n         * @returns FloatingPoint\n         */\n        static getRootAsFloatingPoint(bb: flatbuffers.ByteBuffer, obj?: FloatingPoint): FloatingPoint {\n            return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Precision\n         */\n        precision(): org.apache.arrow.flatbuf.Precision {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFloatingPoint(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Precision precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision) {\n            builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFloatingPoint(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFloatingPoint(builder: flatbuffers.Builder, precision: org.apache.arrow.flatbuf.Precision): flatbuffers.Offset {\n            FloatingPoint.startFloatingPoint(builder);\n            FloatingPoint.addPrecision(builder, precision);\n            return FloatingPoint.endFloatingPoint(builder);\n        }\n    }\n}\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Utf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Utf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Utf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Utf8= obj\n         * @returns Utf8\n         */\n        static getRootAsUtf8(bb: flatbuffers.ByteBuffer, obj?: Utf8): Utf8 {\n            return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Utf8.startUtf8(builder);\n            return Utf8.endUtf8(builder);\n        }\n    }\n}\n/**\n * Opaque binary data\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Binary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Binary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Binary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Binary= obj\n         * @returns Binary\n         */\n        static getRootAsBinary(bb: flatbuffers.ByteBuffer, obj?: Binary): Binary {\n            return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Binary.startBinary(builder);\n            return Binary.endBinary(builder);\n        }\n    }\n}\n/**\n * Same as Utf8, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeUtf8 {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeUtf8\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeUtf8 {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeUtf8= obj\n         * @returns LargeUtf8\n         */\n        static getRootAsLargeUtf8(bb: flatbuffers.ByteBuffer, obj?: LargeUtf8): LargeUtf8 {\n            return (obj || new LargeUtf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeUtf8(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeUtf8(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeUtf8.startLargeUtf8(builder);\n            return LargeUtf8.endLargeUtf8(builder);\n        }\n    }\n}\n/**\n * Same as Binary, but with 64-bit offsets, allowing to represent\n * extremely large data values.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class LargeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns LargeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): LargeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param LargeBinary= obj\n         * @returns LargeBinary\n         */\n        static getRootAsLargeBinary(bb: flatbuffers.ByteBuffer, obj?: LargeBinary): LargeBinary {\n            return (obj || new LargeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startLargeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createLargeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            LargeBinary.startLargeBinary(builder);\n            return LargeBinary.endLargeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FixedSizeBinary {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FixedSizeBinary\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FixedSizeBinary {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param FixedSizeBinary= obj\n         * @returns FixedSizeBinary\n         */\n        static getRootAsFixedSizeBinary(bb: flatbuffers.ByteBuffer, obj?: FixedSizeBinary): FixedSizeBinary {\n            return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Number of bytes per value\n         *\n         * @returns number\n         */\n        byteWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFixedSizeBinary(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number byteWidth\n         */\n        static addByteWidth(builder: flatbuffers.Builder, byteWidth: number) {\n            builder.addFieldInt32(0, byteWidth, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFixedSizeBinary(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createFixedSizeBinary(builder: flatbuffers.Builder, byteWidth: number): flatbuffers.Offset {\n            FixedSizeBinary.startFixedSizeBinary(builder);\n            FixedSizeBinary.addByteWidth(builder, byteWidth);\n            return FixedSizeBinary.endFixedSizeBinary(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Bool {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Bool\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Bool {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Bool= obj\n         * @returns Bool\n         */\n        static getRootAsBool(bb: flatbuffers.ByteBuffer, obj?: Bool): Bool {\n            return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startBool(builder: flatbuffers.Builder) {\n            builder.startObject(0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createBool(builder: flatbuffers.Builder): flatbuffers.Offset {\n            Bool.startBool(builder);\n            return Bool.endBool(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Decimal {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Decimal\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Decimal {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Decimal= obj\n         * @returns Decimal\n         */\n        static getRootAsDecimal(bb: flatbuffers.ByteBuffer, obj?: Decimal): Decimal {\n            return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Total number of decimal digits\n         *\n         * @returns number\n         */\n        precision(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Number of digits after the decimal point \".\"\n         *\n         * @returns number\n         */\n        scale(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDecimal(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number precision\n         */\n        static addPrecision(builder: flatbuffers.Builder, precision: number) {\n            builder.addFieldInt32(0, precision, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number scale\n         */\n        static addScale(builder: flatbuffers.Builder, scale: number) {\n            builder.addFieldInt32(1, scale, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDecimal(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDecimal(builder: flatbuffers.Builder, precision: number, scale: number): flatbuffers.Offset {\n            Decimal.startDecimal(builder);\n            Decimal.addPrecision(builder, precision);\n            Decimal.addScale(builder, scale);\n            return Decimal.endDecimal(builder);\n        }\n    }\n}\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Date {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Date\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Date {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Date= obj\n         * @returns Date\n         */\n        static getRootAsDate(bb: flatbuffers.ByteBuffer, obj?: Date): Date {\n            return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.DateUnit\n         */\n        unit(): org.apache.arrow.flatbuf.DateUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDate(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.DateUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDate(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDate(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.DateUnit): flatbuffers.Offset {\n            Date.startDate(builder);\n            Date.addUnit(builder, unit);\n            return Date.endDate(builder);\n        }\n    }\n}\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Time {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Time\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Time {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Time= obj\n         * @returns Time\n         */\n        static getRootAsTime(bb: flatbuffers.ByteBuffer, obj?: Time): Time {\n            return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @returns number\n         */\n        bitWidth(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.readInt32(this.bb_pos + offset) : 32;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTime(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number bitWidth\n         */\n        static addBitWidth(builder: flatbuffers.Builder, bitWidth: number) {\n            builder.addFieldInt32(1, bitWidth, 32);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTime(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTime(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, bitWidth: number): flatbuffers.Offset {\n            Time.startTime(builder);\n            Time.addUnit(builder, unit);\n            Time.addBitWidth(builder, bitWidth);\n            return Time.endTime(builder);\n        }\n    }\n}\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Timestamp {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Timestamp\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Timestamp {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Timestamp= obj\n         * @returns Timestamp\n         */\n        static getRootAsTimestamp(bb: flatbuffers.ByteBuffer, obj?: Timestamp): Timestamp {\n            return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n        }\n\n        /**\n         * The time zone is a string indicating the name of a time zone, one of:\n         *\n         * * As used in the Olson time zone database (the \"tz database\" or\n         *   \"tzdata\"), such as \"America/New_York\"\n         * * An absolute time zone offset of the form +XX:XX or -XX:XX, such as +07:30\n         *\n         * Whether a timezone string is present indicates different semantics about\n         * the data:\n         *\n         * * If the time zone is null or equal to an empty string, the data is \"time\n         *   zone naive\" and shall be displayed *as is* to the user, not localized\n         *   to the locale of the user. This data can be though of as UTC but\n         *   without having \"UTC\" as the time zone, it is not considered to be\n         *   localized to any time zone\n         *\n         * * If the time zone is set to a valid value, values can be displayed as\n         *   \"localized\" to that time zone, even though the underlying 64-bit\n         *   integers are identical to the same data stored in UTC. Converting\n         *   between time zones is a metadata-only operation and does not change the\n         *   underlying values\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        timezone(): string | null;\n        timezone(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        timezone(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startTimestamp(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset timezoneOffset\n         */\n        static addTimezone(builder: flatbuffers.Builder, timezoneOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, timezoneOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endTimestamp(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createTimestamp(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit, timezoneOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Timestamp.startTimestamp(builder);\n            Timestamp.addUnit(builder, unit);\n            Timestamp.addTimezone(builder, timezoneOffset);\n            return Timestamp.endTimestamp(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Interval {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Interval\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Interval {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Interval= obj\n         * @returns Interval\n         */\n        static getRootAsInterval(bb: flatbuffers.ByteBuffer, obj?: Interval): Interval {\n            return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.IntervalUnit\n         */\n        unit(): org.apache.arrow.flatbuf.IntervalUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startInterval(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.IntervalUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endInterval(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createInterval(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.IntervalUnit): flatbuffers.Offset {\n            Interval.startInterval(builder);\n            Interval.addUnit(builder, unit);\n            return Interval.endInterval(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Duration {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Duration\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Duration {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Duration= obj\n         * @returns Duration\n         */\n        static getRootAsDuration(bb: flatbuffers.ByteBuffer, obj?: Duration): Duration {\n            return (obj || new Duration).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.TimeUnit\n         */\n        unit(): org.apache.arrow.flatbuf.TimeUnit {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDuration(builder: flatbuffers.Builder) {\n            builder.startObject(1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.TimeUnit unit\n         */\n        static addUnit(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit) {\n            builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDuration(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDuration(builder: flatbuffers.Builder, unit: org.apache.arrow.flatbuf.TimeUnit): flatbuffers.Offset {\n            Duration.startDuration(builder);\n            Duration.addUnit(builder, unit);\n            return Duration.endDuration(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class KeyValue {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns KeyValue\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): KeyValue {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param KeyValue= obj\n         * @returns KeyValue\n         */\n        static getRootAsKeyValue(bb: flatbuffers.ByteBuffer, obj?: KeyValue): KeyValue {\n            return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        key(): string | null;\n        key(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        key(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        value(): string | null;\n        value(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        value(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startKeyValue(builder: flatbuffers.Builder) {\n            builder.startObject(2);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset keyOffset\n         */\n        static addKey(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, keyOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset valueOffset\n         */\n        static addValue(builder: flatbuffers.Builder, valueOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, valueOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endKeyValue(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createKeyValue(builder: flatbuffers.Builder, keyOffset: flatbuffers.Offset, valueOffset: flatbuffers.Offset): flatbuffers.Offset {\n            KeyValue.startKeyValue(builder);\n            KeyValue.addKey(builder, keyOffset);\n            KeyValue.addValue(builder, valueOffset);\n            return KeyValue.endKeyValue(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryEncoding {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryEncoding\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryEncoding {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryEncoding= obj\n         * @returns DictionaryEncoding\n         */\n        static getRootAsDictionaryEncoding(bb: flatbuffers.ByteBuffer, obj?: DictionaryEncoding): DictionaryEncoding {\n            return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * The known dictionary id in the application where this data is used. In\n         * the file or streaming formats, the dictionary ids are found in the\n         * DictionaryBatch messages\n         *\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * The dictionary indices are constrained to be positive integers. If this\n         * field is null, the indices must be signed int32\n         *\n         * @param org.apache.arrow.flatbuf.Int= obj\n         * @returns org.apache.arrow.flatbuf.Int|null\n         */\n        indexType(obj?: org.apache.arrow.flatbuf.Int): org.apache.arrow.flatbuf.Int | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * By default, dictionaries are not ordered, or the order does not have\n         * semantic meaning. In some statistical, applications, dictionary-encoding\n         * is used to represent ordered categorical data, and we provide a way to\n         * preserve that metadata here\n         *\n         * @returns boolean\n         */\n        isOrdered(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryEncoding(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset indexTypeOffset\n         */\n        static addIndexType(builder: flatbuffers.Builder, indexTypeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, indexTypeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isOrdered\n         */\n        static addIsOrdered(builder: flatbuffers.Builder, isOrdered: boolean) {\n            builder.addFieldInt8(2, +isOrdered, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryEncoding(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryEncoding(builder: flatbuffers.Builder, id: flatbuffers.Long, indexTypeOffset: flatbuffers.Offset, isOrdered: boolean): flatbuffers.Offset {\n            DictionaryEncoding.startDictionaryEncoding(builder);\n            DictionaryEncoding.addId(builder, id);\n            DictionaryEncoding.addIndexType(builder, indexTypeOffset);\n            DictionaryEncoding.addIsOrdered(builder, isOrdered);\n            return DictionaryEncoding.endDictionaryEncoding(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Field {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Field\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Field {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Field= obj\n         * @returns Field\n         */\n        static getRootAsField(bb: flatbuffers.ByteBuffer, obj?: Field): Field {\n            return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * Name is not required, in i.e. a List\n         *\n         * @param flatbuffers.Encoding= optionalEncoding\n         * @returns string|Uint8Array|null\n         */\n        name(): string | null;\n        name(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;\n        name(optionalEncoding?: any): string | Uint8Array | null {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;\n        }\n\n        /**\n         * Whether or not this field can contain nulls. Should be true in general.\n         *\n         * @returns boolean\n         */\n        nullable(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.Type\n         */\n        typeType(): org.apache.arrow.flatbuf.Type {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n        }\n\n        /**\n         * This is the type of the decoded value if the field is dictionary encoded.\n         *\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        type<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * Present only if the field is dictionary encoded.\n         *\n         * @param org.apache.arrow.flatbuf.DictionaryEncoding= obj\n         * @returns org.apache.arrow.flatbuf.DictionaryEncoding|null\n         */\n        dictionary(obj?: org.apache.arrow.flatbuf.DictionaryEncoding): org.apache.arrow.flatbuf.DictionaryEncoding | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * children apply only to nested data types like Struct, List and Union. For\n         * primitive types children will have length 0.\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        children(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        childrenLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 14);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * User-defined metadata\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 16);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startField(builder: flatbuffers.Builder) {\n            builder.startObject(7);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nameOffset\n         */\n        static addName(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(0, nameOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean nullable\n         */\n        static addNullable(builder: flatbuffers.Builder, nullable: boolean) {\n            builder.addFieldInt8(1, +nullable, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Type typeType\n         */\n        static addTypeType(builder: flatbuffers.Builder, typeType: org.apache.arrow.flatbuf.Type) {\n            builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset typeOffset\n         */\n        static addType(builder: flatbuffers.Builder, typeOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, typeOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionaryOffset\n         */\n        static addDictionary(builder: flatbuffers.Builder, dictionaryOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, dictionaryOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset childrenOffset\n         */\n        static addChildren(builder: flatbuffers.Builder, childrenOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(5, childrenOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createChildrenVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startChildrenVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(6, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endField(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createField(builder: flatbuffers.Builder, nameOffset: flatbuffers.Offset, nullable: boolean, typeType: org.apache.arrow.flatbuf.Type, typeOffset: flatbuffers.Offset, dictionaryOffset: flatbuffers.Offset, childrenOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Field.startField(builder);\n            Field.addName(builder, nameOffset);\n            Field.addNullable(builder, nullable);\n            Field.addTypeType(builder, typeType);\n            Field.addType(builder, typeOffset);\n            Field.addDictionary(builder, dictionaryOffset);\n            Field.addChildren(builder, childrenOffset);\n            Field.addCustomMetadata(builder, customMetadataOffset);\n            return Field.endField(builder);\n        }\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Buffer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Buffer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Buffer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The relative offset into the shared memory page where the bytes for this\n         * buffer starts\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The absolute length (in bytes) of the memory buffer. The memory is found\n         * from offset (inclusive) to offset + length (non-inclusive).\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param flatbuffers.Long length\n         * @returns flatbuffers.Offset\n         */\n        static createBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Long, length: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(length);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Schema {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Schema\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Schema {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Schema= obj\n         * @returns Schema\n         */\n        static getRootAsSchema(bb: flatbuffers.ByteBuffer, obj?: Schema): Schema {\n            return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * endianness of the buffer\n         * it is Little Endian by default\n         * if endianness doesn't match the underlying system then the vectors need to be converted\n         *\n         * @returns org.apache.arrow.flatbuf.Endianness\n         */\n        endianness(): org.apache.arrow.flatbuf.Endianness {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Field= obj\n         * @returns org.apache.arrow.flatbuf.Field\n         */\n        fields(index: number, obj?: org.apache.arrow.flatbuf.Field): org.apache.arrow.flatbuf.Field | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        fieldsLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: org.apache.arrow.flatbuf.KeyValue): org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startSchema(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.Endianness endianness\n         */\n        static addEndianness(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness) {\n            builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset fieldsOffset\n         */\n        static addFields(builder: flatbuffers.Builder, fieldsOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, fieldsOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createFieldsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startFieldsVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endSchema(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishSchemaBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createSchema(builder: flatbuffers.Builder, endianness: org.apache.arrow.flatbuf.Endianness, fieldsOffset: flatbuffers.Offset, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Schema.startSchema(builder);\n            Schema.addEndianness(builder, endianness);\n            Schema.addFields(builder, fieldsOffset);\n            Schema.addCustomMetadata(builder, customMetadataOffset);\n            return Schema.endSchema(builder);\n        }\n    }\n}\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\nexport namespace org.apache.arrow.flatbuf {\n    export import Schema = NS7624605610262437867.org.apache.arrow.flatbuf.Schema;\n}\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum {number}\n */\nexport namespace org.apache.arrow.flatbuf {\n    export enum MessageHeader {\n        NONE = 0,\n        Schema = 1,\n        DictionaryBatch = 2,\n        RecordBatch = 3,\n        Tensor = 4,\n        SparseTensor = 5\n    }\n}\n\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class FieldNode {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns FieldNode\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): FieldNode {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * The number of value slots in the Arrow array at this level of a nested\n         * tree\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * The number of observed nulls. Fields with null_count == 0 may choose not\n         * to write their physical validity bitmap out as a materialized buffer,\n         * instead setting the length of the bitmap buffer to 0.\n         *\n         * @returns flatbuffers.Long\n         */\n        nullCount(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         * @param flatbuffers.Long null_count\n         * @returns flatbuffers.Offset\n         */\n        static createFieldNode(builder: flatbuffers.Builder, length: flatbuffers.Long, null_count: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 16);\n            builder.writeInt64(null_count);\n            builder.writeInt64(length);\n            return builder.offset();\n        }\n\n    }\n}\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class RecordBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns RecordBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): RecordBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param RecordBatch= obj\n         * @returns RecordBatch\n         */\n        static getRootAsRecordBatch(bb: flatbuffers.ByteBuffer, obj?: RecordBatch): RecordBatch {\n            return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * number of records / rows. The arrays in the batch should all have this\n         * length\n         *\n         * @returns flatbuffers.Long\n         */\n        length(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * Nodes correspond to the pre-ordered flattened logical schema\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.FieldNode= obj\n         * @returns org.apache.arrow.flatbuf.FieldNode\n         */\n        nodes(index: number, obj?: org.apache.arrow.flatbuf.FieldNode): org.apache.arrow.flatbuf.FieldNode | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        nodesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * Buffers correspond to the pre-ordered flattened buffer tree\n         *\n         * The number of buffers appended to this list depends on the schema. For\n         * example, most primitive arrays will have 2 buffers, 1 for the validity\n         * bitmap and 1 for the values. For struct arrays, there will only be a\n         * single buffer for the validity (nulls) bitmap\n         *\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Buffer= obj\n         * @returns org.apache.arrow.flatbuf.Buffer\n         */\n        buffers(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Buffer): NS7624605610262437867.org.apache.arrow.flatbuf.Buffer | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Buffer).__init(this.bb!.__vector(this.bb_pos + offset) + index * 16, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        buffersLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startRecordBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long length\n         */\n        static addLength(builder: flatbuffers.Builder, length: flatbuffers.Long) {\n            builder.addFieldInt64(0, length, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset nodesOffset\n         */\n        static addNodes(builder: flatbuffers.Builder, nodesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, nodesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startNodesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset buffersOffset\n         */\n        static addBuffers(builder: flatbuffers.Builder, buffersOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, buffersOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startBuffersVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(16, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endRecordBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createRecordBatch(builder: flatbuffers.Builder, length: flatbuffers.Long, nodesOffset: flatbuffers.Offset, buffersOffset: flatbuffers.Offset): flatbuffers.Offset {\n            RecordBatch.startRecordBatch(builder);\n            RecordBatch.addLength(builder, length);\n            RecordBatch.addNodes(builder, nodesOffset);\n            RecordBatch.addBuffers(builder, buffersOffset);\n            return RecordBatch.endRecordBatch(builder);\n        }\n    }\n}\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class DictionaryBatch {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns DictionaryBatch\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): DictionaryBatch {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param DictionaryBatch= obj\n         * @returns DictionaryBatch\n         */\n        static getRootAsDictionaryBatch(bb: flatbuffers.ByteBuffer, obj?: DictionaryBatch): DictionaryBatch {\n            return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        id(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.RecordBatch= obj\n         * @returns org.apache.arrow.flatbuf.RecordBatch|null\n         */\n        data(obj?: org.apache.arrow.flatbuf.RecordBatch): org.apache.arrow.flatbuf.RecordBatch | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * If isDelta is true the values in the dictionary are to be appended to a\n         * dictionary with the indicated id\n         *\n         * @returns boolean\n         */\n        isDelta(): boolean {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startDictionaryBatch(builder: flatbuffers.Builder) {\n            builder.startObject(3);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long id\n         */\n        static addId(builder: flatbuffers.Builder, id: flatbuffers.Long) {\n            builder.addFieldInt64(0, id, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dataOffset\n         */\n        static addData(builder: flatbuffers.Builder, dataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, dataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param boolean isDelta\n         */\n        static addIsDelta(builder: flatbuffers.Builder, isDelta: boolean) {\n            builder.addFieldInt8(2, +isDelta, +false);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endDictionaryBatch(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        static createDictionaryBatch(builder: flatbuffers.Builder, id: flatbuffers.Long, dataOffset: flatbuffers.Offset, isDelta: boolean): flatbuffers.Offset {\n            DictionaryBatch.startDictionaryBatch(builder);\n            DictionaryBatch.addId(builder, id);\n            DictionaryBatch.addData(builder, dataOffset);\n            DictionaryBatch.addIsDelta(builder, isDelta);\n            return DictionaryBatch.endDictionaryBatch(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Message {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Message\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Message {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Message= obj\n         * @returns Message\n         */\n        static getRootAsMessage(bb: flatbuffers.ByteBuffer, obj?: Message): Message {\n            return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MessageHeader\n         */\n        headerType(): org.apache.arrow.flatbuf.MessageHeader {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? /**  */ (this.bb!.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n        }\n\n        /**\n         * @param flatbuffers.Table obj\n         * @returns ?flatbuffers.Table\n         */\n        header<T extends flatbuffers.Table>(obj: T): T | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;\n        }\n\n        /**\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.KeyValue= obj\n         * @returns org.apache.arrow.flatbuf.KeyValue\n         */\n        customMetadata(index: number, obj?: NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue): NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue | null {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.KeyValue).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        customMetadataLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 12);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startMessage(builder: flatbuffers.Builder) {\n            builder.startObject(5);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MessageHeader headerType\n         */\n        static addHeaderType(builder: flatbuffers.Builder, headerType: org.apache.arrow.flatbuf.MessageHeader) {\n            builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset headerOffset\n         */\n        static addHeader(builder: flatbuffers.Builder, headerOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, headerOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long bodyLength\n         */\n        static addBodyLength(builder: flatbuffers.Builder, bodyLength: flatbuffers.Long) {\n            builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset customMetadataOffset\n         */\n        static addCustomMetadata(builder: flatbuffers.Builder, customMetadataOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(4, customMetadataOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param Array.<flatbuffers.Offset> data\n         * @returns flatbuffers.Offset\n         */\n        static createCustomMetadataVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {\n            builder.startVector(4, data.length, 4);\n            for (let i = data.length - 1; i >= 0; i--) {\n                builder.addOffset(data[i]);\n            }\n            return builder.endVector();\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startCustomMetadataVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(4, numElems, 4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endMessage(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishMessageBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createMessage(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, headerType: org.apache.arrow.flatbuf.MessageHeader, headerOffset: flatbuffers.Offset, bodyLength: flatbuffers.Long, customMetadataOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Message.startMessage(builder);\n            Message.addVersion(builder, version);\n            Message.addHeaderType(builder, headerType);\n            Message.addHeader(builder, headerOffset);\n            Message.addBodyLength(builder, bodyLength);\n            Message.addCustomMetadata(builder, customMetadataOffset);\n            return Message.endMessage(builder);\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\n\nexport import ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport import DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport import TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport import Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport import UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport import IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport import MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport import MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n    /** The default placeholder type */\n    NONE            =  0,\n    /** A NULL type having no physical storage */\n    Null            =  1,\n    /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n    Int             =  2,\n    /** 2, 4, or 8-byte floating point value */\n    Float           =  3,\n    /** Variable-length bytes (no guarantee of UTF8-ness) */\n    Binary          =  4,\n    /** UTF8 variable-length string as List<Char> */\n    Utf8            =  5,\n    /** Boolean as 1 bit, LSB bit-packed ordering */\n    Bool            =  6,\n    /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n    Decimal         =  7,\n    /** int32_t days or int64_t milliseconds since the UNIX epoch */\n    Date            =  8,\n    /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n    Time            =  9,\n    /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n    Timestamp       = 10,\n    /** YEAR_MONTH or DAY_TIME interval in SQL style */\n    Interval        = 11,\n    /** A list of some logical data type */\n    List            = 12,\n    /** Struct of logical types */\n    Struct          = 13,\n    /** Union of logical types */\n    Union           = 14,\n    /** Fixed-size binary. Each value occupies the same number of bytes */\n    FixedSizeBinary = 15,\n    /** Fixed-size list. Each value occupies the same number of bytes */\n    FixedSizeList   = 16,\n    /** Map of named logical types */\n    Map             = 17,\n\n    /** Dictionary aka Category type */\n    Dictionary            = -1,\n    Int8                  = -2,\n    Int16                 = -3,\n    Int32                 = -4,\n    Int64                 = -5,\n    Uint8                 = -6,\n    Uint16                = -7,\n    Uint32                = -8,\n    Uint64                = -9,\n    Float16               = -10,\n    Float32               = -11,\n    Float64               = -12,\n    DateDay               = -13,\n    DateMillisecond       = -14,\n    TimestampSecond       = -15,\n    TimestampMillisecond  = -16,\n    TimestampMicrosecond  = -17,\n    TimestampNanosecond   = -18,\n    TimeSecond            = -19,\n    TimeMillisecond       = -20,\n    TimeMicrosecond       = -21,\n    TimeNanosecond        = -22,\n    DenseUnion            = -23,\n    SparseUnion           = -24,\n    IntervalDayTime       = -25,\n    IntervalYearMonth     = -26,\n}\n\nexport enum BufferType {\n    /**\n     * used in List type, Dense Union and variable length primitive types (String, Binary)\n     */\n    OFFSET = 0,\n\n    /**\n     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n     */\n    DATA = 1,\n\n    /**\n     * Bit vector indicating if each value is null\n     */\n    VALIDITY = 2,\n\n    /**\n     * Type vector used in Union type\n     */\n    TYPE = 3\n  }\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function getBool(_data: any, _index: number, byte: number, bit: number) {\n    return (byte & 1 << bit) !== 0;\n}\n\n/** @ignore */\nexport function getBit(_data: any, _index: number, byte: number, bit: number): 0 | 1 {\n    return (byte & 1 << bit) >> bit as (0 | 1);\n}\n\n/** @ignore */\nexport function setBool(bytes: Uint8Array, index: number, value: any) {\n    return value ?\n        !!(bytes[index >> 3] |=  (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false ;\n}\n\n/** @ignore */\nexport function truncateBitmap(offset: number, length: number, bitmap: Uint8Array) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n        bytes.set(offset % 8 === 0 ? bitmap.subarray(offset >> 3) :\n            // Otherwise iterate each bit from the offset and return a new one\n            packBools(iterateBits(bitmap, offset, length, null, getBool)).subarray(0, alignedSize));\n        return bytes;\n    }\n    return bitmap;\n}\n\n/** @ignore */\nexport function packBools(values: Iterable<any>) {\n    let xs: number[] = [];\n    let i = 0, bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) { xs[i++] = byte; }\n    let b = new Uint8Array((xs.length + 7) & ~7);\n    b.set(xs);\n    return b;\n}\n\n/** @ignore */\nexport function* iterateBits<T>(bytes: Uint8Array, begin: number, length: number, context: any,\n                                get: (context: any, index: number, byte: number, bit: number) => T) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data: Uint8Array, lhs: number, rhs: number): number {\n    if (rhs - lhs <= 0) { return 0; }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n        // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n        popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3)\n    );\n}\n\n/** @ignore */\nexport function popcnt_array(arr: ArrayBufferView, byteOffset?: number, byteLength?: number) {\n    let cnt = 0, pos = byteOffset! | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len =  byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n\n/** @ignore */\nexport function popcnt_uint32(uint32: number): number {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, Float, Int, Date_, Interval, Time, Timestamp, Union, } from './type';\n\nexport abstract class Visitor {\n    public visitMany(nodes: any[], ...args: any[][]) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    public visit(...args: any[]) {\n        return this.getVisitFn(args[0], false).apply(this, args);\n    }\n    public getVisitFn(node: any, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    public visitNull            (_node: any, ..._args: any[]): any { return null; }\n    public visitBool            (_node: any, ..._args: any[]): any { return null; }\n    public visitInt             (_node: any, ..._args: any[]): any { return null; }\n    public visitFloat           (_node: any, ..._args: any[]): any { return null; }\n    public visitUtf8            (_node: any, ..._args: any[]): any { return null; }\n    public visitBinary          (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeBinary (_node: any, ..._args: any[]): any { return null; }\n    public visitDate            (_node: any, ..._args: any[]): any { return null; }\n    public visitTimestamp       (_node: any, ..._args: any[]): any { return null; }\n    public visitTime            (_node: any, ..._args: any[]): any { return null; }\n    public visitDecimal         (_node: any, ..._args: any[]): any { return null; }\n    public visitList            (_node: any, ..._args: any[]): any { return null; }\n    public visitStruct          (_node: any, ..._args: any[]): any { return null; }\n    public visitUnion           (_node: any, ..._args: any[]): any { return null; }\n    public visitDictionary      (_node: any, ..._args: any[]): any { return null; }\n    public visitInterval        (_node: any, ..._args: any[]): any { return null; }\n    public visitFixedSizeList   (_node: any, ..._args: any[]): any { return null; }\n    public visitMap             (_node: any, ..._args: any[]): any { return null; }\n}\n\n/** @ignore */\nfunction getVisitFn<T extends DataType>(visitor: Visitor, node: any, throwIfNotFound = true) {\n    let fn: any = null;\n    let dtype: T['TType'] = Type.NONE;\n    // tslint:disable\n    if      (node instanceof Data    ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof Vector  ) { dtype = inferDType(node.type as T); }\n    else if (node instanceof DataType) { dtype = inferDType(node      as T); }\n    else if (typeof (dtype = node) !== 'number') { dtype = Type[node] as any as T['TType']; }\n\n    switch (dtype) {\n        case Type.Null:                 fn = visitor.visitNull; break;\n        case Type.Bool:                 fn = visitor.visitBool; break;\n        case Type.Int:                  fn = visitor.visitInt; break;\n        case Type.Int8:                 fn = visitor.visitInt8 || visitor.visitInt; break;\n        case Type.Int16:                fn = visitor.visitInt16 || visitor.visitInt; break;\n        case Type.Int32:                fn = visitor.visitInt32 || visitor.visitInt; break;\n        case Type.Int64:                fn = visitor.visitInt64 || visitor.visitInt; break;\n        case Type.Uint8:                fn = visitor.visitUint8 || visitor.visitInt; break;\n        case Type.Uint16:               fn = visitor.visitUint16 || visitor.visitInt; break;\n        case Type.Uint32:               fn = visitor.visitUint32 || visitor.visitInt; break;\n        case Type.Uint64:               fn = visitor.visitUint64 || visitor.visitInt; break;\n        case Type.Float:                fn = visitor.visitFloat; break;\n        case Type.Float16:              fn = visitor.visitFloat16 || visitor.visitFloat; break;\n        case Type.Float32:              fn = visitor.visitFloat32 || visitor.visitFloat; break;\n        case Type.Float64:              fn = visitor.visitFloat64 || visitor.visitFloat; break;\n        case Type.Utf8:                 fn = visitor.visitUtf8; break;\n        case Type.Binary:               fn = visitor.visitBinary; break;\n        case Type.FixedSizeBinary:      fn = visitor.visitFixedSizeBinary; break;\n        case Type.Date:                 fn = visitor.visitDate; break;\n        case Type.DateDay:              fn = visitor.visitDateDay || visitor.visitDate; break;\n        case Type.DateMillisecond:      fn = visitor.visitDateMillisecond || visitor.visitDate; break;\n        case Type.Timestamp:            fn = visitor.visitTimestamp; break;\n        case Type.TimestampSecond:      fn = visitor.visitTimestampSecond || visitor.visitTimestamp; break;\n        case Type.TimestampMillisecond: fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp; break;\n        case Type.TimestampMicrosecond: fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp; break;\n        case Type.TimestampNanosecond:  fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp; break;\n        case Type.Time:                 fn = visitor.visitTime; break;\n        case Type.TimeSecond:           fn = visitor.visitTimeSecond || visitor.visitTime; break;\n        case Type.TimeMillisecond:      fn = visitor.visitTimeMillisecond || visitor.visitTime; break;\n        case Type.TimeMicrosecond:      fn = visitor.visitTimeMicrosecond || visitor.visitTime; break;\n        case Type.TimeNanosecond:       fn = visitor.visitTimeNanosecond || visitor.visitTime; break;\n        case Type.Decimal:              fn = visitor.visitDecimal; break;\n        case Type.List:                 fn = visitor.visitList; break;\n        case Type.Struct:               fn = visitor.visitStruct; break;\n        case Type.Union:                fn = visitor.visitUnion; break;\n        case Type.DenseUnion:           fn = visitor.visitDenseUnion || visitor.visitUnion; break;\n        case Type.SparseUnion:          fn = visitor.visitSparseUnion || visitor.visitUnion; break;\n        case Type.Dictionary:           fn = visitor.visitDictionary; break;\n        case Type.Interval:             fn = visitor.visitInterval; break;\n        case Type.IntervalDayTime:      fn = visitor.visitIntervalDayTime || visitor.visitInterval; break;\n        case Type.IntervalYearMonth:    fn = visitor.visitIntervalYearMonth || visitor.visitInterval; break;\n        case Type.FixedSizeList:        fn = visitor.visitFixedSizeList; break;\n        case Type.Map:                  fn = visitor.visitMap; break;\n    }\n    if (typeof fn === 'function') return fn;\n    if (!throwIfNotFound) return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n\n/** @ignore */\nfunction inferDType<T extends DataType>(type: T): Type {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = (type as any as Int);\n            switch (bitWidth) {\n                case  8: return isSigned ? Type.Int8  : Type.Uint8 ;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch((type as any as Float).precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch ((type as any as Time).unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch ((type as any as Timestamp).unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch ((type as any as Date_).unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch ((type as any as Interval).unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch ((type as any as Union).mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\nexport interface Visitor {\n    visitNull                  (node: any, ...args: any[]): any;\n    visitBool                  (node: any, ...args: any[]): any;\n    visitInt                   (node: any, ...args: any[]): any;\n    visitInt8?                 (node: any, ...args: any[]): any;\n    visitInt16?                (node: any, ...args: any[]): any;\n    visitInt32?                (node: any, ...args: any[]): any;\n    visitInt64?                (node: any, ...args: any[]): any;\n    visitUint8?                (node: any, ...args: any[]): any;\n    visitUint16?               (node: any, ...args: any[]): any;\n    visitUint32?               (node: any, ...args: any[]): any;\n    visitUint64?               (node: any, ...args: any[]): any;\n    visitFloat                 (node: any, ...args: any[]): any;\n    visitFloat16?              (node: any, ...args: any[]): any;\n    visitFloat32?              (node: any, ...args: any[]): any;\n    visitFloat64?              (node: any, ...args: any[]): any;\n    visitUtf8                  (node: any, ...args: any[]): any;\n    visitBinary                (node: any, ...args: any[]): any;\n    visitFixedSizeBinary       (node: any, ...args: any[]): any;\n    visitDate                  (node: any, ...args: any[]): any;\n    visitDateDay?              (node: any, ...args: any[]): any;\n    visitDateMillisecond?      (node: any, ...args: any[]): any;\n    visitTimestamp             (node: any, ...args: any[]): any;\n    visitTimestampSecond?      (node: any, ...args: any[]): any;\n    visitTimestampMillisecond? (node: any, ...args: any[]): any;\n    visitTimestampMicrosecond? (node: any, ...args: any[]): any;\n    visitTimestampNanosecond?  (node: any, ...args: any[]): any;\n    visitTime                  (node: any, ...args: any[]): any;\n    visitTimeSecond?           (node: any, ...args: any[]): any;\n    visitTimeMillisecond?      (node: any, ...args: any[]): any;\n    visitTimeMicrosecond?      (node: any, ...args: any[]): any;\n    visitTimeNanosecond?       (node: any, ...args: any[]): any;\n    visitDecimal               (node: any, ...args: any[]): any;\n    visitList                  (node: any, ...args: any[]): any;\n    visitStruct                (node: any, ...args: any[]): any;\n    visitUnion                 (node: any, ...args: any[]): any;\n    visitDenseUnion?           (node: any, ...args: any[]): any;\n    visitSparseUnion?          (node: any, ...args: any[]): any;\n    visitDictionary            (node: any, ...args: any[]): any;\n    visitInterval              (node: any, ...args: any[]): any;\n    visitIntervalDayTime?      (node: any, ...args: any[]): any;\n    visitIntervalYearMonth?    (node: any, ...args: any[]): any;\n    visitFixedSizeList         (node: any, ...args: any[]): any;\n    visitMap                   (node: any, ...args: any[]): any;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Visitor.prototype as any).visitInt8 = null;\n(Visitor.prototype as any).visitInt16 = null;\n(Visitor.prototype as any).visitInt32 = null;\n(Visitor.prototype as any).visitInt64 = null;\n(Visitor.prototype as any).visitUint8 = null;\n(Visitor.prototype as any).visitUint16 = null;\n(Visitor.prototype as any).visitUint32 = null;\n(Visitor.prototype as any).visitUint64 = null;\n(Visitor.prototype as any).visitFloat16 = null;\n(Visitor.prototype as any).visitFloat32 = null;\n(Visitor.prototype as any).visitFloat64 = null;\n(Visitor.prototype as any).visitDateDay = null;\n(Visitor.prototype as any).visitDateMillisecond = null;\n(Visitor.prototype as any).visitTimestampSecond = null;\n(Visitor.prototype as any).visitTimestampMillisecond = null;\n(Visitor.prototype as any).visitTimestampMicrosecond = null;\n(Visitor.prototype as any).visitTimestampNanosecond = null;\n(Visitor.prototype as any).visitTimeSecond = null;\n(Visitor.prototype as any).visitTimeMillisecond = null;\n(Visitor.prototype as any).visitTimeMicrosecond = null;\n(Visitor.prototype as any).visitTimeNanosecond = null;\n(Visitor.prototype as any).visitDenseUnion = null;\n(Visitor.prototype as any).visitSparseUnion = null;\n(Visitor.prototype as any).visitIntervalDayTime = null;\n(Visitor.prototype as any).visitIntervalYearMonth = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface TypeComparator extends Visitor {\n    visit<T extends DataType>(type: T, other?: DataType | null): other is T;\n    visitMany<T extends DataType>(nodes: T[], others?: DataType[] | null): boolean[];\n    getVisitFn<T extends DataType>(node: VectorType<T> |  Data<T> | T): (other?: DataType | null) => other is T;\n    visitNull                 <T extends Null>                 (type: T, other?: DataType | null): other is T;\n    visitBool                 <T extends Bool>                 (type: T, other?: DataType | null): other is T;\n    visitInt                  <T extends Int>                  (type: T, other?: DataType | null): other is T;\n    visitInt8                 <T extends Int8>                 (type: T, other?: DataType | null): other is T;\n    visitInt16                <T extends Int16>                (type: T, other?: DataType | null): other is T;\n    visitInt32                <T extends Int32>                (type: T, other?: DataType | null): other is T;\n    visitInt64                <T extends Int64>                (type: T, other?: DataType | null): other is T;\n    visitUint8                <T extends Uint8>                (type: T, other?: DataType | null): other is T;\n    visitUint16               <T extends Uint16>               (type: T, other?: DataType | null): other is T;\n    visitUint32               <T extends Uint32>               (type: T, other?: DataType | null): other is T;\n    visitUint64               <T extends Uint64>               (type: T, other?: DataType | null): other is T;\n    visitFloat                <T extends Float>                (type: T, other?: DataType | null): other is T;\n    visitFloat16              <T extends Float16>              (type: T, other?: DataType | null): other is T;\n    visitFloat32              <T extends Float32>              (type: T, other?: DataType | null): other is T;\n    visitFloat64              <T extends Float64>              (type: T, other?: DataType | null): other is T;\n    visitUtf8                 <T extends Utf8>                 (type: T, other?: DataType | null): other is T;\n    visitBinary               <T extends Binary>               (type: T, other?: DataType | null): other is T;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (type: T, other?: DataType | null): other is T;\n    visitDate                 <T extends Date_>                (type: T, other?: DataType | null): other is T;\n    visitDateDay              <T extends DateDay>              (type: T, other?: DataType | null): other is T;\n    visitDateMillisecond      <T extends DateMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestamp            <T extends Timestamp>            (type: T, other?: DataType | null): other is T;\n    visitTimestampSecond      <T extends TimestampSecond>      (type: T, other?: DataType | null): other is T;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (type: T, other?: DataType | null): other is T;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (type: T, other?: DataType | null): other is T;\n    visitTime                 <T extends Time>                 (type: T, other?: DataType | null): other is T;\n    visitTimeSecond           <T extends TimeSecond>           (type: T, other?: DataType | null): other is T;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (type: T, other?: DataType | null): other is T;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (type: T, other?: DataType | null): other is T;\n    visitDecimal              <T extends Decimal>              (type: T, other?: DataType | null): other is T;\n    visitList                 <T extends List>                 (type: T, other?: DataType | null): other is T;\n    visitStruct               <T extends Struct>               (type: T, other?: DataType | null): other is T;\n    visitUnion                <T extends Union>                (type: T, other?: DataType | null): other is T;\n    visitDenseUnion           <T extends DenseUnion>           (type: T, other?: DataType | null): other is T;\n    visitSparseUnion          <T extends SparseUnion>          (type: T, other?: DataType | null): other is T;\n    visitDictionary           <T extends Dictionary>           (type: T, other?: DataType | null): other is T;\n    visitInterval             <T extends Interval>             (type: T, other?: DataType | null): other is T;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (type: T, other?: DataType | null): other is T;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (type: T, other?: DataType | null): other is T;\n    visitFixedSizeList        <T extends FixedSizeList>        (type: T, other?: DataType | null): other is T;\n    visitMap                  <T extends Map_>                 (type: T, other?: DataType | null): other is T;\n}\n\n/** @ignore */\nexport class TypeComparator extends Visitor {\n    compareSchemas<T extends { [key: string]: DataType }>(schema: Schema<T>, other?: Schema | null): other is Schema<T> {\n        return (schema === other) || (\n            other instanceof schema.constructor &&\n            instance.compareFields(schema.fields, other.fields)\n        );\n    }\n    compareFields<T extends { [key: string]: DataType }>(fields: Field<T[keyof T]>[], others?: Field[] | null): others is Field<T[keyof T]>[] {\n        return (fields === others) || (\n            Array.isArray(fields) &&\n            Array.isArray(others) &&\n            fields.length === others.length &&\n            fields.every((f, i) => instance.compareField(f, others[i]))\n        );\n    }\n    compareField<T extends DataType = any>(field: Field<T>, other?: Field | null): other is Field<T> {\n        return (field === other) || (\n            other instanceof field.constructor &&\n            field.name === other.name &&\n            field.nullable === other.nullable &&\n            instance.visit(field.type, other.type)\n        );\n    }\n}\n\nfunction compareConstructor<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return other instanceof type.constructor;\n}\n\nfunction compareAny<T extends DataType>(type: T, other?: DataType | null): other is T {\n    return (type === other) || compareConstructor(type, other);\n}\n\nfunction compareInt<T extends Int>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.bitWidth === other.bitWidth &&\n        type.isSigned === other.isSigned\n    );\n}\n\nfunction compareFloat<T extends Float>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.precision === other.precision\n    );\n}\n\nfunction compareFixedSizeBinary<T extends FixedSizeBinary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.byteWidth === other.byteWidth\n    );\n}\n\nfunction compareDate<T extends Date_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareTimestamp<T extends Timestamp>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.timezone === other.timezone\n    );\n}\n\nfunction compareTime<T extends Time>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit &&\n        type.bitWidth === other.bitWidth\n    );\n}\n\nfunction compareList<T extends List>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareStruct<T extends Struct>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareUnion<T extends Union>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.mode === other.mode &&\n        type.typeIds.every((x, i) => x === other.typeIds[i]) &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareDictionary<T extends Dictionary>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.id === other.id &&\n        type.isOrdered === other.isOrdered &&\n        instance.visit(<any> type.indices, other.indices) &&\n        instance.visit(type.dictionary, other.dictionary)\n    );\n}\n\nfunction compareInterval<T extends Interval>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.unit === other.unit\n    );\n}\n\nfunction compareFixedSizeList<T extends FixedSizeList>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.listSize === other.listSize &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nfunction compareMap<T extends Map_>(type: T, other?: DataType | null): other is T {\n    return (type === other) || (\n        compareConstructor(type, other) &&\n        type.keysSorted === other.keysSorted &&\n        type.children.length === other.children.length &&\n        instance.compareFields(type.children, other.children)\n    );\n}\n\nTypeComparator.prototype.visitNull                 =             compareAny;\nTypeComparator.prototype.visitBool                 =             compareAny;\nTypeComparator.prototype.visitInt                  =             compareInt;\nTypeComparator.prototype.visitInt8                 =             compareInt;\nTypeComparator.prototype.visitInt16                =             compareInt;\nTypeComparator.prototype.visitInt32                =             compareInt;\nTypeComparator.prototype.visitInt64                =             compareInt;\nTypeComparator.prototype.visitUint8                =             compareInt;\nTypeComparator.prototype.visitUint16               =             compareInt;\nTypeComparator.prototype.visitUint32               =             compareInt;\nTypeComparator.prototype.visitUint64               =             compareInt;\nTypeComparator.prototype.visitFloat                =           compareFloat;\nTypeComparator.prototype.visitFloat16              =           compareFloat;\nTypeComparator.prototype.visitFloat32              =           compareFloat;\nTypeComparator.prototype.visitFloat64              =           compareFloat;\nTypeComparator.prototype.visitUtf8                 =             compareAny;\nTypeComparator.prototype.visitBinary               =             compareAny;\nTypeComparator.prototype.visitFixedSizeBinary      = compareFixedSizeBinary;\nTypeComparator.prototype.visitDate                 =            compareDate;\nTypeComparator.prototype.visitDateDay              =            compareDate;\nTypeComparator.prototype.visitDateMillisecond      =            compareDate;\nTypeComparator.prototype.visitTimestamp            =       compareTimestamp;\nTypeComparator.prototype.visitTimestampSecond      =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMillisecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampMicrosecond =       compareTimestamp;\nTypeComparator.prototype.visitTimestampNanosecond  =       compareTimestamp;\nTypeComparator.prototype.visitTime                 =            compareTime;\nTypeComparator.prototype.visitTimeSecond           =            compareTime;\nTypeComparator.prototype.visitTimeMillisecond      =            compareTime;\nTypeComparator.prototype.visitTimeMicrosecond      =            compareTime;\nTypeComparator.prototype.visitTimeNanosecond       =            compareTime;\nTypeComparator.prototype.visitDecimal              =             compareAny;\nTypeComparator.prototype.visitList                 =            compareList;\nTypeComparator.prototype.visitStruct               =          compareStruct;\nTypeComparator.prototype.visitUnion                =           compareUnion;\nTypeComparator.prototype.visitDenseUnion           =           compareUnion;\nTypeComparator.prototype.visitSparseUnion          =           compareUnion;\nTypeComparator.prototype.visitDictionary           =      compareDictionary;\nTypeComparator.prototype.visitInterval             =        compareInterval;\nTypeComparator.prototype.visitIntervalDayTime      =        compareInterval;\nTypeComparator.prototype.visitIntervalYearMonth    =        compareInterval;\nTypeComparator.prototype.visitFixedSizeList        =   compareFixedSizeList;\nTypeComparator.prototype.visitMap                  =             compareMap;\n\n/** @ignore */\nexport const instance = new TypeComparator();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport { Field } from './schema';\nimport { flatbuffers } from 'flatbuffers';\nimport { TypedArrayConstructor } from './interfaces';\nimport { VectorType as V, TypeToDataType } from './interfaces';\nimport { instance as comparer } from './visitor/typecomparator';\n\nimport Long = flatbuffers.Long;\nimport {\n    Type,\n    Precision, UnionMode,\n    DateUnit, TimeUnit, IntervalUnit\n} from './enum';\n\n/** @ignore */\nexport type TimeBitWidth = 32 | 64;\n/** @ignore */\nexport type IntBitWidth = 8 | 16 | 32 | 64;\n/** @ignore */\nexport type IsSigned = { 'true': true; 'false': false };\n/** @ignore */\nexport type RowLike<T extends { [key: string]: DataType }> =\n      ( Iterable<[string, T[keyof T]['TValue'] | null]> )\n    & { [P in keyof T]: T[P]['TValue'] | null }\n    & { get<K extends keyof T>(key: K): T[K]['TValue'] | null; }\n    & { set<K extends keyof T>(key: K, val: T[K]['TValue'] | null): void; }\n    ;\n\n/** @ignore */\nexport type MapLike<K extends DataType = any, V extends DataType = any> =\n      { [P in K['TValue']]: V['TValue'] | null }\n    & ( Map<K['TValue'], V['TValue'] | null> )\n    ;\n\nexport interface DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n    readonly TType: TType;\n    readonly TArray: any;\n    readonly TValue: any;\n    readonly ArrayType: any;\n    readonly children: Field<TChildren[keyof TChildren]>[];\n}\n\n/**\n * An abstract base class for classes that encapsulate metadata about each of\n * the logical types that Arrow can represent.\n */\nexport abstract class DataType<TType extends Type = Type, TChildren extends { [key: string]: DataType } = any> {\n\n    // @ts-ignore\n    public [Symbol.toStringTag]: string;\n\n    /** @nocollapse */ static            isNull (x: any): x is Null            { return x && x.typeId === Type.Null;            }\n    /** @nocollapse */ static             isInt (x: any): x is Int_            { return x && x.typeId === Type.Int;             }\n    /** @nocollapse */ static           isFloat (x: any): x is Float           { return x && x.typeId === Type.Float;           }\n    /** @nocollapse */ static          isBinary (x: any): x is Binary          { return x && x.typeId === Type.Binary;          }\n    /** @nocollapse */ static            isUtf8 (x: any): x is Utf8            { return x && x.typeId === Type.Utf8;            }\n    /** @nocollapse */ static            isBool (x: any): x is Bool            { return x && x.typeId === Type.Bool;            }\n    /** @nocollapse */ static         isDecimal (x: any): x is Decimal         { return x && x.typeId === Type.Decimal;         }\n    /** @nocollapse */ static            isDate (x: any): x is Date_           { return x && x.typeId === Type.Date;            }\n    /** @nocollapse */ static            isTime (x: any): x is Time_           { return x && x.typeId === Type.Time;            }\n    /** @nocollapse */ static       isTimestamp (x: any): x is Timestamp_      { return x && x.typeId === Type.Timestamp;       }\n    /** @nocollapse */ static        isInterval (x: any): x is Interval_       { return x && x.typeId === Type.Interval;        }\n    /** @nocollapse */ static            isList (x: any): x is List            { return x && x.typeId === Type.List;            }\n    /** @nocollapse */ static          isStruct (x: any): x is Struct          { return x && x.typeId === Type.Struct;          }\n    /** @nocollapse */ static           isUnion (x: any): x is Union_          { return x && x.typeId === Type.Union;           }\n    /** @nocollapse */ static isFixedSizeBinary (x: any): x is FixedSizeBinary { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static   isFixedSizeList (x: any): x is FixedSizeList   { return x && x.typeId === Type.FixedSizeList;   }\n    /** @nocollapse */ static             isMap (x: any): x is Map_            { return x && x.typeId === Type.Map;             }\n    /** @nocollapse */ static      isDictionary (x: any): x is Dictionary      { return x && x.typeId === Type.Dictionary;      }\n\n    public get typeId(): TType { return <any> Type.NONE; }\n    public compareTo(other: DataType): other is TypeToDataType<TType> {\n        return comparer.visit(this, other);\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: DataType) => {\n        (<any> proto).children = null;\n        (<any> proto).ArrayType = Array;\n        return proto[Symbol.toStringTag] = 'DataType';\n    })(DataType.prototype);\n}\n\n/** @ignore */\nexport interface Null extends DataType<Type.Null> { TArray: void; TValue: null; }\n/** @ignore */\nexport class Null extends DataType<Type.Null> {\n    public toString() { return `Null`; }\n    public get typeId() { return Type.Null as Type.Null; }\n    protected static [Symbol.toStringTag] = ((proto: Null) => {\n        return proto[Symbol.toStringTag] = 'Null';\n    })(Null.prototype);\n}\n\n/** @ignore */\ntype Ints = Type.Int | Type.Int8 | Type.Int16 | Type.Int32 | Type.Int64 | Type.Uint8 | Type.Uint16 | Type.Uint32 | Type.Uint64;\n/** @ignore */\ntype IType = {\n    [Type.Int   ]: { bitWidth: IntBitWidth; isSigned: true | false; TArray: IntArray;    TValue: number | bigint | Int32Array | Uint32Array; };\n    [Type.Int8  ]: { bitWidth:           8; isSigned: true;         TArray: Int8Array;   TValue: number; };\n    [Type.Int16 ]: { bitWidth:          16; isSigned: true;         TArray: Int16Array;  TValue: number; };\n    [Type.Int32 ]: { bitWidth:          32; isSigned: true;         TArray: Int32Array;  TValue: number; };\n    [Type.Int64 ]: { bitWidth:          64; isSigned: true;         TArray: Int32Array;  TValue: bigint | Int32Array | Uint32Array; };\n    [Type.Uint8 ]: { bitWidth:           8; isSigned: false;        TArray: Uint8Array;  TValue: number; };\n    [Type.Uint16]: { bitWidth:          16; isSigned: false;        TArray: Uint16Array; TValue: number; };\n    [Type.Uint32]: { bitWidth:          32; isSigned: false;        TArray: Uint32Array; TValue: number; };\n    [Type.Uint64]: { bitWidth:          64; isSigned: false;        TArray: Uint32Array; TValue: bigint | Int32Array | Uint32Array; };\n};\n\n/** @ignore */\ninterface Int_<T extends Ints = Ints> extends DataType<T> { TArray: IType[T]['TArray']; TValue: IType[T]['TValue']; }\n/** @ignore */\nclass Int_<T extends Ints = Ints> extends DataType<T> {\n    constructor(public readonly isSigned: IType[T]['isSigned'],\n                public readonly bitWidth: IType[T]['bitWidth']) {\n        super();\n    }\n    public get typeId() { return Type.Int as T; }\n    public get ArrayType(): TypedArrayConstructor<IType[T]['TArray']> {\n        switch (this.bitWidth) {\n            case  8: return this.isSigned ?  Int8Array :  Uint8Array;\n            case 16: return this.isSigned ? Int16Array : Uint16Array;\n            case 32: return this.isSigned ? Int32Array : Uint32Array;\n            case 64: return this.isSigned ? Int32Array : Uint32Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n    protected static [Symbol.toStringTag] = ((proto: Int_) => {\n        (<any> proto).isSigned = null;\n        (<any> proto).bitWidth = null;\n        return proto[Symbol.toStringTag] = 'Int';\n    })(Int_.prototype);\n}\n\nexport { Int_ as Int };\n\n/** @ignore */\nexport class Int8 extends Int_<Type.Int8> { constructor() { super(true, 8); } }\n/** @ignore */\nexport class Int16 extends Int_<Type.Int16> { constructor() { super(true, 16); } }\n/** @ignore */\nexport class Int32 extends Int_<Type.Int32> { constructor() { super(true, 32); } }\n/** @ignore */\nexport class Int64 extends Int_<Type.Int64> { constructor() { super(true, 64); } }\n/** @ignore */\nexport class Uint8 extends Int_<Type.Uint8> { constructor() { super(false, 8); } }\n/** @ignore */\nexport class Uint16 extends Int_<Type.Uint16> { constructor() { super(false, 16); } }\n/** @ignore */\nexport class Uint32 extends Int_<Type.Uint32> { constructor() { super(false, 32); } }\n/** @ignore */\nexport class Uint64 extends Int_<Type.Uint64> { constructor() { super(false, 64); } }\n\nObject.defineProperty(Int8.prototype, 'ArrayType', { value: Int8Array });\nObject.defineProperty(Int16.prototype, 'ArrayType', { value: Int16Array });\nObject.defineProperty(Int32.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Int64.prototype, 'ArrayType', { value: Int32Array });\nObject.defineProperty(Uint8.prototype, 'ArrayType', { value: Uint8Array });\nObject.defineProperty(Uint16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Uint32.prototype, 'ArrayType', { value: Uint32Array });\nObject.defineProperty(Uint64.prototype, 'ArrayType', { value: Uint32Array });\n\n/** @ignore */\ntype Floats = Type.Float | Type.Float16 | Type.Float32 | Type.Float64;\n/** @ignore */\ntype FType = {\n    [Type.Float  ]: { precision: Precision;        TArray: FloatArray;    TValue: number; };\n    [Type.Float16]: { precision: Precision.HALF;   TArray: Uint16Array;   TValue: number; };\n    [Type.Float32]: { precision: Precision.SINGLE; TArray: Float32Array;  TValue: number; };\n    [Type.Float64]: { precision: Precision.DOUBLE; TArray: Float64Array;  TValue: number; };\n};\n\n/** @ignore */\nexport interface Float<T extends Floats = Floats> extends DataType<T> { TArray: FType[T]['TArray']; TValue: number; }\n/** @ignore */\nexport class Float<T extends Floats = Floats> extends DataType<T> {\n    constructor(public readonly precision: Precision) {\n        super();\n    }\n    public get typeId() { return Type.Float as T; }\n    public get ArrayType(): TypedArrayConstructor<FType[T]['TArray']> {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    public toString() { return `Float${(this.precision << 5) || 16}`; }\n    protected static [Symbol.toStringTag] = ((proto: Float) => {\n        (<any> proto).precision = null;\n        return proto[Symbol.toStringTag] = 'Float';\n    })(Float.prototype);\n}\n\n/** @ignore */\nexport class Float16 extends Float<Type.Float16> { constructor() { super(Precision.HALF); } }\n/** @ignore */\nexport class Float32 extends Float<Type.Float32> { constructor() { super(Precision.SINGLE); } }\n/** @ignore */\nexport class Float64 extends Float<Type.Float64> { constructor() { super(Precision.DOUBLE); } }\n\nObject.defineProperty(Float16.prototype, 'ArrayType', { value: Uint16Array });\nObject.defineProperty(Float32.prototype, 'ArrayType', { value: Float32Array });\nObject.defineProperty(Float64.prototype, 'ArrayType', { value: Float64Array });\n\n/** @ignore */\nexport interface Binary extends DataType<Type.Binary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Binary extends DataType<Type.Binary> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Binary as Type.Binary; }\n    public toString() { return `Binary`; }\n    protected static [Symbol.toStringTag] = ((proto: Binary) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Binary';\n    })(Binary.prototype);\n}\n\n/** @ignore */\nexport interface Utf8 extends DataType<Type.Utf8> { TArray: Uint8Array; TValue: string; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Utf8 extends DataType<Type.Utf8> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Utf8 as Type.Utf8; }\n    public toString() { return `Utf8`; }\n    protected static [Symbol.toStringTag] = ((proto: Utf8) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Utf8';\n    })(Utf8.prototype);\n}\n\n/** @ignore */\nexport interface Bool extends DataType<Type.Bool> { TArray: Uint8Array; TValue: boolean; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class Bool extends DataType<Type.Bool> {\n    constructor() {\n        super();\n    }\n    public get typeId() { return Type.Bool as Type.Bool; }\n    public toString() { return `Bool`; }\n    protected static [Symbol.toStringTag] = ((proto: Bool) => {\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'Bool';\n    })(Bool.prototype);\n}\n\n/** @ignore */\nexport interface Decimal extends DataType<Type.Decimal> { TArray: Uint32Array; TValue: Uint32Array; ArrayType: TypedArrayConstructor<Uint32Array>; }\n/** @ignore */\nexport class Decimal extends DataType<Type.Decimal> {\n    constructor(public readonly scale: number,\n                public readonly precision: number) {\n        super();\n    }\n    public get typeId() { return Type.Decimal as Type.Decimal; }\n    public toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n    protected static [Symbol.toStringTag] = ((proto: Decimal) => {\n        (<any> proto).scale = null;\n        (<any> proto).precision = null;\n        (<any> proto).ArrayType = Uint32Array;\n        return proto[Symbol.toStringTag] = 'Decimal';\n    })(Decimal.prototype);\n}\n\n/** @ignore */\nexport type Dates = Type.Date | Type.DateDay | Type.DateMillisecond;\n/** @ignore */\nexport interface Date_<T extends Dates = Dates> extends DataType<T> { TArray: Int32Array; TValue: Date; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nexport class Date_<T extends Dates = Dates> extends DataType<T> {\n    constructor(public readonly unit: DateUnit) {\n        super();\n    }\n    public get typeId() { return Type.Date as T; }\n    public toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Date_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Date';\n    })(Date_.prototype);\n}\n\n/** @ignore */\nexport class DateDay extends Date_<Type.DateDay> { constructor() { super(DateUnit.DAY); } }\n/** @ignore */\nexport class DateMillisecond extends Date_<Type.DateMillisecond> { constructor() { super(DateUnit.MILLISECOND); } }\n\n/** @ignore */\ntype Times = Type.Time | Type.TimeSecond | Type.TimeMillisecond | Type.TimeMicrosecond | Type.TimeNanosecond;\n/** @ignore */\ntype TimesType = {\n    [Type.Time           ]: { unit: TimeUnit;             TValue: number | Int32Array };\n    [Type.TimeSecond     ]: { unit: TimeUnit.SECOND;      TValue: number;             };\n    [Type.TimeMillisecond]: { unit: TimeUnit.MILLISECOND; TValue: number;             };\n    [Type.TimeMicrosecond]: { unit: TimeUnit.MICROSECOND; TValue: Int32Array;         };\n    [Type.TimeNanosecond ]: { unit: TimeUnit.NANOSECOND;  TValue: Int32Array;         };\n};\n\n/** @ignore */\ninterface Time_<T extends Times = Times> extends DataType<T> { TArray: Int32Array; TValue: TimesType[T]['TValue']; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Time_<T extends Times = Times> extends DataType<T> {\n    constructor(public readonly unit: TimesType[T]['unit'],\n                public readonly bitWidth: TimeBitWidth) {\n        super();\n    }\n    public get typeId() { return Type.Time as T; }\n    public toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Time_) => {\n        (<any> proto).unit = null;\n        (<any> proto).bitWidth = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Time';\n    })(Time_.prototype);\n}\n\nexport { Time_ as Time };\n\n/** @ignore */\nexport class TimeSecond extends Time_<Type.TimeSecond> { constructor() { super(TimeUnit.SECOND, 32); } }\n/** @ignore */\nexport class TimeMillisecond extends Time_<Type.TimeMillisecond> { constructor() { super(TimeUnit.MILLISECOND, 32); } }\n/** @ignore */\nexport class TimeMicrosecond extends Time_<Type.TimeMicrosecond> { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n/** @ignore */\nexport class TimeNanosecond extends Time_<Type.TimeNanosecond> { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\n/** @ignore */\ntype Timestamps = Type.Timestamp | Type.TimestampSecond | Type.TimestampMillisecond | Type.TimestampMicrosecond | Type.TimestampNanosecond;\n/** @ignore */\ninterface Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> { TArray: Int32Array; TValue: number; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Timestamp_<T extends Timestamps = Timestamps> extends DataType<T> {\n    constructor(public readonly unit: TimeUnit,\n                public readonly timezone?: string | null) {\n        super();\n    }\n    public get typeId() { return Type.Timestamp as T; }\n    public toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Timestamp_) => {\n        (<any> proto).unit = null;\n        (<any> proto).timezone = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Timestamp';\n    })(Timestamp_.prototype);\n}\n\nexport { Timestamp_ as Timestamp };\n\n/** @ignore */\nexport class TimestampSecond extends Timestamp_<Type.TimestampSecond> { constructor(timezone?: string | null) { super(TimeUnit.SECOND, timezone); } }\n/** @ignore */\nexport class TimestampMillisecond extends Timestamp_<Type.TimestampMillisecond> { constructor(timezone?: string | null) { super(TimeUnit.MILLISECOND, timezone); } }\n/** @ignore */\nexport class TimestampMicrosecond extends Timestamp_<Type.TimestampMicrosecond> { constructor(timezone?: string | null) { super(TimeUnit.MICROSECOND, timezone); } }\n/** @ignore */\nexport class TimestampNanosecond extends Timestamp_<Type.TimestampNanosecond> { constructor(timezone?: string | null) { super(TimeUnit.NANOSECOND, timezone); } }\n\n/** @ignore */\ntype Intervals = Type.Interval | Type.IntervalDayTime | Type.IntervalYearMonth;\n/** @ignore */\ninterface Interval_<T extends Intervals = Intervals> extends DataType<T> { TArray: Int32Array; TValue: Int32Array; ArrayType: TypedArrayConstructor<Int32Array>; }\n/** @ignore */\nclass Interval_<T extends Intervals = Intervals> extends DataType<T> {\n    constructor(public readonly unit: IntervalUnit) {\n        super();\n    }\n    public get typeId() { return Type.Interval as T; }\n    public toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Interval_) => {\n        (<any> proto).unit = null;\n        (<any> proto).ArrayType = Int32Array;\n        return proto[Symbol.toStringTag] = 'Interval';\n    })(Interval_.prototype);\n}\n\nexport { Interval_ as Interval };\n\n/** @ignore */\nexport class IntervalDayTime extends Interval_<Type.IntervalDayTime> { constructor() { super(IntervalUnit.DAY_TIME); } }\n/** @ignore */\nexport class IntervalYearMonth extends Interval_<Type.IntervalYearMonth> { constructor() { super(IntervalUnit.YEAR_MONTH); } }\n\n/** @ignore */\nexport interface List<T extends DataType = any> extends DataType<Type.List, { [0]: T }>  { TArray: IterableArrayLike<T>; TValue: V<T>; }\n/** @ignore */\nexport class List<T extends DataType = any> extends DataType<Type.List, { [0]: T }> {\n    constructor(child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public readonly children: Field<T>[];\n    public get typeId() { return Type.List as Type.List; }\n    public toString() { return `List<${this.valueType}>`; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    protected static [Symbol.toStringTag] = ((proto: List) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'List';\n    })(List.prototype);\n}\n\n/** @ignore */\nexport interface Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct> { TArray: IterableArrayLike<RowLike<T>>; TValue: RowLike<T>; dataTypes: T; }\n/** @ignore */\nexport class Struct<T extends { [key: string]: DataType } = any> extends DataType<Type.Struct, T> {\n    public readonly children: Field<T[keyof T]>[];\n    constructor(children: Field<T[keyof T]>[]) {\n        super();\n        this.children = children;\n    }\n    public get typeId() { return Type.Struct as Type.Struct; }\n    public toString() { return `Struct<{${this.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Struct) => {\n        (<any> proto).children = null;\n        return proto[Symbol.toStringTag] = 'Struct';\n    })(Struct.prototype);\n}\n\n/** @ignore */\ntype Unions = Type.Union | Type.DenseUnion | Type.SparseUnion;\n/** @ignore */\ninterface Union_<T extends Unions = Unions> extends DataType<T> { TArray: Int8Array; TValue: any; ArrayType: TypedArrayConstructor<Int8Array>; }\n/** @ignore */\nclass Union_<T extends Unions = Unions> extends DataType<T> {\n    public readonly mode: UnionMode;\n    public readonly typeIds: Int32Array;\n    public readonly children: Field<any>[];\n    public readonly typeIdToChildIndex: { [key: number]: number };\n    constructor(mode: UnionMode,\n                typeIds: number[] | Int32Array,\n                children: Field<any>[]) {\n        super();\n        this.mode = mode;\n        this.children = children;\n        this.typeIds = typeIds = Int32Array.from(typeIds);\n        this.typeIdToChildIndex = typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null) as { [key: number]: number });\n    }\n    public get typeId() { return Type.Union as T; }\n    public toString() { return `${this[Symbol.toStringTag]}<${\n        this.children.map((x) => `${x.type}`).join(` | `)\n    }>`; }\n    protected static [Symbol.toStringTag] = ((proto: Union_) => {\n        (<any> proto).mode = null;\n        (<any> proto).typeIds = null;\n        (<any> proto).children = null;\n        (<any> proto).typeIdToChildIndex = null;\n        (<any> proto).ArrayType = Int8Array;\n        return proto[Symbol.toStringTag] = 'Union';\n    })(Union_.prototype);\n}\n\nexport { Union_ as Union };\n\n/** @ignore */\nexport class DenseUnion extends Union_<Type.DenseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport class SparseUnion extends Union_<Type.SparseUnion> {\n    constructor(typeIds: number[] | Int32Array, children: Field[]) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\n\n/** @ignore */\nexport interface FixedSizeBinary extends DataType<Type.FixedSizeBinary> { TArray: Uint8Array; TValue: Uint8Array; ArrayType: TypedArrayConstructor<Uint8Array>; }\n/** @ignore */\nexport class FixedSizeBinary extends DataType<Type.FixedSizeBinary> {\n    constructor(public readonly byteWidth: number) {\n        super();\n    }\n    public get typeId() { return Type.FixedSizeBinary as Type.FixedSizeBinary; }\n    public toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeBinary) => {\n        (<any> proto).byteWidth = null;\n        (<any> proto).ArrayType = Uint8Array;\n        return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n    })(FixedSizeBinary.prototype);\n}\n\n/** @ignore */\nexport interface FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList> { TArray: IterableArrayLike<T['TArray']>; TValue: V<T>; }\n/** @ignore */\nexport class FixedSizeList<T extends DataType = any> extends DataType<Type.FixedSizeList, { [0]: T }> {\n    public readonly children: Field<T>[];\n    constructor(public readonly listSize: number, child: Field<T>) {\n        super();\n        this.children = [child];\n    }\n    public get typeId() { return Type.FixedSizeList as Type.FixedSizeList; }\n    public get valueType(): T { return this.children[0].type as T; }\n    public get valueField(): Field<T> { return this.children[0] as Field<T>; }\n    public get ArrayType(): T['ArrayType'] { return this.valueType.ArrayType; }\n    public toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n    protected static [Symbol.toStringTag] = ((proto: FixedSizeList) => {\n        (<any> proto).children = null;\n        (<any> proto).listSize = null;\n        return proto[Symbol.toStringTag] = 'FixedSizeList';\n    })(FixedSizeList.prototype);\n}\n\n/** @ignore */\nexport interface Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    TArray: IterableArrayLike<Map<TKey['TValue'], TValue['TValue'] | null>>;\n    TChild: Struct<{ key: TKey, value: TValue }>;\n    TValue: MapLike<TKey, TValue>;\n}\n\n/** @ignore */\nexport class Map_<TKey extends DataType = any, TValue extends DataType = any> extends DataType<Type.Map> {\n    constructor(child: Field<Struct<{ key: TKey, value: TValue }>>, keysSorted = false) {\n        super();\n        this.children = [child];\n        this.keysSorted = keysSorted;\n    }\n    public readonly keysSorted: boolean;\n    public readonly children: Field<Struct<{ key: TKey, value: TValue }>>[];\n    public get typeId() { return Type.Map as Type.Map; }\n    public get keyType(): TKey { return this.children[0].type.children[0].type as TKey; }\n    public get valueType(): TValue { return this.children[0].type.children[1].type as TValue; }\n    public toString() { return `Map<{${this.children[0].type.children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Map_) => {\n        (<any> proto).children = null;\n        (<any> proto).keysSorted = null;\n        return proto[Symbol.toStringTag] = 'Map_';\n    })(Map_.prototype);\n}\n\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\n\n/** @ignore */\nexport type TKeys = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32;\n\n/** @ignore */\nexport interface Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> { TArray: TKey['TArray']; TValue: T['TValue']; }\n/** @ignore */\nexport class Dictionary<T extends DataType = any, TKey extends TKeys = TKeys> extends DataType<Type.Dictionary> {\n    public readonly id: number;\n    public readonly indices: TKey;\n    public readonly dictionary: T;\n    public readonly isOrdered: boolean;\n    constructor(dictionary: T, indices: TKey, id?: Long | number | null, isOrdered?: boolean | null) {\n        super();\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    public get typeId() { return Type.Dictionary as Type.Dictionary; }\n    public get children() { return this.dictionary.children; }\n    public get valueType(): T { return this.dictionary as T; }\n    public get ArrayType(): T['ArrayType'] { return this.dictionary.ArrayType; }\n    public toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n    protected static [Symbol.toStringTag] = ((proto: Dictionary) => {\n        (<any> proto).id = null;\n        (<any> proto).indices = null;\n        (<any> proto).isOrdered = null;\n        (<any> proto).dictionary = null;\n        return proto[Symbol.toStringTag] = 'Dictionary';\n    })(Dictionary.prototype);\n}\n\n/** @ignore */\nexport interface IterableArrayLike<T = any> extends ArrayLike<T>, Iterable<T> {}\n/** @ignore */\nexport type FloatArray = Uint16Array | Float32Array | Float64Array;\n/** @ignore */\nexport type IntArray = Int8Array | Int16Array | Int32Array | Uint8Array | Uint16Array | Uint32Array;\n\n/** @ignore */\nexport function strideForType(type: DataType) {\n    let t: any = type;\n    switch (type.typeId) {\n        case Type.Decimal: return 4;\n        case Type.Timestamp: return 2;\n        case Type.Date: return 1 + (t as Date_).unit;\n        case Type.Interval: return 1 + (t as Interval_).unit;\n        case Type.Int: return 1 + +((t as Int_).bitWidth > 32);\n        case Type.Time: return 1 + +((t as Time_).bitWidth > 32);\n        case Type.FixedSizeList: return (t as FixedSizeList).listSize;\n        case Type.FixedSizeBinary: return (t as FixedSizeBinary).byteWidth;\n        default: return 1;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { truncateBitmap } from './util/bit';\nimport { popcnt_bit_range } from './util/bit';\nimport { BufferType, UnionMode, Type } from './enum';\nimport { DataType, SparseUnion, DenseUnion, strideForType } from './type';\nimport { toArrayBufferView, toUint8Array, toInt32Array } from './util/buffer';\nimport {\n    Dictionary,\n    Null, Int, Float,\n    Binary, Bool, Utf8, Decimal,\n    Date_, Time, Timestamp, Interval,\n    List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_,\n} from './type';\n\n// When slicing, we do not know the null count of the sliced range without\n// doing some computation. To avoid doing this eagerly, we set the null count\n// to -1 (any negative number will do). When Vector.nullCount is called the\n// first time, the null count will be computed. See ARROW-33\n/** @ignore */ export type kUnknownNullCount = -1;\n/** @ignore */ export const kUnknownNullCount = -1;\n\n/** @ignore */ export type NullBuffer = Uint8Array | null | undefined;\n/** @ignore */ export type TypeIdsBuffer = Int8Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type ValueOffsetsBuffer = Int32Array  | ArrayLike<number> | Iterable<number> | undefined;\n/** @ignore */ export type DataBuffer<T extends DataType> = T['TArray'] | ArrayLike<number> | Iterable<number> | undefined;\n\n/** @ignore */\nexport interface Buffers<T extends DataType> {\n      [BufferType.OFFSET]: Int32Array;\n        [BufferType.DATA]: T['TArray'];\n    [BufferType.VALIDITY]: Uint8Array;\n        [BufferType.TYPE]: T['TArray'];\n}\n\n/** @ignore */\nexport interface Data<T extends DataType = DataType> {\n    readonly TType: T['TType'];\n    readonly TArray: T['TArray'];\n    readonly TValue: T['TValue'];\n}\n\n/** @ignore */\nexport class Data<T extends DataType = DataType> {\n\n    public readonly type: T;\n    public readonly length: number;\n    public readonly offset: number;\n    public readonly stride: number;\n    public readonly childData: Data[];\n\n    /**\n     * The dictionary for this Vector, if any. Only used for Dictionary type.\n     */\n    public dictionary?: Vector;\n\n    public readonly values: Buffers<T>[BufferType.DATA];\n    // @ts-ignore\n    public readonly typeIds: Buffers<T>[BufferType.TYPE];\n    // @ts-ignore\n    public readonly nullBitmap: Buffers<T>[BufferType.VALIDITY];\n    // @ts-ignore\n    public readonly valueOffsets: Buffers<T>[BufferType.OFFSET];\n\n    public get typeId(): T['TType'] { return this.type.typeId; }\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n    public get buffers() {\n        return [this.valueOffsets, this.values, this.nullBitmap, this.typeIds] as Buffers<T>;\n    }\n    public get byteLength(): number {\n        let byteLength = 0;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n        valueOffsets && (byteLength += valueOffsets.byteLength);\n        values       && (byteLength += values.byteLength);\n        nullBitmap   && (byteLength += nullBitmap.byteLength);\n        typeIds      && (byteLength += typeIds.byteLength);\n        return this.childData.reduce((byteLength, child) => byteLength + child.byteLength, byteLength);\n    }\n\n    protected _nullCount: number | kUnknownNullCount;\n\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap: Uint8Array | undefined;\n        if (nullCount <= kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n\n    constructor(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector) {\n        this.type = type;\n        this.dictionary = dictionary;\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this.childData = (childData || []).map((x) => x instanceof Data ? x : x.data) as Data[];\n        let buffer: Buffers<T>[keyof Buffers<T>];\n        if (buffers instanceof Data) {\n            this.stride = buffers.stride;\n            this.values = buffers.values;\n            this.typeIds = buffers.typeIds;\n            this.nullBitmap = buffers.nullBitmap;\n            this.valueOffsets = buffers.valueOffsets;\n        } else {\n            this.stride = strideForType(type);\n            if (buffers) {\n                (buffer = (buffers as Buffers<T>)[0]) && (this.valueOffsets = buffer);\n                (buffer = (buffers as Buffers<T>)[1]) && (this.values = buffer);\n                (buffer = (buffers as Buffers<T>)[2]) && (this.nullBitmap = buffer);\n                (buffer = (buffers as Buffers<T>)[3]) && (this.typeIds = buffer);\n            }\n        }\n    }\n\n    public clone<R extends DataType>(type: R, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers: Buffers<R> = <any> this, childData: (Data | Vector)[] = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData, this.dictionary);\n    }\n\n    public slice(offset: number, length: number): Data<T> {\n        const { stride, typeId, childData } = this;\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const childStride = typeId === 16 /* FixedSizeList */ ? stride : 1;\n        const buffers = this._sliceBuffers(offset, length, stride, typeId);\n        return this.clone<T>(this.type, this.offset + offset, length, nullCount, buffers,\n            // Don't slice children if we have value offsets (the variable-width types)\n            (!childData.length || this.valueOffsets) ? childData : this._sliceChildren(childData, childStride * offset, childStride * length));\n    }\n\n    public _changeLengthAndBackfillNullBitmap(newLength: number): Data<T> {\n        if (this.typeId === Type.Null) {\n            return this.clone(this.type, 0, newLength, 0);\n        }\n        const { length, nullCount } = this;\n        // start initialized with 0s (nulls), then fill from 0 to length with 1s (not null)\n        const bitmap = new Uint8Array(((newLength + 63) & ~63) >> 3).fill(255, 0, length >> 3);\n        // set all the bits in the last byte (up to bit `length - length % 8`) to 1 (not null)\n        bitmap[length >> 3] = (1 << (length - (length & ~7))) - 1;\n        // if we have a nullBitmap, truncate + slice and set it over the pre-filled 1s\n        if (nullCount > 0) {\n            bitmap.set(truncateBitmap(this.offset, length, this.nullBitmap), 0);\n        }\n        const buffers = this.buffers;\n        buffers[BufferType.VALIDITY] = bitmap;\n        return this.clone(this.type, 0, newLength, nullCount + (newLength - length), buffers);\n    }\n\n    protected _sliceBuffers(offset: number, length: number, stride: number, typeId: T['TType']): Buffers<T> {\n        let arr: any, { buffers } = this;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = arr.subarray(offset, offset + length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = arr.subarray(offset, offset + length + 1)) ||\n        // Otherwise if no offsets, slice the data buffer. Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = typeId === 6 ? arr : arr.subarray(stride * offset, stride * (offset + length)));\n        return buffers;\n    }\n\n    protected _sliceChildren(childData: Data[], offset: number, length: number): Data[] {\n        return childData.map((child) => child.slice(offset, length));\n    }\n\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    public static new<T extends DataType>(type: T, offset: number, length: number, nullCount?: number, buffers?: Partial<Buffers<T>> | Data<T>, childData?: (Data | Vector)[], dictionary?: Vector): Data<T> {\n        if (buffers instanceof Data) { buffers = buffers.buffers; } else if (!buffers) { buffers = [] as Partial<Buffers<T>>; }\n        switch (type.typeId) {\n            case Type.Null:            return <unknown> Data.Null(            <unknown> type as Null,            offset, length) as Data<T>;\n            case Type.Int:             return <unknown> Data.Int(             <unknown> type as Int,             offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Dictionary:      return <unknown> Data.Dictionary(      <unknown> type as Dictionary,      offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || [], dictionary!) as Data<T>;\n            case Type.Float:           return <unknown> Data.Float(           <unknown> type as Float,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Bool:            return <unknown> Data.Bool(            <unknown> type as Bool,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Decimal:         return <unknown> Data.Decimal(         <unknown> type as Decimal,         offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Date:            return <unknown> Data.Date(            <unknown> type as Date_,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Time:            return <unknown> Data.Time(            <unknown> type as Time,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Timestamp:       return <unknown> Data.Timestamp(       <unknown> type as Timestamp,       offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Interval:        return <unknown> Data.Interval(        <unknown> type as Interval,        offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.FixedSizeBinary: return <unknown> Data.FixedSizeBinary( <unknown> type as FixedSizeBinary, offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Binary:          return <unknown> Data.Binary(          <unknown> type as Binary,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.Utf8:            return <unknown> Data.Utf8(            <unknown> type as Utf8,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], buffers[BufferType.DATA] || []) as Data<T>;\n            case Type.List:            return <unknown> Data.List(            <unknown> type as List,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.FixedSizeList:   return <unknown> Data.FixedSizeList(   <unknown> type as FixedSizeList,   offset, length, nullCount || 0, buffers[BufferType.VALIDITY], (childData || [])[0]) as Data<T>;\n            case Type.Struct:          return <unknown> Data.Struct(          <unknown> type as Struct,          offset, length, nullCount || 0, buffers[BufferType.VALIDITY], childData || []) as Data<T>;\n            case Type.Map:             return <unknown> Data.Map(             <unknown> type as Map_,            offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.OFFSET] || [], (childData || [])[0]) as Data<T>;\n            case Type.Union:           return <unknown> Data.Union(           <unknown> type as Union,           offset, length, nullCount || 0, buffers[BufferType.VALIDITY], buffers[BufferType.TYPE] || [], buffers[BufferType.OFFSET] || childData, childData) as Data<T>;\n        }\n        throw new Error(`Unrecognized typeId ${type.typeId}`);\n    }\n\n    /** @nocollapse */\n    public static Null<T extends Null>(type: T, offset: number, length: number) {\n        return new Data(type, offset, length, 0);\n    }\n    /** @nocollapse */\n    public static Int<T extends Int>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Dictionary<T extends Dictionary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>, dictionary: Vector<T['dictionary']>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView<T['TArray']>(type.indices.ArrayType, data), toUint8Array(nullBitmap)], [], dictionary);\n    }\n    /** @nocollapse */\n    public static Float<T extends Float>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Bool<T extends Bool>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Decimal<T extends Decimal>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Date<T extends Date_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Time<T extends Time>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Timestamp<T extends Timestamp>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Interval<T extends Interval>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static FixedSizeBinary<T extends FixedSizeBinary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, data: DataBuffer<T>) {\n        return new Data(type, offset, length, nullCount, [undefined, toArrayBufferView(type.ArrayType, data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Binary<T extends Binary>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static Utf8<T extends Utf8>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, data: Uint8Array) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), toUint8Array(data), toUint8Array(nullBitmap)]);\n    }\n    /** @nocollapse */\n    public static List<T extends List>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static FixedSizeList<T extends FixedSizeList>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, child: Data<T['valueType']> | Vector<T['valueType']>) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    /** @nocollapse */\n    public static Struct<T extends Struct>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, children: (Data | Vector)[]) {\n        return new Data(type, offset, length, nullCount, [undefined, undefined, toUint8Array(nullBitmap)], children);\n    }\n    /** @nocollapse */\n    public static Map<T extends Map_>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, valueOffsets: ValueOffsetsBuffer, child: (Data | Vector)) {\n        return new Data(type, offset, length, nullCount, [toInt32Array(valueOffsets), undefined, toUint8Array(nullBitmap)], [child]);\n    }\n    public static Union<T extends SparseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, children: (Data | Vector)[], _?: any): Data<T>;\n    public static Union<T extends DenseUnion>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsets: ValueOffsetsBuffer, children: (Data | Vector)[]): Data<T>;\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]): Data<T>;\n    /** @nocollapse */\n    public static Union<T extends Union>(type: T, offset: number, length: number, nullCount: number, nullBitmap: NullBuffer, typeIds: TypeIdsBuffer, valueOffsetsOrChildren: ValueOffsetsBuffer | (Data | Vector)[], children?: (Data | Vector)[]) {\n        const buffers = <unknown> [\n            undefined, undefined,\n            toUint8Array(nullBitmap),\n            toArrayBufferView(type.ArrayType, typeIds)\n        ] as Partial<Buffers<T>>;\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildren as (Data | Vector)[]);\n        }\n        buffers[BufferType.OFFSET] = toInt32Array(<ValueOffsetsBuffer> valueOffsetsOrChildren);\n        return new Data(type, offset, length, nullCount, buffers, children);\n    }\n}\n\n(Data.prototype as any).childData = Object.freeze([]);\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */ const undf = void (0);\n\n/** @ignore */\nexport function valueToString(x: any) {\n    if (x === null) { return 'null'; }\n    if (x === undf) { return 'undefined'; }\n    switch (typeof x) {\n        case 'number': return `${x}`;\n        case 'bigint': return `${x}`;\n        case 'string': return `\"${x}\"`;\n    }\n    // If [Symbol.toPrimitive] is implemented (like in BN)\n    // use it instead of JSON.stringify(). This ensures we\n    // print BigInts, Decimals, and Binary in their native\n    // representation\n    if (typeof x[Symbol.toPrimitive] === 'function') {\n        return x[Symbol.toPrimitive]('string');\n    }\n    return ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n *\n * @example\n * console.log(createIsValidFunction([null, 'N/A', NaN]));\n * `function (x) {\n *     if (x !== x) return false;\n *     switch (x) {\n *         case null:\n *         case \"N/A\":\n *             return false;\n *     }\n *     return true;\n * }`\n *\n * @ignore\n * @param nullValues\n */\nexport function createIsValidFunction<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        // @ts-ignore\n        return function isValid(value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { memcpy } from '../util/buffer';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from '../util/compat';\nimport {\n    TypedArray, TypedArrayConstructor,\n    BigIntArray, BigIntArrayConstructor\n} from '../interfaces';\n\n/** @ignore */ type DataValue<T> = T extends TypedArray ? number : T extends BigIntArray ? WideValue<T> : T;\n/** @ignore */ type WideValue<T extends BigIntArray> = T extends BigIntArray ? bigint | Int32Array | Uint32Array : never;\n/** @ignore */ type ArrayCtor<T extends TypedArray | BigIntArray> =\n    T extends TypedArray  ? TypedArrayConstructor<T>  :\n    T extends BigIntArray ? BigIntArrayConstructor<T> :\n    any;\n\n/** @ignore */\nconst roundLengthUpToNearest64Bytes = (len: number, BPE: number) => ((((len * BPE) + 63) & ~63) || 64) / BPE;\n/** @ignore */\nconst sliceOrExtendArray = <T extends TypedArray | BigIntArray>(arr: T, len = 0) => (\n    arr.length >= len ? arr.subarray(0, len) : memcpy(new (arr.constructor as any)(len), arr, 0)\n) as T;\n\n/** @ignore */\nexport interface BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n    readonly offset: number;\n}\n\n/** @ignore */\nexport class BufferBuilder<T extends TypedArray | BigIntArray = any, TValue = DataValue<T>> {\n\n    constructor(buffer: T, stride = 1) {\n        this.buffer = buffer;\n        this.stride = stride;\n        this.BYTES_PER_ELEMENT = buffer.BYTES_PER_ELEMENT;\n        this.ArrayType = buffer.constructor as ArrayCtor<T>;\n        this._resize(this.length = buffer.length / stride | 0);\n    }\n\n    public buffer: T;\n    public length: number;\n    public readonly stride: number;\n    public readonly ArrayType: ArrayCtor<T>;\n    public readonly BYTES_PER_ELEMENT: number;\n\n    public get byteLength() { return this.length * this.stride * this.BYTES_PER_ELEMENT | 0; }\n    public get reservedLength() { return this.buffer.length / this.stride; }\n    public get reservedByteLength() { return this.buffer.byteLength; }\n\n    // @ts-ignore\n    public set(index: number, value: TValue) { return this; }\n    public append(value: TValue) { return this.set(this.length, value); }\n    public reserve(extra: number) {\n        if (extra > 0) {\n            this.length += extra;\n            const stride = this.stride;\n            const length = this.length * stride;\n            const reserved = this.buffer.length;\n            if (length >= reserved) {\n                this._resize(reserved === 0\n                    ? roundLengthUpToNearest64Bytes(length * 1, this.BYTES_PER_ELEMENT)\n                    : roundLengthUpToNearest64Bytes(length * 2, this.BYTES_PER_ELEMENT)\n                );\n            }\n        }\n        return this;\n    }\n    public flush(length = this.length) {\n        length = roundLengthUpToNearest64Bytes(length * this.stride, this.BYTES_PER_ELEMENT);\n        const array = sliceOrExtendArray<T>(this.buffer, length);\n        this.clear();\n        return array;\n    }\n    public clear() {\n        this.length = 0;\n        this._resize(0);\n        return this;\n    }\n    protected _resize(newLength: number) {\n        return this.buffer = <T> memcpy(new this.ArrayType(newLength), this.buffer);\n    }\n}\n\n(BufferBuilder.prototype as any).offset = 0;\n\n/** @ignore */\nexport class DataBufferBuilder<T extends TypedArray> extends BufferBuilder<T, number> {\n    public last() { return this.get(this.length - 1); }\n    public get(index: number) { return this.buffer[index]; }\n    public set(index: number, value: number) {\n        this.reserve(index - this.length + 1);\n        this.buffer[index * this.stride] = value;\n        return this;\n    }\n}\n\n/** @ignore */\nexport class BitmapBufferBuilder extends DataBufferBuilder<Uint8Array> {\n\n    constructor(data = new Uint8Array(0)) { super(data, 1 / 8); }\n\n    public numValid = 0;\n    public get numInvalid() { return this.length - this.numValid; }\n    public get(idx: number) { return this.buffer[idx >> 3] >> idx % 8 & 1; }\n    public set(idx: number, val: number) {\n        const { buffer } = this.reserve(idx - this.length + 1);\n        const byte = idx >> 3, bit = idx % 8, cur = buffer[byte] >> bit & 1;\n        // If `val` is truthy and the current bit is 0, flip it to 1 and increment `numValid`.\n        // If `val` is falsey and the current bit is 1, flip it to 0 and decrement `numValid`.\n        val ? cur === 0 && ((buffer[byte] |=  (1 << bit)), ++this.numValid)\n            : cur === 1 && ((buffer[byte] &= ~(1 << bit)), --this.numValid);\n        return this;\n    }\n    public clear() {\n        this.numValid = 0;\n        return super.clear();\n    }\n}\n\n/** @ignore */\nexport class OffsetsBufferBuilder extends DataBufferBuilder<Int32Array> {\n    constructor(data = new Int32Array(1)) { super(data, 1); }\n    public append(value: number) {\n        return this.set(this.length - 1, value);\n    }\n    public set(index: number, value: number) {\n        const offset = this.length - 1;\n        const buffer = this.reserve(index - offset + 1).buffer;\n        if (offset < index++) {\n            buffer.fill(buffer[offset], offset, index);\n        }\n        buffer[index] = buffer[index - 1] + value;\n        return this;\n    }\n    public flush(length = this.length - 1) {\n        if (length > this.length) {\n            this.set(length - 1, 0);\n        }\n        return super.flush(length + 1);\n    }\n}\n\n/** @ignore */\nexport class WideBufferBuilder<T extends TypedArray, R extends BigIntArray> extends BufferBuilder<T, DataValue<T>> {\n    // @ts-ignore\n    public buffer64: R;\n    // @ts-ignore\n    protected _ArrayType64: BigIntArrayConstructor<R>;\n    public get ArrayType64() {\n        return this._ArrayType64 || (this._ArrayType64 = <BigIntArrayConstructor<R>> (this.buffer instanceof Int32Array ? BigInt64Array : BigUint64Array));\n    }\n    public set(index: number, value: DataValue<T>) {\n        this.reserve(index - this.length + 1);\n        switch (typeof value) {\n            case 'bigint': this.buffer64[index] = value; break;\n            case 'number': this.buffer[index * this.stride] = value; break;\n            default: this.buffer.set(value as TypedArray, index * this.stride);\n        }\n        return this;\n    }\n    protected _resize(newLength: number) {\n        const data = super._resize(newLength);\n        const length = data.byteLength / (this.BYTES_PER_ELEMENT * this.stride);\n        if (BigIntAvailable) {\n            this.buffer64 = new this.ArrayType64(data.buffer, data.byteOffset, length);\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from './vector';\nimport { BufferType } from './enum';\nimport { Data, Buffers } from './data';\nimport { createIsValidFunction } from './builder/valid';\nimport { BuilderType as B, VectorType as V} from './interfaces';\nimport { BufferBuilder, BitmapBufferBuilder, DataBufferBuilder, OffsetsBufferBuilder } from './builder/buffer';\nimport {\n    DataType, strideForType,\n    Float, Int, Decimal, FixedSizeBinary,\n    Date_, Time, Timestamp, Interval,\n    Utf8, Binary, List, Map_\n} from './type';\n\n/**\n * A set of options required to create a `Builder` instance for a given `DataType`.\n * @see {@link Builder}\n */\nexport interface BuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n    children?: { [key: string]: BuilderOptions; } | BuilderOptions[];\n}\n\n/**\n * A set of options to create an Iterable or AsyncIterable `Builder` transform function.\n * @see {@link Builder.throughIterable}\n * @see {@link Builder.throughAsyncIterable}\n */\n\nexport interface IterableBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    highWaterMark?: number;\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/**\n * An abstract base class for types that construct Arrow Vectors from arbitrary JavaScript values.\n *\n * A `Builder` is responsible for writing arbitrary JavaScript values\n * to ArrayBuffers and/or child Builders according to the Arrow specification\n * for each DataType, creating or resizing the underlying ArrayBuffers as necessary.\n *\n * The `Builder` for each Arrow `DataType` handles converting and appending\n * values for a given `DataType`. The high-level {@link Builder.new `Builder.new()`} convenience\n * method creates the specific `Builder` subclass for the supplied `DataType`.\n *\n * Once created, `Builder` instances support both appending values to the end\n * of the `Builder`, and random-access writes to specific indices\n * (`Builder.prototype.append(value)` is a convenience method for\n * `builder.set(builder.length, value)`). Appending or setting values beyond the\n * Builder's current length may cause the builder to grow its underlying buffers\n * or child Builders (if applicable) to accommodate the new values.\n *\n * After enough values have been written to a `Builder`, `Builder.prototype.flush()`\n * will commit the values to the underlying ArrayBuffers (or child Builders). The\n * internal Builder state will be reset, and an instance of `Data<T>` is returned.\n * Alternatively, `Builder.prototype.toVector()` will flush the `Builder` and return\n * an instance of `Vector<T>` instead.\n *\n * When there are no more values to write, use `Builder.prototype.finish()` to\n * finalize the `Builder`. This does not reset the internal state, so it is\n * necessary to call `Builder.prototype.flush()` or `toVector()` one last time\n * if there are still values queued to be flushed.\n *\n * Note: calling `Builder.prototype.finish()` is required when using a `DictionaryBuilder`,\n * because this is when it flushes the values that have been enqueued in its internal\n * dictionary's `Builder`, and creates the `dictionaryVector` for the `Dictionary` `DataType`.\n *\n * ```ts\n * import { Builder, Utf8 } from 'apache-arrow';\n *\n * const utf8Builder = Builder.new({\n *     type: new Utf8(),\n *     nullValues: [null, 'n/a']\n * });\n *\n * utf8Builder\n *     .append('hello')\n *     .append('n/a')\n *     .append('world')\n *     .append(null);\n *\n * const utf8Vector = utf8Builder.finish().toVector();\n *\n * console.log(utf8Vector.toJSON());\n * // > [\"hello\", null, \"world\", null]\n * ```\n *\n * @typeparam T The `DataType` of this `Builder`.\n * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n */\nexport abstract class Builder<T extends DataType = any, TNull = any> {\n\n    /**\n     * Create a `Builder` instance based on the `type` property of the supplied `options` object.\n     * @param {BuilderOptions<T, TNull>} options An object with a required `DataType` instance\n     * and other optional parameters to be passed to the `Builder` subclass for the given `type`.\n     *\n     * @typeparam T The `DataType` of the `Builder` to create.\n     * @typeparam TNull The type(s) of values which will be considered null-value sentinels.\n     * @nocollapse\n     */\n    // @ts-ignore\n    public static new<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {}\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode<T extends DataType = any, TNull = any>(options: import('./io/node/builder').BuilderDuplexOptions<T, TNull>): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughDOM<T extends DataType = any, TNull = any>(options: import('./io/whatwg/builder').BuilderTransformOptions<T, TNull>): import('./io/whatwg/builder').BuilderTransform<T, TNull> {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    /**\n     * Transform a synchronous `Iterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `Iterable` of values to\n     * transform. When called, this function returns an Iterator of `Vector<T>`.\n     *\n     * The resulting `Iterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `Iterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `Iterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `Iterable` of values to\n     *          write, and returns an `Iterator` that yields Vectors according\n     *          to the chunking semantics defined in the `options` argument.\n     * @nocollapse\n     */\n    public static throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughIterable(options);\n    }\n\n    /**\n     * Transform an `AsyncIterable` of arbitrary JavaScript values into a\n     * sequence of Arrow Vector<T> following the chunking semantics defined in\n     * the supplied `options` argument.\n     *\n     * This function returns a function that accepts an `AsyncIterable` of values to\n     * transform. When called, this function returns an AsyncIterator of `Vector<T>`.\n     *\n     * The resulting `AsyncIterator<Vector<T>>` yields Vectors based on the\n     * `queueingStrategy` and `highWaterMark` specified in the `options` argument.\n     *\n     * * If `queueingStrategy` is `\"count\"` (or omitted), The `AsyncIterator<Vector<T>>`\n     *   will flush the underlying `Builder` (and yield a new `Vector<T>`) once the\n     *   Builder's `length` reaches or exceeds the supplied `highWaterMark`.\n     * * If `queueingStrategy` is `\"bytes\"`, the `AsyncIterator<Vector<T>>` will flush\n     *   the underlying `Builder` (and yield a new `Vector<T>`) once its `byteLength`\n     *   reaches or exceeds the supplied `highWaterMark`.\n     *\n     * @param {IterableBuilderOptions<T, TNull>} options An object of properties which determine the `Builder` to create and the chunking semantics to use.\n     * @returns A function which accepts a JavaScript `AsyncIterable` of values\n     *          to write, and returns an `AsyncIterator` that yields Vectors\n     *          according to the chunking semantics defined in the `options`\n     *          argument.\n     * @nocollapse\n     */\n    public static throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>) {\n        return throughAsyncIterable(options);\n    }\n\n    /**\n     * Construct a builder with the given Arrow DataType with optional null values,\n     * which will be interpreted as \"null\" when set or appended to the `Builder`.\n     * @param {{ type: T, nullValues?: any[] }} options A `BuilderOptions` object used to create this `Builder`.\n     */\n    constructor({ 'type': type, 'nullValues': nulls }: BuilderOptions<T, TNull>) {\n        this.type = type;\n        this.children = [];\n        this.nullValues = nulls;\n        this.stride = strideForType(type);\n        this._nulls = new BitmapBufferBuilder();\n        if (nulls && nulls.length > 0) {\n            this._isValid = createIsValidFunction(nulls);\n        }\n    }\n\n    /**\n     * The Builder's `DataType` instance.\n     * @readonly\n     */\n    public type: T;\n    /**\n     * The number of values written to the `Builder` that haven't been flushed yet.\n     * @readonly\n     */\n    public length = 0;\n    /**\n     * A boolean indicating whether `Builder.prototype.finish()` has been called on this `Builder`.\n     * @readonly\n     */\n    public finished = false;\n    /**\n     * The number of elements in the underlying values TypedArray that\n     * represent a single logical element, determined by this Builder's\n     * `DataType`. This is 1 for most types, but is larger when the `DataType`\n     * is `Int64`, `Uint64`, `Decimal`, `DateMillisecond`, certain variants of\n     * `Interval`, `Time`, or `Timestamp`, `FixedSizeBinary`, and `FixedSizeList`.\n     * @readonly\n     */\n    public readonly stride: number;\n    public readonly children: Builder[];\n    /**\n     * The list of null-value sentinels for this `Builder`. When one of these values\n     * is written to the `Builder` (either via `Builder.prototype.set()` or `Builder.prototype.append()`),\n     * a 1-bit is written to this Builder's underlying null BitmapBufferBuilder.\n     * @readonly\n     */\n    public readonly nullValues?: TNull[] | ReadonlyArray<TNull> | null;\n\n    /**\n     * Flush the `Builder` and return a `Vector<T>`.\n     * @returns {Vector<T>} A `Vector<T>` of the flushed values.\n     */\n    public toVector() { return Vector.new(this.flush()); }\n\n    public get ArrayType() { return this.type.ArrayType; }\n    public get nullCount() { return this._nulls.numInvalid; }\n    public get numChildren() { return this.children.length; }\n\n    /**\n     * @returns The aggregate length (in bytes) of the values that have been written.\n     */\n    public get byteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        this._typeIds && (size += this._typeIds.byteLength);\n        return this.children.reduce((size, child) => size + child.byteLength, size);\n    }\n\n    /**\n     * @returns The aggregate number of rows that have been reserved to write new values.\n     */\n    public get reservedLength(): number {\n        return this._nulls.reservedLength;\n    }\n\n    /**\n     * @returns The aggregate length (in bytes) that has been reserved to write new values.\n     */\n    public get reservedByteLength(): number {\n        let size = 0;\n        this._offsets && (size += this._offsets.reservedByteLength);\n        this._values && (size += this._values.reservedByteLength);\n        this._nulls && (size += this._nulls.reservedByteLength);\n        this._typeIds && (size += this._typeIds.reservedByteLength);\n        return this.children.reduce((size, child) => size + child.reservedByteLength, size);\n    }\n\n    // @ts-ignore\n    protected _offsets: DataBufferBuilder<Int32Array>;\n    public get valueOffsets() { return this._offsets ? this._offsets.buffer : null; }\n\n    // @ts-ignore\n    protected _values: BufferBuilder<T['TArray'], any>;\n    public get values() { return this._values ? this._values.buffer : null; }\n\n    protected _nulls: BitmapBufferBuilder;\n    public get nullBitmap() { return this._nulls ? this._nulls.buffer : null; }\n\n    // @ts-ignore\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n    public get typeIds() { return this._typeIds ? this._typeIds.buffer : null; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    /**\n     * Appends a value (or null) to this `Builder`.\n     * This is equivalent to `builder.set(builder.length, value)`.\n     * @param {T['TValue'] | TNull } value The value to append.\n     */\n    public append(value: T['TValue'] | TNull) { return this.set(this.length, value); }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param {T['TValue'] | TNull } value The value to compare against null the value representations\n     */\n    // @ts-ignore\n    public isValid(value: T['TValue'] | TNull): boolean { return this._isValid(value); }\n\n    /**\n     * Write a value (or null-value sentinel) at the supplied index.\n     * If the value matches one of the null-value representations, a 1-bit is\n     * written to the null `BitmapBufferBuilder`. Otherwise, a 0 is written to\n     * the null `BitmapBufferBuilder`, and the value is passed to\n     * `Builder.prototype.setValue()`.\n     * @param {number} index The index of the value to write.\n     * @param {T['TValue'] | TNull } value The value to write at the supplied index.\n     * @returns {this} The updated `Builder` instance.\n     */\n    public set(index: number, value: T['TValue'] | TNull) {\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value);\n        }\n        return this;\n    }\n\n    /**\n     * Write a value to the underlying buffers at the supplied index, bypassing\n     * the null-value check. This is a low-level method that\n     * @param {number} index\n     * @param {T['TValue'] | TNull } value\n     */\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue']) { this._setValue(this, index, value); }\n    public setValid(index: number, valid: boolean) {\n        this.length = this._nulls.set(index, +valid).length;\n        return valid;\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        throw new Error(`Cannot append children to non-nested type \"${this.type}\"`);\n    }\n\n    /**\n     * Retrieve the child `Builder` at the supplied `index`, or null if no child\n     * exists at that index.\n     * @param {number} index The index of the child `Builder` to retrieve.\n     * @returns {Builder | null} The child Builder at the supplied index or null.\n     */\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index] || null;\n    }\n\n    /**\n     * Commit all the values that have been written to their underlying\n     * ArrayBuffers, including any child Builders if applicable, and reset\n     * the internal `Builder` state.\n     * @returns A `Data<T>` of the buffers and childData representing the values written.\n     */\n    public flush() {\n\n        const buffers: any = [];\n        const values =  this._values;\n        const offsets =  this._offsets;\n        const typeIds =  this._typeIds;\n        const { length, nullCount } = this;\n\n        if (typeIds) { /* Unions */\n            buffers[BufferType.TYPE] = typeIds.flush(length);\n            // DenseUnions\n            offsets && (buffers[BufferType.OFFSET] = offsets.flush(length));\n        } else if (offsets) { /* Variable-width primitives (Binary, Utf8) and Lists */\n            // Binary, Utf8\n            values && (buffers[BufferType.DATA] = values.flush(offsets.last()));\n            buffers[BufferType.OFFSET] = offsets.flush(length);\n        } else if (values) { /* Fixed-width primitives (Int, Float, Decimal, Time, Timestamp, and Interval) */\n            buffers[BufferType.DATA] = values.flush(length);\n        }\n\n        nullCount > 0 && (buffers[BufferType.VALIDITY] = this._nulls.flush(length));\n\n        const data = Data.new<T>(\n            this.type, 0, length, nullCount, buffers as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.clear();\n\n        return data;\n    }\n\n    /**\n     * Finalize this `Builder`, and child builders if applicable.\n     * @returns {this} The finalized `Builder` instance.\n     */\n    public finish() {\n        this.finished = true;\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    /**\n     * Clear this Builder's internal state, including child Builders if applicable, and reset the length to 0.\n     * @returns {this} The cleared `Builder` instance.\n     */\n    public clear() {\n        this.length = 0;\n        this._offsets && (this._offsets.clear());\n        this._values && (this._values.clear());\n        this._nulls && (this._nulls.clear());\n        this._typeIds && (this._typeIds.clear());\n        this.children.forEach((child) => child.clear());\n        return this;\n    }\n}\n\n(Builder.prototype as any).length = 1;\n(Builder.prototype as any).stride = 1;\n(Builder.prototype as any).children = null;\n(Builder.prototype as any).finished = false;\n(Builder.prototype as any).nullValues = null;\n(Builder.prototype as any)._isValid = () => true;\n\n/** @ignore */\nexport abstract class FixedWidthBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._values = new DataBufferBuilder(new this.ArrayType(0), this.stride);\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const values = this._values;\n        values.reserve(index - values.length + 1);\n        return super.setValue(index, value);\n    }\n}\n\n/** @ignore */\nexport abstract class VariableWidthBuilder<T extends Binary | Utf8 | List | Map_, TNull = any> extends Builder<T, TNull> {\n    protected _pendingLength: number = 0;\n    protected _offsets: OffsetsBufferBuilder;\n    protected _pending: Map<number, any> | undefined;\n    constructor(opts: BuilderOptions<T, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public setValue(index: number, value: T['TValue']) {\n        const pending = this._pending || (this._pending = new Map());\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.length);\n        this._pendingLength += value.length;\n        pending.set(index, value);\n    }\n    public setValid(index: number, isValid: boolean) {\n        if (!super.setValid(index, isValid)) {\n            (this._pending || (this._pending = new Map())).set(index, undefined);\n            return false;\n        }\n        return true;\n    }\n    public clear() {\n        this._pendingLength = 0;\n        this._pending = undefined;\n        return super.clear();\n    }\n    public flush() {\n        this._flush();\n        return super.flush();\n    }\n    public finish() {\n        this._flush();\n        return super.finish();\n    }\n    protected _flush() {\n        const pending = this._pending;\n        const pendingLength = this._pendingLength;\n        this._pendingLength = 0;\n        this._pending = undefined;\n        if (pending && pending.size > 0) {\n            this._flushPending(pending, pendingLength);\n        }\n        return this;\n    }\n    protected abstract _flushPending(pending: Map<number, any>, pendingLength: number): void;\n}\n\n/** @ignore */\ntype ThroughIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull>) => IterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return function*(source: Iterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n\n/** @ignore */\ntype ThroughAsyncIterable<T extends DataType = any, TNull = any> = (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) => AsyncIterableIterator<V<T>>;\n\n/** @ignore */\nfunction throughAsyncIterable<T extends DataType = any, TNull = any>(options: IterableBuilderOptions<T, TNull>): ThroughAsyncIterable<T, TNull> {\n    const { ['queueingStrategy']: queueingStrategy = 'count' } = options;\n    const { ['highWaterMark']: highWaterMark = queueingStrategy !== 'bytes' ? 1000 : 2 ** 14 } = options;\n    const sizeProperty: 'length' | 'byteLength' = queueingStrategy !== 'bytes' ? 'length' : 'byteLength';\n    return async function* (source: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull>) {\n        let numChunks = 0;\n        let builder = Builder.new(options);\n        for await (const value of source) {\n            if (builder.append(value)[sizeProperty] >= highWaterMark) {\n                ++numChunks && (yield builder.toVector());\n            }\n        }\n        if (builder.finish().length > 0 || numChunks === 0) {\n            yield builder.toVector();\n        }\n    };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { BitmapBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: BuilderOptions<Bool, TNull>) {\n        super(options);\n        this._values = new BitmapBufferBuilder();\n    }\n    public setValue(index: number, value: boolean) {\n        this._values.set(index, +value);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { Builder } from '../builder';\n\n/** @ignore */\nexport class NullBuilder<TNull = any> extends Builder<Null, TNull> {\n    // @ts-ignore\n    public setValue(index: number, value: null) {}\n    public setValid(index: number, valid: boolean) {\n        this.length = Math.max(index + 1, this.length);\n        return valid;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Date_, DateDay, DateMillisecond } from '../type';\n\n/** @ignore */\nexport class DateBuilder<T extends Date_ = Date_, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class DateDayBuilder<TNull = any> extends DateBuilder<DateDay, TNull> {}\n/** @ignore */\nexport class DateMillisecondBuilder<TNull = any> extends DateBuilder<DateMillisecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class DecimalBuilder<TNull = any> extends FixedWidthBuilder<Decimal, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { IntBuilder } from './int';\nimport { Dictionary, DataType } from '../type';\nimport { Builder, BuilderOptions } from '../builder';\n\ntype DictionaryHashFunction = (x: any) => string | number;\n\nexport interface DictionaryBuilderOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    dictionaryHashFunction?: DictionaryHashFunction;\n}\n\n/** @ignore */\nexport class DictionaryBuilder<T extends Dictionary, TNull = any> extends Builder<T, TNull> {\n\n    protected _dictionaryOffset: number;\n    protected _dictionary?: Vector<T['dictionary']>;\n    protected _keysToIndices: { [key: string]: number };\n    public readonly indices: IntBuilder<T['indices']>;\n    public readonly dictionary: Builder<T['dictionary']>;\n\n    constructor({ 'type': type, 'nullValues': nulls, 'dictionaryHashFunction': hashFn }: DictionaryBuilderOptions<T, TNull>) {\n        super({ type: new Dictionary(type.dictionary, type.indices, type.id, type.isOrdered) as T });\n        this._nulls = <any> null;\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        this.indices = Builder.new({ 'type': this.type.indices, 'nullValues': nulls }) as IntBuilder<T['indices']>;\n        this.dictionary = Builder.new({ 'type': this.type.dictionary, 'nullValues': null }) as Builder<T['dictionary']>;\n        if (typeof hashFn === 'function') {\n            this.valueToKey = hashFn;\n        }\n    }\n\n    public get values() { return this.indices.values; }\n    public get nullCount() { return this.indices.nullCount; }\n    public get nullBitmap() { return this.indices.nullBitmap; }\n    public get byteLength() { return this.indices.byteLength + this.dictionary.byteLength; }\n    public get reservedLength() { return this.indices.reservedLength + this.dictionary.reservedLength; }\n    public get reservedByteLength() { return this.indices.reservedByteLength + this.dictionary.reservedByteLength; }\n    public isValid(value: T['TValue'] | TNull) { return this.indices.isValid(value); }\n    public setValid(index: number, valid: boolean) {\n        const indices = this.indices;\n        valid = indices.setValid(index, valid);\n        this.length = indices.length;\n        return valid;\n    }\n    public setValue(index: number, value: T['TValue']) {\n        let keysToIndices = this._keysToIndices;\n        let key = this.valueToKey(value);\n        let idx = keysToIndices[key];\n        if (idx === undefined) {\n            keysToIndices[key] = idx = this._dictionaryOffset + this.dictionary.append(value).length - 1;\n        }\n        return this.indices.setValue(index, idx);\n    }\n    public flush() {\n        const type = this.type;\n        const prev = this._dictionary;\n        const curr = this.dictionary.toVector();\n        const data = this.indices.flush().clone(type);\n        data.dictionary = prev ? prev.concat(curr) : curr;\n        this.finished || (this._dictionaryOffset += curr.length);\n        this._dictionary = data.dictionary as Vector<T['dictionary']>;\n        this.clear();\n        return data;\n    }\n    public finish() {\n        this.indices.finish();\n        this.dictionary.finish();\n        this._dictionaryOffset = 0;\n        this._keysToIndices = Object.create(null);\n        return super.finish();\n    }\n    public clear() {\n        this.indices.clear();\n        this.dictionary.clear();\n        return super.clear();\n    }\n    public valueToKey(val: any): string | number {\n        return typeof val === 'string' ? val : `${val}`;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedSizeBinary } from '../type';\nimport { FixedWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class FixedSizeBinaryBuilder<TNull = any> extends FixedWidthBuilder<FixedSizeBinary, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nconst f64 = new Float64Array(1);\nconst u32 = new Uint32Array(f64.buffer);\n\n/**\n * Convert uint16 (logically a float16) to a JS float64. Inspired by numpy's `npy_half_to_double`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L29\n * @param h {number} the uint16 to convert\n * @private\n * @ignore\n */\nexport function uint16ToFloat64(h: number) {\n    let expo = (h & 0x7C00) >> 10;\n    let sigf = (h & 0x03FF) / 1024;\n    let sign = (-1) ** ((h & 0x8000) >> 15);\n    switch (expo) {\n        case 0x1F: return sign * (sigf ? NaN : 1 / 0);\n        case 0x00: return sign * (sigf ? 6.103515625e-5 * sigf : 0);\n    }\n    return sign * (2 ** (expo - 15)) * (1 + sigf);\n}\n\n/**\n * Convert a float64 to uint16 (assuming the float64 is logically a float16). Inspired by numpy's `npy_double_to_half`:\n * https://github.com/numpy/numpy/blob/5a5987291dc95376bb098be8d8e5391e89e77a2c/numpy/core/src/npymath/halffloat.c#L43\n * @param d {number} The float64 to convert\n * @private\n * @ignore\n */\nexport function float64ToUint16(d: number) {\n\n    if (d !== d) { return 0x7E00; } // NaN\n\n    f64[0] = d;\n\n    // Magic numbers:\n    // 0x80000000 = 10000000 00000000 00000000 00000000 -- masks the 32nd bit\n    // 0x7ff00000 = 01111111 11110000 00000000 00000000 -- masks the 21st-31st bits\n    // 0x000fffff = 00000000 00001111 11111111 11111111 -- masks the 1st-20th bit\n\n    let sign = (u32[1] & 0x80000000) >> 16 & 0xFFFF;\n    let expo = (u32[1] & 0x7ff00000), sigf = 0x0000;\n\n    if (expo >= 0x40f00000) {\n        //\n        // If exponent overflowed, the float16 is either NaN or Infinity.\n        // Rules to propagate the sign bit: mantissa > 0 ? NaN : +/-Infinity\n        //\n        // Magic numbers:\n        // 0x40F00000 = 01000000 11110000 00000000 00000000 -- 6-bit exponent overflow\n        // 0x7C000000 = 01111100 00000000 00000000 00000000 -- masks the 27th-31st bits\n        //\n        // returns:\n        // qNaN, aka 32256 decimal, 0x7E00 hex, or 01111110 00000000 binary\n        // sNaN, aka 32000 decimal, 0x7D00 hex, or 01111101 00000000 binary\n        // +inf, aka 31744 decimal, 0x7C00 hex, or 01111100 00000000 binary\n        // -inf, aka 64512 decimal, 0xFC00 hex, or 11111100 00000000 binary\n        //\n        // If mantissa is greater than 23 bits, set to +Infinity like numpy\n        if (u32[0] > 0) {\n            expo = 0x7C00;\n        } else {\n            expo = (expo & 0x7C000000) >> 16;\n            sigf = (u32[1] & 0x000fffff) >> 10;\n        }\n    } else if (expo <= 0x3f000000) {\n        //\n        // If exponent underflowed, the float is either signed zero or subnormal.\n        //\n        // Magic numbers:\n        // 0x3F000000 = 00111111 00000000 00000000 00000000 -- 6-bit exponent underflow\n        //\n        sigf = 0x100000 + (u32[1] & 0x000fffff);\n        sigf = 0x100000 + (sigf << ((expo >> 20) - 998)) >> 21;\n        expo = 0;\n    } else {\n        //\n        // No overflow or underflow, rebase the exponent and round the mantissa\n        // Magic numbers:\n        // 0x200 = 00000010 00000000 -- masks off the 10th bit\n        //\n\n        // Ensure the first mantissa bit (the 10th one) is 1 and round\n        expo = (expo - 0x3f000000) >> 10;\n        sigf = ((u32[1] & 0x000fffff) + 0x200) >> 10;\n    }\n\n    return sign | expo | sigf & 0xFFFF;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { float64ToUint16 } from '../util/math';\nimport { FixedWidthBuilder } from '../builder';\nimport { Float, Float16, Float32, Float64 } from '../type';\n\n/** @ignore */\nexport class FloatBuilder<T extends Float = Float, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n\n/** @ignore */\nexport class Float16Builder<TNull = any> extends FloatBuilder<Float16, TNull> {\n    public setValue(index: number, value: number) {\n        // convert JS float64 to a uint16\n        this._values.set(index, float64ToUint16(value));\n    }\n}\n\n/** @ignore */\nexport class Float32Builder<TNull = any> extends FloatBuilder<Float32, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Float64Builder<TNull = any> extends FloatBuilder<Float64, TNull> {\n    public setValue(index: number, value: number) {\n        this._values.set(index, value);\n    }\n}\n","import setPrototypeOf from \"./setPrototypeOf\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { ArrayBufferViewInput, toArrayBufferView } from './buffer';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport { BigIntArray, BigIntArrayConstructor } from '../interfaces';\nimport { BigIntAvailable, BigInt64Array, BigUint64Array } from './compat';\n\n/** @ignore */\nexport const isArrowBigNumSymbol = Symbol.for('isArrowBigNum');\n\n/** @ignore */ type BigNumArray = IntArray | UintArray;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n\n/** @ignore */\nfunction BigNum(this: any, x: any, ...xs: any) {\n    if (xs.length === 0) {\n        return Object.setPrototypeOf(toArrayBufferView(this['TypedArray'], x), this.constructor.prototype);\n    }\n    return Object.setPrototypeOf(new this['TypedArray'](x, ...xs), this.constructor.prototype);\n}\n\nBigNum.prototype[isArrowBigNumSymbol] = true;\nBigNum.prototype.toJSON = function<T extends BN<BigNumArray>>(this: T) { return `\"${bignumToString(this)}\"`; };\nBigNum.prototype.valueOf = function<T extends BN<BigNumArray>>(this: T) { return bignumToNumber(this); };\nBigNum.prototype.toString = function<T extends BN<BigNumArray>>(this: T) { return bignumToString(this); };\nBigNum.prototype[Symbol.toPrimitive] = function<T extends BN<BigNumArray>>(this: T, hint: 'string' | 'number' | 'default' = 'default') {\n    switch (hint) {\n        case 'number': return bignumToNumber(this);\n        case 'string': return bignumToString(this);\n        case 'default': return bignumToBigInt(this);\n    }\n    return bignumToString(this);\n};\n\n/** @ignore */\ntype TypedArrayConstructorArgs =\n    [number | void] |\n    [Iterable<number> | Iterable<bigint>] |\n    [ArrayBufferLike, number | void, number | void] ;\n\n/** @ignore */\nfunction SignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction UnsignedBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n/** @ignore */\nfunction DecimalBigNum(this: any, ...args: TypedArrayConstructorArgs) { return BigNum.apply(this, args); }\n\nObject.setPrototypeOf(SignedBigNum.prototype,   Object.create(Int32Array.prototype));\nObject.setPrototypeOf(UnsignedBigNum.prototype, Object.create(Uint32Array.prototype));\nObject.setPrototypeOf(DecimalBigNum.prototype,  Object.create(Uint32Array.prototype));\nObject.assign(SignedBigNum.prototype,   BigNum.prototype, { 'constructor': SignedBigNum,   'signed': true,  'TypedArray': Int32Array,  'BigIntArray': BigInt64Array  });\nObject.assign(UnsignedBigNum.prototype, BigNum.prototype, { 'constructor': UnsignedBigNum, 'signed': false, 'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\nObject.assign(DecimalBigNum.prototype,  BigNum.prototype, { 'constructor': DecimalBigNum,  'signed': true,  'TypedArray': Uint32Array, 'BigIntArray': BigUint64Array });\n\n/** @ignore */\nfunction bignumToNumber<T extends BN<BigNumArray>>(bn: T) {\n    let { buffer, byteOffset, length, 'signed': signed } = bn;\n    let words = new Int32Array(buffer, byteOffset, length);\n    let number = 0, i = 0, n = words.length, hi, lo;\n    while (i < n) {\n        lo = words[i++];\n        hi = words[i++];\n        signed || (hi = hi >>> 0);\n        number += (lo >>> 0) + (hi * (i ** 32));\n    }\n    return number;\n}\n\n/** @ignore */\nexport let bignumToString: { <T extends BN<BigNumArray>>(a: T): string; };\n/** @ignore */\nexport let bignumToBigInt: { <T extends BN<BigNumArray>>(a: T): bigint; };\n\nif (!BigIntAvailable) {\n    bignumToString = decimalToString;\n    bignumToBigInt = <any> bignumToString;\n} else {\n    bignumToBigInt = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0] : <any>decimalToString(a));\n    bignumToString = (<T extends BN<BigNumArray>>(a: T) => a.byteLength === 8 ? `${new a['BigIntArray'](a.buffer, a.byteOffset, 1)[0]}` : decimalToString(a));\n}\n\n/** @ignore */\nfunction decimalToString<T extends BN<BigNumArray>>(a: T) {\n    let digits = '';\n    let base64 = new Uint32Array(2);\n    let base32 = new Uint16Array(a.buffer, a.byteOffset, a.byteLength / 2);\n    let checks = new Uint32Array((base32 = new Uint16Array(base32).reverse()).buffer);\n    let i = -1, n = base32.length - 1;\n    do {\n        for (base64[0] = base32[i = 0]; i < n;) {\n            base32[i++] = base64[1] = base64[0] / 10;\n            base64[0] = ((base64[0] - base64[1] * 10) << 16) + base32[i];\n        }\n        base32[i] = base64[1] = base64[0] / 10;\n        base64[0] = base64[0] - base64[1] * 10;\n        digits = `${base64[0]}${digits}`;\n    } while (checks[0] || checks[1] || checks[2] || checks[3]);\n    return digits ? digits : `0`;\n}\n\n/** @ignore */\nexport class BN<T extends BigNumArray> {\n    /** @nocollapse */\n    public static new<T extends BigNumArray>(num: T, isSigned?: boolean): (T & BN<T>) {\n        switch (isSigned) {\n            case true: return new (<any> SignedBigNum)(num) as (T & BN<T>);\n            case false: return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n        }\n        switch (num.constructor) {\n            case Int8Array:\n            case Int16Array:\n            case Int32Array:\n            case BigInt64Array:\n                return new (<any> SignedBigNum)(num) as (T & BN<T>);\n        }\n        if (num.byteLength === 16) {\n            return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n        }\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static signed<T extends IntArray>(num: T): (T & BN<T>) {\n        return new (<any> SignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static unsigned<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> UnsignedBigNum)(num) as (T & BN<T>);\n    }\n    /** @nocollapse */\n    public static decimal<T extends UintArray>(num: T): (T & BN<T>) {\n        return new (<any> DecimalBigNum)(num) as (T & BN<T>);\n    }\n    constructor(num: T, isSigned?: boolean) {\n        return BN.new(num, isSigned) as any;\n    }\n}\n\n/** @ignore */\nexport interface BN<T extends BigNumArray> extends TypedArrayLike<T> {\n\n    new<T extends ArrayBufferViewInput>(buffer: T, signed?: boolean): T;\n\n    readonly signed: boolean;\n    readonly TypedArray: TypedArrayConstructor<TypedArray>;\n    readonly BigIntArray: BigIntArrayConstructor<BigIntArray>;\n\n    [Symbol.toStringTag]:\n        'Int8Array'         |\n        'Int16Array'        |\n        'Int32Array'        |\n        'Uint8Array'        |\n        'Uint16Array'       |\n        'Uint32Array'       |\n        'Uint8ClampedArray';\n\n    /**\n     * Convert the bytes to their (positive) decimal representation for printing\n     */\n    toString(): string;\n    /**\n     * Down-convert the bytes to a 53-bit precision integer. Invoked by JS for\n     * arithmetic operators, like `+`. Easy (and unsafe) way to convert BN to\n     * number via `+bn_inst`\n     */\n    valueOf(): number;\n    /**\n     * Return the JSON representation of the bytes. Must be wrapped in double-quotes,\n     * so it's compatible with JSON.stringify().\n     */\n    toJSON(): string;\n    [Symbol.toPrimitive](hint?: any): number | string | bigint;\n}\n\n/** @ignore */\ninterface TypedArrayLike<T extends BigNumArray> {\n\n    readonly length: number;\n    readonly buffer: ArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    readonly BYTES_PER_ELEMENT: number;\n\n    includes(searchElement: number, fromIndex?: number | undefined): boolean;\n    copyWithin(target: number, start: number, end?: number | undefined): this;\n    every(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    fill(value: number, start?: number | undefined, end?: number | undefined): this;\n    filter(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): T;\n    find(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number | undefined;\n    findIndex(predicate: (value: number, index: number, obj: T) => boolean, thisArg?: any): number;\n    forEach(callbackfn: (value: number, index: number, array: T) => void, thisArg?: any): void;\n    indexOf(searchElement: number, fromIndex?: number | undefined): number;\n    join(separator?: string | undefined): string;\n    lastIndexOf(searchElement: number, fromIndex?: number | undefined): number;\n    map(callbackfn: (value: number, index: number, array: T) => number, thisArg?: any): T;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: T) => number, initialValue: number): number;\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: T) => U, initialValue: U): U;\n    reverse(): T;\n    set(array: ArrayLike<number>, offset?: number | undefined): void;\n    slice(start?: number | undefined, end?: number | undefined): T;\n    some(callbackfn: (value: number, index: number, array: T) => boolean, thisArg?: any): boolean;\n    sort(compareFn?: ((a: number, b: number) => number) | undefined): this;\n    subarray(begin: number, end?: number | undefined): T;\n    toLocaleString(): string;\n    entries(): IterableIterator<[number, number]>;\n    keys(): IterableIterator<number>;\n    values(): IterableIterator<number>;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { bignumToBigInt } from '../util/bn';\nimport { WideBufferBuilder } from './buffer';\nimport { BigInt64Array } from '../util/compat';\nimport { FixedWidthBuilder, BuilderOptions } from '../builder';\nimport { Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64 } from '../type';\n\n/** @ignore */\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FixedWidthBuilder<T, TNull> {\n    public setValue(index: number, value: T['TValue']) {\n        this._values.set(index, value);\n    }\n}\n\n/** @ignore */\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\n/** @ignore */\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\n/** @ignore */\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\n/** @ignore */\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    protected _values: WideBufferBuilder<Int32Array, BigInt64Array>;\n    constructor(options: BuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Int32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Int32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\n/** @ignore */\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\n/** @ignore */\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\n/** @ignore */\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\n/** @ignore */\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    protected _values: WideBufferBuilder<Uint32Array, BigUint64Array>;\n    constructor(options: BuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = (options['nullValues'] as TNull[]).map(toBigInt);\n        }\n        super(options);\n        this._values = new WideBufferBuilder(new Uint32Array(0), 2);\n    }\n    public get values64() { return this._values.buffer64; }\n    public isValid(value: Uint32Array | bigint | TNull) { return super.isValid(toBigInt(value)); }\n}\n\nconst toBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ 'BigIntArray': BigInt64Array });\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeBuilder<T extends Time = Time, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimeSecondBuilder<TNull = any> extends TimeBuilder<TimeSecond, TNull> {}\n/** @ignore */\nexport class TimeMillisecondBuilder<TNull = any> extends TimeBuilder<TimeMillisecond, TNull> {}\n/** @ignore */\nexport class TimeMicrosecondBuilder<TNull = any> extends TimeBuilder<TimeMicrosecond, TNull> {}\n/** @ignore */\nexport class TimeNanosecondBuilder<TNull = any> extends TimeBuilder<TimeNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampBuilder<T extends Timestamp = Timestamp, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class TimestampSecondBuilder<TNull = any> extends TimestampBuilder<TimestampSecond, TNull> {}\n/** @ignore */\nexport class TimestampMillisecondBuilder<TNull = any> extends TimestampBuilder<TimestampMillisecond, TNull> {}\n/** @ignore */\nexport class TimestampMicrosecondBuilder<TNull = any> extends TimestampBuilder<TimestampMicrosecond, TNull> {}\n/** @ignore */\nexport class TimestampNanosecondBuilder<TNull = any> extends TimestampBuilder<TimestampNanosecond, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FixedWidthBuilder } from '../builder';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalBuilder<T extends Interval = Interval, TNull = any> extends FixedWidthBuilder<T, TNull> {}\n/** @ignore */\nexport class IntervalDayTimeBuilder<TNull = any> extends IntervalBuilder<IntervalDayTime, TNull> {}\n/** @ignore */\nexport class IntervalYearMonthBuilder<TNull = any> extends IntervalBuilder<IntervalYearMonth, TNull> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Binary } from '../type';\nimport { toUint8Array } from '../util/buffer';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class BinaryBuilder<TNull = any> extends VariableWidthBuilder<Binary, TNull> {\n    constructor(opts: BuilderOptions<Binary, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: Uint8Array) {\n        return super.setValue(index, toUint8Array(value));\n    }\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number) {\n        const offsets = this._offsets;\n        const data = this._values.reserve(pendingLength).buffer;\n        let index = 0, length = 0, offset = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                length = value.length;\n                data.set(value, offset);\n                offsets.set(index, length);\n                offset += length;\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nimport { BinaryBuilder } from './binary';\nimport { BufferBuilder } from './buffer';\nimport { VariableWidthBuilder, BuilderOptions } from '../builder';\n\n/** @ignore */\nexport class Utf8Builder<TNull = any> extends VariableWidthBuilder<Utf8, TNull> {\n    constructor(opts: BuilderOptions<Utf8, TNull>) {\n        super(opts);\n        this._values = new BufferBuilder(new Uint8Array(0));\n    }\n    public get byteLength(): number {\n        let size = this._pendingLength + (this.length * 4);\n        this._offsets && (size += this._offsets.byteLength);\n        this._values && (size += this._values.byteLength);\n        this._nulls && (size += this._nulls.byteLength);\n        return size;\n    }\n    public setValue(index: number, value: string) {\n        return super.setValue(index, encodeUtf8(value) as any);\n    }\n    // @ts-ignore\n    protected _flushPending(pending: Map<number, Uint8Array | undefined>, pendingLength: number): void {}\n}\n\n(Utf8Builder.prototype as any)._flushPending = (BinaryBuilder.prototype as any)._flushPending;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\n\n/** @ignore */\nexport class Run<T extends DataType = any, TNull = any> {\n    // @ts-ignore\n    protected _values: ArrayLike<T['TValue'] | TNull>;\n    public get length() { return this._values.length; }\n    public get(index: number) { return this._values[index]; }\n    public clear() { this._values = <any> null; return this; }\n    public bind(values: Vector<T> | ArrayLike<T['TValue'] | TNull>) {\n        if (values instanceof Vector) {\n            return values;\n        }\n        this._values = values;\n        return this as any;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { StructVector } from './struct';\nimport { valueToString } from '../util/pretty';\nimport { DataType, Struct, RowLike } from '../type';\n\n/** @ignore */ const kParent = Symbol.for('parent');\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */ const kKeyToIdx = Symbol.for('keyToIdx');\n/** @ignore */ const kIdxToVal = Symbol.for('idxToVal');\n/** @ignore */ const kCustomInspect = Symbol.for('nodejs.util.inspect.custom');\n\nabstract class Row<K extends PropertyKey = any, V = any> implements Map<K, V> {\n\n    public readonly size: number;\n    public readonly [Symbol.toStringTag]: string;\n\n    protected [kRowIndex]: number;\n    protected [kParent]: Vector<Struct>;\n    protected [kKeyToIdx]: Map<K, number>;\n    protected [kIdxToVal]: V[];\n\n    constructor(parent: Vector<Struct>, numKeys: number) {\n        this[kParent] = parent;\n        this.size = numKeys;\n    }\n\n    public abstract keys(): IterableIterator<K>;\n    public abstract values(): IterableIterator<V>;\n    public abstract getKey(idx: number): K;\n    public abstract getIndex(key: K): number;\n    public abstract getValue(idx: number): V;\n    public abstract setValue(idx: number, val: V): void;\n\n    public entries() { return this[Symbol.iterator](); }\n\n    public has(key: K) { return this.get(key) !== undefined; }\n\n    public get(key: K) {\n        let val = undefined;\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx !== undefined) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            } else if ((idx = this.getIndex(key)) > -1) {\n                ktoi.set(key, idx);\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                ((val = itov[idx]) !== undefined) || (itov[idx] = val = this.getValue(idx));\n            }\n        }\n        return val;\n    }\n\n    public set(key: K, val: V) {\n        if (key !== null && key !== undefined) {\n            const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n            let idx = ktoi.get(key);\n            if (idx === undefined) {\n                ktoi.set(key, idx = this.getIndex(key));\n            }\n            if (idx > -1) {\n                const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n                itov[idx] = <any> this.setValue(idx, val);\n            }\n        }\n        return this;\n    }\n\n    public clear(): void { throw new Error(`Clearing ${this[Symbol.toStringTag]} not supported.`); }\n\n    public delete(_: K): boolean { throw new Error(`Deleting ${this[Symbol.toStringTag]} values not supported.`); }\n\n    public *[Symbol.iterator](): IterableIterator<[K, V]> {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            yield [k, v];\n        }\n    }\n\n    public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n\n        const ki = this.keys();\n        const vi = this.values();\n        const callback = thisArg === undefined ? callbackfn :\n            (v: V, k: K, m: Map<K, V>) => callbackfn.call(thisArg, v, k, m);\n        const ktoi = this[kKeyToIdx] || (this[kKeyToIdx] = new Map());\n        const itov = this[kIdxToVal] || (this[kIdxToVal] = new Array(this.size));\n\n        for (let k: K, v: V, i = 0, kr: IteratorResult<K>, vr: IteratorResult<V>;\n            !((kr = ki.next()).done || (vr = vi.next()).done);\n            ++i\n        ) {\n            k = kr.value;\n            v = vr.value;\n            itov[i] = v;\n            ktoi.has(k) || ktoi.set(k, i);\n            callback(v, k, this);\n        }\n    }\n\n    public toArray() { return [...this.values()]; }\n    public toJSON() {\n        const obj = {} as any;\n        this.forEach((val, key) => obj[key] = val);\n        return obj;\n    }\n\n    public inspect() { return this.toString(); }\n    public [kCustomInspect]() { return this.toString(); }\n    public toString() {\n        const str: string[] = [];\n        this.forEach((val, key) => {\n            key = valueToString(key);\n            val = valueToString(val);\n            str.push(`${key}: ${val}`);\n        });\n        return `{ ${str.join(', ')} }`;\n    }\n\n    protected static [Symbol.toStringTag] = ((proto: Row) => {\n        Object.defineProperties(proto, {\n            'size': { writable: true, enumerable: false, configurable: false, value: 0 },\n            [kParent]: { writable: true, enumerable: false, configurable: false, value: null },\n            [kRowIndex]: { writable: true, enumerable: false, configurable: false, value: -1 },\n        });\n        return (proto as any)[Symbol.toStringTag] = 'Row';\n    })(Row.prototype);\n}\n\nexport class MapRow<K extends DataType = any, V extends DataType = any> extends Row<K['TValue'], V['TValue'] | null> {\n    constructor(slice: Vector<Struct<{ key: K, value: V }>>) {\n        super(slice, slice.length);\n        return createRowProxy(this);\n    }\n    public keys() {\n        return this[kParent].getChildAt(0)![Symbol.iterator]();\n    }\n    public values() {\n        return this[kParent].getChildAt(1)![Symbol.iterator]();\n    }\n    public getKey(idx: number): K['TValue'] {\n        return this[kParent].getChildAt(0)!.get(idx);\n    }\n    public getIndex(key: K['TValue']): number {\n        return this[kParent].getChildAt(0)!.indexOf(key);\n    }\n    public getValue(index: number): V['TValue'] | null {\n        return this[kParent].getChildAt(1)!.get(index);\n    }\n    public setValue(index: number, value: V['TValue'] | null): void {\n        this[kParent].getChildAt(1)!.set(index, value);\n    }\n}\n\nexport class StructRow<T extends { [key: string]: DataType } = any> extends Row<keyof T, T[keyof T]['TValue'] | null> {\n    constructor(parent: StructVector<T>) {\n        super(parent, parent.type.children.length);\n        return defineRowProxyProperties(this);\n    }\n    public *keys() {\n        for (const field of this[kParent].type.children) {\n            yield field.name as keyof T;\n        }\n    }\n    public *values() {\n        for (const field of this[kParent].type.children) {\n            yield (this as RowLike<T>)[field.name];\n        }\n    }\n    public getKey(idx: number): keyof T {\n        return this[kParent].type.children[idx].name as keyof T;\n    }\n    public getIndex(key: keyof T): number {\n        return this[kParent].type.children.findIndex((f) => f.name === key);\n    }\n    public getValue(index: number): T[keyof T]['TValue'] | null {\n        return this[kParent].getChildAt(index)!.get(this[kRowIndex]);\n    }\n    public setValue(index: number, value: T[keyof T]['TValue'] | null): void {\n        return this[kParent].getChildAt(index)!.set(this[kRowIndex], value);\n    }\n}\n\nObject.setPrototypeOf(Row.prototype, Map.prototype);\n\n/** @ignore */\nconst defineRowProxyProperties = (() => {\n    const desc = { enumerable: true, configurable: false, get: null as any, set: null as any };\n    return <T extends Row>(row: T) => {\n        let idx = -1, ktoi = row[kKeyToIdx] || (row[kKeyToIdx] = new Map());\n        const getter = (key: any) => function(this: T) { return this.get(key); };\n        const setter = (key: any) => function(this: T, val: any) { return this.set(key, val); };\n        for (const key of row.keys()) {\n            ktoi.set(key, ++idx);\n            desc.get = getter(key);\n            desc.set = setter(key);\n            row.hasOwnProperty(key) || (desc.enumerable = true, Object.defineProperty(row, key, desc));\n            row.hasOwnProperty(idx) || (desc.enumerable = false, Object.defineProperty(row, idx, desc));\n        }\n        desc.get = desc.set = null;\n        return row;\n    };\n})();\n\n/** @ignore */\nconst createRowProxy = (() => {\n    if (typeof Proxy === 'undefined') {\n        return defineRowProxyProperties;\n    }\n    const has = Row.prototype.has;\n    const get = Row.prototype.get;\n    const set = Row.prototype.set;\n    const getKey = Row.prototype.getKey;\n    const RowProxyHandler: ProxyHandler<Row> = {\n        isExtensible() { return false; },\n        deleteProperty() { return false; },\n        preventExtensions() { return true; },\n        ownKeys(row: Row) { return [...row.keys()].map((x) => `${x}`); },\n        has(row: Row, key: PropertyKey) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return true;\n            }\n            if (typeof key === 'number' && !row.has(key)) {\n                key = row.getKey(key);\n            }\n            return row.has(key);\n        },\n        get(row: Row, key: PropertyKey, receiver: any) {\n            switch (key) {\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag: case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx: case kCustomInspect:\n                    return Reflect.get(row, key, receiver);\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return get.call(receiver, key);\n        },\n        set(row: Row, key: PropertyKey, val: any, receiver: any) {\n            switch (key) {\n                case kParent: case kRowIndex: case kIdxToVal: case kKeyToIdx:\n                    return Reflect.set(row, key, val, receiver);\n                case 'getKey': case 'getIndex': case 'getValue': case 'setValue': case 'toArray': case 'toJSON': case 'inspect':\n                case 'constructor': case 'isPrototypeOf': case 'propertyIsEnumerable': case 'toString': case 'toLocaleString': case 'valueOf':\n                case 'size': case 'has': case 'get': case 'set': case 'clear': case 'delete': case 'keys': case 'values': case 'entries': case 'forEach':\n                case '__proto__': case '__defineGetter__': case '__defineSetter__': case 'hasOwnProperty': case '__lookupGetter__': case '__lookupSetter__':\n                case Symbol.iterator: case Symbol.toStringTag:\n                    return false;\n            }\n            if (typeof key === 'number' && !has.call(receiver, key)) {\n                key = getKey.call(receiver, key);\n            }\n            return has.call(receiver, key) ? !!set.call(receiver, key, val) : false;\n        },\n    };\n    return <T extends Row>(row: T) => new Proxy(row, RowProxyHandler) as T;\n})();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { MapRow, StructRow } from '../vector/row';\nimport { compareArrayLike } from '../util/buffer';\nimport { BigInt, BigIntAvailable } from './compat';\n\n/** @ignore */\ntype RangeLike = { length: number; stride?: number };\n/** @ignore */\ntype ClampThen<T extends RangeLike> = (source: T, index: number) => any;\n/** @ignore */\ntype ClampRangeThen<T extends RangeLike> = (source: T, offset: number, length: number) => any;\n\nexport function clampIndex<T extends RangeLike>(source: T, index: number): number;\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampIndex<T extends RangeLike, N extends ClampThen<T> = ClampThen<T>>(source: T, index: number, then?: N) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n\n/** @ignore */\nlet tmp: number;\nexport function clampRange<T extends RangeLike>(source: T, begin: number | undefined, end: number | undefined): [number, number];\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then: N): ReturnType<N>;\n/** @ignore */\nexport function clampRange<T extends RangeLike, N extends ClampRangeThen<T> = ClampRangeThen<T>>(source: T, begin: number | undefined, end: number | undefined, then?: N) {\n\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n     // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\nconst big0 = BigIntAvailable ? BigInt(0) : 0;\nconst isNaNFast = (value: any) => value !== value;\n\n/** @ignore */\nexport function createElementComparator(search: any) {\n    let typeofSearch = typeof search;\n    // Compare primitives\n    if (typeofSearch !== 'object' || search === null) {\n        // Compare NaN\n        if (isNaNFast(search)) {\n            return isNaNFast;\n        }\n        return typeofSearch !== 'bigint'\n            ? (value: any) => value === search\n            : (value: any) => (big0 + value) === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value: any) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare TypedArrays\n    if (ArrayBuffer.isView(search)) {\n        return (value: any) => value ? compareArrayLike(search, value) : false;\n    }\n    // Compare Maps and Rows\n    if (search instanceof Map) { return creatMapComparator(search); }\n    // Compare Array-likes\n    if (Array.isArray(search)) { return createArrayLikeComparator(search); }\n    // Compare Vectors\n    if (search instanceof Vector) { return createVectorComparator(search); }\n    // Compare non-empty Objects\n    return createObjectComparator(search);\n}\n\n/** @ignore */\nfunction createArrayLikeComparator(lhs: ArrayLike<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[i]);\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction creatMapComparator(lhs: Map<any, any>) {\n    let i = -1;\n    const comparators = [] as ((x: any) => boolean)[];\n    lhs.forEach((v) => comparators[++i] = createElementComparator(v));\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createVectorComparator(lhs: Vector<any>) {\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = lhs.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs.get(i));\n    }\n    return createSubElementsComparator(comparators);\n}\n\n/** @ignore */\nfunction createObjectComparator(lhs: any) {\n    const keys = Object.keys(lhs);\n    // Only compare non-empty Objects\n    if (keys.length === 0) { return () => false; }\n    const comparators = [] as ((x: any) => boolean)[];\n    for (let i = -1, n = keys.length; ++i < n;) {\n        comparators[i] = createElementComparator(lhs[keys[i]]);\n    }\n    return createSubElementsComparator(comparators, keys);\n}\n\nfunction createSubElementsComparator(comparators: ((x: any) => boolean)[], keys?: Iterable<string>) {\n    return (rhs: any) => {\n        if (!rhs || typeof rhs !== 'object') {\n            return false;\n        }\n        switch (rhs.constructor) {\n            case Array: return compareArray(comparators, rhs);\n            case Map:\n            case MapRow:\n            case StructRow:\n                return compareObject(comparators, rhs, rhs.keys());\n            case Object:\n            case undefined: // support `Object.create(null)` objects\n                return compareObject(comparators, rhs, keys || Object.keys(rhs));\n        }\n        return rhs instanceof Vector ? compareVector(comparators, rhs) : false;\n    };\n}\n\nfunction compareArray(comparators: ((x: any) => boolean)[], arr: any[]) {\n    const n = comparators.length;\n    if (arr.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](arr[i]))) { return false; }\n    }\n    return true;\n}\n\nfunction compareVector(comparators: ((x: any) => boolean)[], vec: Vector) {\n    const n = comparators.length;\n    if (vec.length !== n) { return false; }\n    for (let i = -1; ++i < n;) {\n        if (!(comparators[i](vec.get(i)))) { return false; }\n    }\n    return true;\n}\n\nfunction compareObject(comparators: ((x: any) => boolean)[], obj: Map<any, any>, keys: Iterable<string>) {\n\n    const lKeyItr = keys[Symbol.iterator]();\n    const rKeyItr = obj instanceof Map ? obj.keys() : Object.keys(obj)[Symbol.iterator]();\n    const rValItr = obj instanceof Map ? obj.values() : Object.values(obj)[Symbol.iterator]();\n\n    let i = 0;\n    let n = comparators.length;\n    let rVal = rValItr.next();\n    let lKey = lKeyItr.next();\n    let rKey = rKeyItr.next();\n\n    for (; i < n && !lKey.done && !rKey.done && !rVal.done;\n         ++i, lKey = lKeyItr.next(), rKey = rKeyItr.next(), rVal = rValItr.next()) {\n        if (lKey.value !== rKey.value || !comparators[i](rVal.value)) {\n            break;\n        }\n    }\n    if (i === n && lKey.done && rKey.done && rVal.done) {\n        return true;\n    }\n    lKeyItr.return && lKeyItr.return();\n    rKeyItr.return && rKeyItr.return();\n    rValItr.return && rValItr.return();\n    return false;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { clampRange } from '../util/vector';\nimport { DataType, Dictionary } from '../type';\nimport { selectChunkArgs } from '../util/args';\nimport { DictionaryVector } from './dictionary';\nimport { AbstractVector, Vector } from '../vector';\nimport { Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\ntype ChunkedDict<T extends DataType> = T extends Dictionary ? Vector<T['dictionary']> : null | never;\n/** @ignore */\ntype ChunkedKeys<T extends DataType> = T extends Dictionary ? Vector<T['indices']> | Chunked<T['indices']> : null | never;\n\n/** @ignore */\nexport type SearchContinuation<T extends Chunked> = (column: T, chunkIndex: number, valueIndex: number) => any;\n\n/** @ignore */\nexport class Chunked<T extends DataType = any>\n    extends AbstractVector<T>\n    implements Clonable<Chunked<T>>,\n               Sliceable<Chunked<T>>,\n               Applicative<T, Chunked<T>> {\n\n    /** @nocollapse */\n    public static flatten<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        return selectChunkArgs<Vector<T>>(Vector, vectors);\n    }\n\n    /** @nocollapse */\n    public static concat<T extends DataType>(...vectors: (Vector<T> | Vector<T>[])[]) {\n        const chunks = Chunked.flatten<T>(...vectors);\n        return new Chunked<T>(chunks[0].type, chunks);\n    }\n\n    protected _type: T;\n    protected _length: number;\n    protected _chunks: Vector<T>[];\n    protected _numChildren: number;\n    protected _children?: Chunked[];\n    protected _nullCount: number = -1;\n    protected _chunkOffsets: Uint32Array;\n\n    constructor(type: T, chunks: Vector<T>[] = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n\n    public get type() { return this._type; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get typeId(): T['TType'] { return this._type.typeId; }\n    public get VectorName() { return `Chunked<${this._type}>`; }\n    public get data(): Data<T> {\n        return this._chunks[0] ? this._chunks[0].data : <any> null;\n    }\n\n    public get ArrayType() { return this._type.ArrayType; }\n    public get numChildren() { return this._numChildren; }\n    public get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    public get byteLength(): number {\n        return this._chunks.reduce((byteLength, chunk) => byteLength + chunk.byteLength, 0);\n    }\n    public get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n\n    protected _indices?: ChunkedKeys<T>;\n    public get indices(): ChunkedKeys<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = (<any> this._chunks) as DictionaryVector<T, any>[];\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices))) as ChunkedKeys<T>;\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    public get dictionary(): ChunkedDict<T> | null {\n        if (DataType.isDictionary(this._type)) {\n            return this._chunks[this._chunks.length - 1].data.dictionary as ChunkedDict<T>;\n        }\n        return null;\n    }\n\n    public *[Symbol.iterator](): IterableIterator<T['TValue'] | null> {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n\n    public clone(chunks = this._chunks): Chunked<T> {\n        return new Chunked(this._type, chunks);\n    }\n\n    public concat(...others: Vector<T>[]): Chunked<T> {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n\n    public slice(begin?: number, end?: number): Chunked<T> {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Chunked<R> | null {\n\n        if (index < 0 || index >= this._numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let child: Chunked<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (child = columns[index]) { return child; }\n        if (field = ((this._type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked<R>(field.type, chunks));\n            }\n        }\n\n        return null;\n    }\n\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0            ) { return null; }\n        if (idx >= offsets[rhs]) { return null; }\n        if (rhs <= 1           ) { return then ? then(this, 0, idx) : [0, idx]; }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n\n    public isValid(index: number): boolean {\n        return !!this.search(index, this.isValidInternal);\n    }\n\n    public get(index: number): T['TValue'] | null {\n        return this.search(index, this.getInternal);\n    }\n\n    public set(index: number, value: T['TValue'] | null): void {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n\n    public indexOf(element: T['TValue'], offset?: number): number {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element))!;\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n\n    public toArray(): T['TArray'] {\n        const { chunks } = this;\n        const n = chunks.length;\n        let ArrayType: any = this._type.ArrayType;\n        if (n <= 0) { return new ArrayType(0); }\n        if (n <= 1) { return chunks[0].toArray(); }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set: any = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n\n    protected getInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].get(j); }\n    protected isValidInternal({ _chunks }: Chunked<T>, i: number, j: number) { return _chunks[i].isValid(j); }\n    protected indexOfInternal({ _chunks }: Chunked<T>, chunkIndex: number, fromIndex: number, element: T['TValue']) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n\n    protected _sliceInternal(self: Chunked<T>, begin: number, end: number) {\n        const slices: Vector<T>[] = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= end) { break; }\n            // If the child is to the left of of the slice boundary, exclude\n            if (begin >= chunkOffset + chunkLength) { continue; }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= begin && (chunkOffset + chunkLength) <= end) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const from = Math.max(0, begin - chunkOffset);\n            const to = Math.min(end - chunkOffset, chunkLength);\n            slices.push(chunk.slice(from, to) as Vector<T>);\n        }\n        return self.clone(slices);\n    }\n}\n\n/** @ignore */\nfunction calculateOffsets<T extends DataType>(vectors: Vector<T>[]) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n\n/** @ignore */\nconst typedSet = (src: TypedArray, dst: TypedArray, offset: number) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n\n/** @ignore */\nconst arraySet = (src: any[], dst: any[], offset: number) => {\n    let idx = offset;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[idx++] = src[i];\n    }\n    return idx;\n};\n\n/** @ignore */\ninterface TypedArray extends ArrayBufferView {\n    readonly length: number;\n    readonly [n: number]: number;\n    set(array: ArrayLike<number>, offset?: number): void;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Field } from './schema';\nimport { DataType } from './type';\nimport { Vector } from './vector';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { VectorCtorArgs, VectorType as V } from './interfaces';\nimport { Chunked, SearchContinuation } from './vector/chunked';\n\nexport interface Column<T extends DataType = any> {\n    typeId: T['TType'];\n    concat(...others: Vector<T>[]): Column<T>;\n    slice(begin?: number, end?: number): Column<T>;\n    clone(chunks?: Vector<T>[], offsets?: Uint32Array): Column<T>;\n}\n\nexport class Column<T extends DataType = any>\n    extends Chunked<T>\n    implements Clonable<Column<T>>,\n               Sliceable<Column<T>>,\n               Applicative<T, Column<T>> {\n\n    public static new<T extends DataType>(field: string | Field<T>, ...chunks: (Vector<T> | Vector<T>[])[]): Column<T>;\n    public static new<T extends DataType>(field: string | Field<T>, data: Data<T>, ...args: VectorCtorArgs<V<T>>): Column<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(field: string | Field<T>, data: Data<T> | Vector<T> | (Data<T> | Vector<T>)[], ...rest: any[]) {\n\n        const chunks = Chunked.flatten<T>(\n            Array.isArray(data) ? [...data, ...rest] :\n            data instanceof Vector ? [data, ...rest] :\n            [Vector.new(data, ...rest)]\n        );\n\n        if (typeof field === 'string') {\n            const type = chunks[0].data.type;\n            field = new Field(field, type, true);\n        } else if (!field.nullable && chunks.some(({ nullCount }) => nullCount > 0)) {\n            field = field.clone({ nullable: true });\n        }\n        return new Column(field, chunks);\n    }\n\n    constructor(field: Field<T>, vectors: Vector<T>[] = [], offsets?: Uint32Array) {\n        vectors = Chunked.flatten<T>(...vectors);\n        super(field.type, vectors, offsets);\n        this._field = field;\n        if (vectors.length === 1 && !(this instanceof SingleChunkColumn)) {\n            return new SingleChunkColumn(field, vectors[0], this._chunkOffsets);\n        }\n    }\n\n    protected _field: Field<T>;\n    protected _children?: Column[];\n\n    public get field() { return this._field; }\n    public get name() { return this._field.name; }\n    public get nullable() { return this._field.nullable; }\n    public get metadata() { return this._field.metadata; }\n\n    public clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n\n        if (index < 0 || index >= this.numChildren) { return null; }\n\n        let columns = this._children || (this._children = []);\n        let column: Column<R>, field: Field<R>, chunks: Vector<R>[];\n\n        if (column = columns[index]) { return column; }\n        if (field = ((this.type.children || [])[index] as Field<R>)) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n\n        return null;\n    }\n}\n\n/** @ignore */\nclass SingleChunkColumn<T extends DataType = any> extends Column<T> {\n    protected _chunk: Vector<T>;\n    constructor(field: Field<T>, vector: Vector<T>, offsets?: Uint32Array) {\n        super(field, [vector], offsets);\n        this._chunk = vector;\n    }\n    public search(index: number): [number, number] | null;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N): ReturnType<N>;\n    public search<N extends SearchContinuation<Chunked<T>>>(index: number, then?: N) {\n        return then ? then(this, 0, index) : [0, index];\n    }\n    public isValid(index: number): boolean {\n        return this._chunk.isValid(index);\n    }\n    public get(index: number): T['TValue'] | null {\n        return this._chunk.get(index);\n    }\n    public set(index: number, value: T['TValue'] | null): void {\n        this._chunk.set(index, value);\n    }\n    public indexOf(element: T['TValue'], offset?: number): number {\n        return this._chunk.indexOf(element, offset);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from '../vector/chunked';\n\ntype RecordBatchCtor = typeof import('../recordbatch').RecordBatch;\n\nconst isArray = Array.isArray;\n\n/** @ignore */\nexport const selectArgs = <T>(Ctor: any, vals: any[]) => _selectArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnArgs = <T extends { [key: string]: DataType }>(args: any[]) => {\n    const [fields, values] = _selectFieldArgs<T>(args, [[], []]);\n    return values.map((x, i) =>\n        x instanceof Column ? Column.new(x.field.clone(fields[i]), x) :\n        x instanceof Vector ? Column.new(fields[i], x) as Column<T[keyof T]> :\n                              Column.new(fields[i], [] as Vector<T[keyof T]>[]));\n};\n\n/** @ignore */\nexport const selectFieldArgs = <T extends { [key: string]: DataType }>(args: any[]) => _selectFieldArgs<T>(args, [[], []]);\n/** @ignore */\nexport const selectChunkArgs = <T>(Ctor: any, vals: any[]) => _selectChunkArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectVectorChildrenArgs = <T extends Vector>(Ctor: RecordBatchCtor, vals: any[]) => _selectVectorChildrenArgs(Ctor, vals, [], 0) as T[];\n/** @ignore */\nexport const selectColumnChildrenArgs = <T extends Column>(Ctor: RecordBatchCtor, vals: any[]) => _selectColumnChildrenArgs(Ctor, vals, [], 0) as T[];\n\n/** @ignore */\nfunction _selectArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectChunkArgs<T>(Ctor: any, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectChunkArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Chunked) {\n            j = _selectChunkArgs(Ctor, value.chunks, res, j).length;\n        } else if (value instanceof Ctor) { res[j++] = value; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectVectorChildrenArgs<T extends Vector>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectVectorChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Vector, value.schema.fields.map((_, i) => value.getChildAt(i)!), res, j).length;\n        } else if (value instanceof Vector) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nfunction _selectColumnChildrenArgs<T extends Column>(Ctor: RecordBatchCtor, vals: any[], res: T[], idx: number) {\n    let value: any, j = idx;\n    let i = -1, n = vals.length;\n    while (++i < n) {\n        if (isArray(value = vals[i])) {\n            j = _selectColumnChildrenArgs(Ctor, value, res, j).length;\n        } else if (value instanceof Ctor) {\n            j = _selectArgs(Column, value.schema.fields.map((f, i) => Column.new(f, value.getChildAt(i)!)), res, j).length;\n        } else if (value instanceof Column) { res[j++] = value as T; }\n    }\n    return res;\n}\n\n/** @ignore */\nconst toKeysAndValues = (xs: [any[], any[]], [k, v]: [any, any], i: number) => (xs[0][i] = k, xs[1][i] = v, xs);\n\n/** @ignore */\nfunction _selectFieldArgs<T extends { [key: string]: DataType }>(vals: any[], ret: [Field<T[keyof T]>[], Vector<T[keyof T]>[]]): [Field<T[keyof T]>[], (T[keyof T] | Vector<T[keyof T]>)[]] {\n    let keys: any[], n: number;\n    switch (n = vals.length) {\n        case 0: return ret;\n        case 1:\n            keys = ret[0];\n            if (!(vals[0])) { return ret; }\n            if (isArray(vals[0])) { return _selectFieldArgs(vals[0], ret); }\n            if (!(vals[0] instanceof Data || vals[0] instanceof Vector || vals[0] instanceof DataType)) {\n                [keys, vals] = Object.entries(vals[0]).reduce(toKeysAndValues, ret);\n            }\n            break;\n        default:\n            !isArray(keys = vals[n - 1])\n                ? (vals = isArray(vals[0]) ? vals[0] : vals, keys = [])\n                : (vals = isArray(vals[0]) ? vals[0] : vals.slice(0, n - 1));\n    }\n\n    let fieldIndex = -1;\n    let valueIndex = -1;\n    let idx = -1, len = vals.length;\n    let field: number | string | Field<T[keyof T]>;\n    let val: Vector<T[keyof T]> | Data<T[keyof T]>;\n    let [fields, values] = ret as [Field<T[keyof T]>[], any[]];\n\n    while (++idx < len) {\n        val = vals[idx];\n        if (val instanceof Column && (values[++valueIndex] = val)) {\n            fields[++fieldIndex] = val.field.clone(keys[idx], val.type, true);\n        } else {\n            ({ [idx]: field = idx } = keys);\n            if (val instanceof DataType && (values[++valueIndex] = val)) {\n                fields[++fieldIndex] = Field.new(field, val as DataType, true) as Field<T[keyof T]>;\n            } else if (val && val.type && (values[++valueIndex] = val)) {\n                val instanceof Data && (values[valueIndex] = val = Vector.new(val) as Vector);\n                fields[++fieldIndex] = Field.new(field, val.type, true) as Field<T[keyof T]>;\n            }\n        }\n    }\n    return ret;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { DataType } from './type';\nimport { selectArgs } from './util/args';\nimport { selectFieldArgs } from './util/args';\nimport { instance as comparer } from './visitor/typecomparator';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = T[keyof T][] | Data<T[keyof T]>[] | Vector<T[keyof T]>[];\n\nexport class Schema<T extends { [key: string]: DataType } = any> {\n\n    public static from<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static from<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static from<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static from(...args: any[]) {\n        return Schema.new(args[0], args[1]);\n    }\n\n    public static new<T extends { [key: string]: DataType } = any>(children: T): Schema<T>;\n    public static new<T extends VectorMap = any>(children: T): Schema<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Schema<T>;\n    /** @nocollapse */\n    public static new(...args: any[]) {\n        return new Schema(selectFieldArgs(args)[0]);\n    }\n\n    public readonly fields: Field<T[keyof T]>[];\n    public readonly metadata: Map<string, string>;\n    public readonly dictionaries: Map<number, DataType>;\n\n    constructor(fields: Field[] = [],\n                metadata?: Map<string, string> | null,\n                dictionaries?: Map<number, DataType> | null) {\n        this.fields = (fields || []) as Field<T[keyof T]>[];\n        this.metadata = metadata || new Map();\n        if (!dictionaries) {\n            dictionaries = generateDictionaryMap(fields);\n        }\n        this.dictionaries = dictionaries;\n    }\n    public get [Symbol.toStringTag]() { return 'Schema'; }\n    public toString() {\n        return `Schema<{ ${this.fields.map((f, i) => `${i}: ${f}`).join(', ')} }>`;\n    }\n\n    public compareTo(other?: Schema | null): other is Schema<T> {\n        return comparer.compareSchemas(this, other);\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema<{ [P in K]: T[P] }>(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        return new Schema<{ [key: string]: K }>(columnIndices.map((i) => this.fields[i]).filter(Boolean), this.metadata);\n    }\n\n    public assign<R extends { [key: string]: DataType } = any>(schema: Schema<R>): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...fields: (Field<R[keyof R]> | Field<R[keyof R]>[])[]): Schema<T & R>;\n    public assign<R extends { [key: string]: DataType } = any>(...args: (Schema<R> | Field<R[keyof R]> | Field<R[keyof R]>[])[]) {\n\n        const other = args[0] instanceof Schema ? args[0] as Schema<R>\n            : new Schema<R>(selectArgs<Field<R[keyof R]>>(Field, args));\n\n        const curFields = [...this.fields] as Field[];\n        const metadata = mergeMaps(mergeMaps(new Map(), this.metadata), other.metadata);\n        const newFields = other.fields.filter((f2) => {\n            const i = curFields.findIndex((f) => f.name === f2.name);\n            return ~i ? (curFields[i] = f2.clone({\n                metadata: mergeMaps(mergeMaps(new Map(), curFields[i].metadata), f2.metadata)\n            })) && false : true;\n        }) as Field[];\n\n        const newDictionaries = generateDictionaryMap(newFields, new Map());\n\n        return new Schema<T & R>(\n            [...curFields, ...newFields], metadata,\n            new Map([...this.dictionaries, ...newDictionaries])\n        );\n    }\n}\n\nexport class Field<T extends DataType = any> {\n\n    public static new<T extends DataType = any>(props: { name: string | number, type: T, nullable?: boolean, metadata?: Map<string, string> | null }): Field<T>;\n    public static new<T extends DataType = any>(name: string | number | Field<T>, type: T, nullable?: boolean, metadata?: Map<string, string> | null): Field<T>;\n    /** @nocollapse */\n    public static new<T extends DataType = any>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        if (args[0] && typeof args[0] === 'object') {\n            ({ name } = args[0]);\n            (type === undefined) && (type = args[0].type);\n            (nullable === undefined) && (nullable = args[0].nullable);\n            (metadata === undefined) && (metadata = args[0].metadata);\n        }\n        return new Field<T>(`${name}`, type, nullable, metadata);\n    }\n\n    public readonly type: T;\n    public readonly name: string;\n    public readonly nullable: boolean;\n    public readonly metadata: Map<string, string>;\n\n    constructor(name: string, type: T, nullable = false, metadata?: Map<string, string> | null) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata || new Map();\n    }\n\n    public get typeId() { return this.type.typeId; }\n    public get [Symbol.toStringTag]() { return 'Field'; }\n    public toString() { return `${this.name}: ${this.type}`; }\n    public compareTo(other?: Field | null): other is Field<T> {\n        return comparer.compareField(this, other);\n    }\n    public clone<R extends DataType = T>(props: { name?: string | number, type?: R, nullable?: boolean, metadata?: Map<string, string> | null }): Field<R>;\n    public clone<R extends DataType = T>(name?: string | number | Field<T>, type?: R, nullable?: boolean, metadata?: Map<string, string> | null): Field<R>;\n    public clone<R extends DataType = T>(...args: any[]) {\n        let [name, type, nullable, metadata] = args;\n        (!args[0] || typeof args[0] !== 'object')\n            ? ([name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata] = args)\n            : ({name = this.name, type = this.type, nullable = this.nullable, metadata = this.metadata} = args[0]);\n        return Field.new<R>(name, type, nullable, metadata);\n    }\n}\n\n/** @ignore */\nfunction mergeMaps<TKey, TVal>(m1?: Map<TKey, TVal> | null, m2?: Map<TKey, TVal> | null): Map<TKey, TVal> {\n    return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n\n/** @ignore */\nfunction generateDictionaryMap(fields: Field[], dictionaries = new Map<number, DataType>()): Map<number, DataType> {\n\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n            } else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children && type.children.length > 0) {\n            generateDictionaryMap(type.children, dictionaries);\n        }\n    }\n\n    return dictionaries;\n}\n\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\n(Schema.prototype as any).fields = null;\n(Schema.prototype as any).metadata = null;\n(Schema.prototype as any).dictionaries = null;\n\n(Field.prototype as any).type = null;\n(Field.prototype as any).name = null;\n(Field.prototype as any).nullable = null;\n(Field.prototype as any).metadata = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { DataType, List } from '../type';\nimport { OffsetsBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions, VariableWidthBuilder } from '../builder';\n\n/** @ignore */\nexport class ListBuilder<T extends DataType = any, TNull = any> extends VariableWidthBuilder<List<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    protected _offsets: OffsetsBufferBuilder;\n    constructor(opts: BuilderOptions<List<T>, TNull>) {\n        super(opts);\n        this._offsets = new OffsetsBufferBuilder();\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new List(new Field(name, child.type, true));\n        return this.numChildren - 1;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n    protected _flushPending(pending: Map<number, T['TValue'] | undefined>) {\n        const run = this._run;\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        let index = 0, value: Uint8Array | undefined;\n        for ([index, value] of pending) {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.length);\n                setValue(this, index, run.bind(value));\n            }\n        }\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Run } from './run';\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListBuilder<T extends DataType = any, TNull = any> extends Builder<FixedSizeList<T>, TNull> {\n    protected _run = new Run<T, TNull>();\n    public setValue(index: number, value: T['TValue']) {\n        super.setValue(index, this._run.bind(value));\n    }\n    public addChild(child: Builder<T>, name = '0') {\n        if (this.numChildren > 0) {\n            throw new Error('FixedSizeListBuilder can only have one child.');\n        }\n        const childIndex = this.children.push(child);\n        this.type = new FixedSizeList(this.type.listSize, new Field(name, child.type, true));\n        return childIndex;\n    }\n    public clear() {\n        this._run.clear();\n        return super.clear();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataType, Map_, Struct } from '../type';\nimport { Builder, VariableWidthBuilder } from '../builder';\n\n/** @ignore */ type MapValue<K extends DataType = any, V extends DataType = any> = Map_<K, V>['TValue'];\n/** @ignore */ type MapValues<K extends DataType = any, V extends DataType = any> = Map<number, MapValue<K, V> | undefined>;\n/** @ignore */ type MapValueExt<K extends DataType = any, V extends DataType = any> = MapValue<K, V> | { [key: string]: V } | { [key: number]: V } ;\n\n/** @ignore */\nexport class MapBuilder<K extends DataType = any, V extends DataType = any, TNull = any> extends VariableWidthBuilder<Map_<K, V>, TNull> {\n\n    protected _pending: MapValues<K, V> | undefined;\n    public set(index: number, value: MapValueExt<K, V> | TNull) {\n        return super.set(index, value as MapValue<K, V> | TNull);\n    }\n\n    public setValue(index: number, value: MapValueExt<K, V>) {\n        value = value instanceof Map ? value : new Map(Object.entries(value));\n        const pending = this._pending || (this._pending = new Map() as MapValues<K, V>);\n        const current = pending.get(index);\n        current && (this._pendingLength -= current.size);\n        this._pendingLength += value.size;\n        pending.set(index, value);\n    }\n\n    public addChild(child: Builder<Struct<{ key: K, value: V }>>, name = `${this.numChildren}`) {\n        if (this.numChildren > 0) {\n            throw new Error('ListBuilder can only have one child.');\n        }\n        this.children[this.numChildren] = child;\n        this.type = new Map_<K, V>(new Field(name, child.type, true), this.type.keysSorted);\n        return this.numChildren - 1;\n    }\n\n    protected _flushPending(pending: MapValues<K, V>) {\n        const offsets = this._offsets;\n        const setValue = this._setValue;\n        pending.forEach((value, index) => {\n            if (value === undefined) {\n                offsets.set(index, 0);\n            } else {\n                offsets.set(index, value.size);\n                setValue(this, index, value);\n            }\n        });\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { Builder } from '../builder';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */\nexport class StructBuilder<T extends { [key: string]: DataType } = any, TNull = any> extends Builder<Struct<T>, TNull> {\n    public addChild(child: Builder, name = `${this.numChildren}`) {\n        const childIndex = this.children.push(child);\n        this.type = new Struct([...this.type.children, new Field(name, child.type, true)]);\n        return childIndex;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Field } from '../schema';\nimport { DataBufferBuilder } from './buffer';\nimport { Builder, BuilderOptions } from '../builder';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport interface UnionBuilderOptions<T extends Union = any, TNull = any> extends BuilderOptions<T, TNull> {\n    valueToChildTypeId?: (builder: UnionBuilder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport abstract class UnionBuilder<T extends Union, TNull = any> extends Builder<T, TNull> {\n\n    protected _typeIds: DataBufferBuilder<Int8Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._typeIds = new DataBufferBuilder(new Int8Array(0), 1);\n        if (typeof options['valueToChildTypeId'] === 'function') {\n            this._valueToChildTypeId = options['valueToChildTypeId'];\n        }\n    }\n\n    public get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n\n    public append(value: T['TValue'] | TNull, childTypeId?: number) {\n        return this.set(this.length, value, childTypeId);\n    }\n\n    public set(index: number, value: T['TValue'] | TNull, childTypeId?: number) {\n        if (childTypeId === undefined) {\n            childTypeId = this._valueToChildTypeId(this, value, index);\n        }\n        if (this.setValid(index, this.isValid(value))) {\n            this.setValue(index, value, childTypeId);\n        }\n        return this;\n    }\n\n    // @ts-ignore\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        this._typeIds.set(index, childTypeId!);\n        super.setValue(index, value);\n    }\n\n    // @ts-ignore\n    public addChild(child: Builder, name = `${this.children.length}`) {\n        const childTypeId = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this.type = <T> new Union(mode, [...typeIds, childTypeId], fields);\n        return childTypeId;\n    }\n\n    /** @ignore */\n    // @ts-ignore\n    protected _valueToChildTypeId(builder: UnionBuilder<T, TNull>, value: any, offset: number): number {\n        throw new Error(`Cannot map UnionBuilder value to child typeId. \\\nPass the \\`childTypeId\\` as the second argument to unionBuilder.append(), \\\nor supply a \\`valueToChildTypeId\\` function as part of the UnionBuilder constructor options.`);\n    }\n}\n\n/** @ignore */\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n/** @ignore */\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n\n    protected _offsets: DataBufferBuilder<Int32Array>;\n\n    constructor(options: UnionBuilderOptions<T, TNull>) {\n        super(options);\n        this._offsets = new DataBufferBuilder(new Int32Array(0));\n    }\n\n    /** @ignore */\n    public setValue(index: number, value: T['TValue'], childTypeId?: number) {\n        const childIndex = this.type.typeIdToChildIndex[childTypeId!];\n        this._offsets.set(index, this.getChildAt(childIndex)!.length);\n        return super.setValue(index, value, childTypeId);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { float64ToUint16 } from '../util/math';\nimport { toArrayBufferView } from '../util/buffer';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface SetVisitor extends Visitor {\n    visit<T extends VectorType>(node: T, index: number, value: T['TValue']): void;\n    visitMany<T extends VectorType>(nodes: T[], indices: number[], values: T['TValue'][]): void[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number, value: VectorType<T>['TValue']) => void;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitList                 <T extends List>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, index: number, value: T['TValue']): void;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, index: number, value: T['TValue']): void;\n}\n\n/** @ignore */\nexport class SetVisitor extends Visitor {}\n\n/** @ignore */\nconst setEpochMsToDays = (data: Int32Array, index: number, epochMs: number) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data: Int32Array, index: number, epochMs: number) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n\n/** @ignore */\nconst setVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number, value: Uint8Array) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n\n/** @ignore */\nconst setBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number, val: boolean) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |=  (1 << (idx % 8)))  // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n\n};\n\n/** @ignore */ type Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */ type Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst setDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = float64ToUint16(value); };\n/** @ignore */\nconst setNumericX2       = <T extends Numeric2X>      (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (typeof value) {\n        case 'bigint': vector.values64[index] = value; break;\n        case 'number': vector.values[index * vector.stride] = value; break;\n        default:\n            const val = value as T['TArray'];\n            const { stride, ArrayType } = vector;\n            const long = toArrayBufferView<T['TArray']>(ArrayType, val);\n            vector.values.set(long.subarray(0, stride), stride * index);\n    }\n};\n/** @ignore */\nconst setFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, stride), stride * index); };\n\n/** @ignore */\nconst setBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number, value: T['TValue']) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = <T extends Int>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value as Numeric1X['TValue'])\n        : setNumericX2(vector as VectorType<Numeric2X>, index, value as Numeric2X['TValue']);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = <T extends Float>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector as VectorType<Numeric1X>, index, value)\n        : setFloat16(vector as VectorType<Float16>, index, value);\n};\n\n/* istanbul ignore next */\nconst setDate = <T extends Date_> (vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector as VectorType<DateDay>, index, value)\n        : setDateMillisecond(vector as VectorType<DateMillisecond>, index, value);\n};\n\n/** @ignore */\nconst setTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number, value: T['TValue']): void => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimestampSecond(vector as VectorType<TimestampSecond>, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index, value);\n        case TimeUnit.NANOSECOND:  return  setTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index, value);\n    }\n};\n\n/** @ignore */\nconst setTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number, value: T['TValue']): void => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime            = <T extends Time>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      setTimeSecond(vector as VectorType<TimeSecond>, index, value as TimeSecond['TValue']);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector as VectorType<TimeMillisecond>, index, value as TimeMillisecond['TValue']);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index, value as TimeMicrosecond['TValue']);\n        case TimeUnit.NANOSECOND:  return  setTimeNanosecond(vector as VectorType<TimeNanosecond>, index, value as TimeNanosecond['TValue']);\n    }\n};\n\n/** @ignore */\nconst setDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 4), 4 * index); };\n\n/** @ignore */\nconst setList = <T extends List>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, value.get(++idx));\n    }\n};\n\n/** @ignore */\nconst setMap = <T extends Map_>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n    const values = vector.getChildAt(0)!, valueOffsets = vector.valueOffsets;\n    const entries = value instanceof Map ? [...value] : Object.entries(value);\n    for (let idx = -1, itr = valueOffsets[index], end = valueOffsets[index + 1]; itr < end;) {\n        values.set(itr++, entries[++idx]);\n    }\n};\n\n/** @ignore */ const _setStructArrayValue = (o: number, v: any[]) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v[i]);\n/** @ignore */ const _setStructVectorValue = (o: number, v: Vector) => (c: Vector | null, _: Field, i: number) => c && c.set(o, v.get(i));\n/** @ignore */ const _setStructMapValue = (o: number, v: Map<string, any>) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v.get(f.name));\n/** @ignore */ const _setStructObjectValue = (o: number, v: { [key: string]: any }) => (c: Vector | null, f: Field, _: number) => c && c.set(o, v[f.name]);\n/** @ignore */\nconst setStruct = <T extends Struct>(vector: VectorType<T>, index: number, value: T['TValue']) => {\n\n    const setValue = value instanceof Map    ? _setStructMapValue(index, value)    :\n                     value instanceof Vector ? _setStructVectorValue(index, value) :\n                     Array.isArray(value)    ? _setStructArrayValue(index, value)  :\n                                               _setStructObjectValue(index, value) ;\n\n    vector.type.children.forEach((f: Field, i: number) => setValue(vector.getChildAt(i), f, i));\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number, value: V['TValue']) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector as VectorType<DenseUnion>, index, value) :\n        setSparseUnion(vector as VectorType<SparseUnion>, index, value);\n};\n\n/** @ignore */\nconst setDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(vector.valueOffsets[index], value);\n};\n\n/** @ignore */\nconst setSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    child && child.set(index, value);\n};\n\n/** @ignore */\nconst setDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = <T extends Interval>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector as VectorType<IntervalDayTime>, index, value)\n        : setIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index, value);\n};\n\n/** @ignore */\nconst setIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number, value: T['TValue']): void => { values[index] = (value[0] * 12) + (value[1] % 12); };\n\n/** @ignore */\nconst setFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number, value: T['TValue']): void => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\n\nSetVisitor.prototype.visitBool                 =                 setBool;\nSetVisitor.prototype.visitInt                  =                  setInt;\nSetVisitor.prototype.visitInt8                 =              setNumeric;\nSetVisitor.prototype.visitInt16                =              setNumeric;\nSetVisitor.prototype.visitInt32                =              setNumeric;\nSetVisitor.prototype.visitInt64                =            setNumericX2;\nSetVisitor.prototype.visitUint8                =              setNumeric;\nSetVisitor.prototype.visitUint16               =              setNumeric;\nSetVisitor.prototype.visitUint32               =              setNumeric;\nSetVisitor.prototype.visitUint64               =            setNumericX2;\nSetVisitor.prototype.visitFloat                =                setFloat;\nSetVisitor.prototype.visitFloat16              =              setFloat16;\nSetVisitor.prototype.visitFloat32              =              setNumeric;\nSetVisitor.prototype.visitFloat64              =              setNumeric;\nSetVisitor.prototype.visitUtf8                 =                 setUtf8;\nSetVisitor.prototype.visitBinary               =               setBinary;\nSetVisitor.prototype.visitFixedSizeBinary      =      setFixedSizeBinary;\nSetVisitor.prototype.visitDate                 =                 setDate;\nSetVisitor.prototype.visitDateDay              =              setDateDay;\nSetVisitor.prototype.visitDateMillisecond      =      setDateMillisecond;\nSetVisitor.prototype.visitTimestamp            =            setTimestamp;\nSetVisitor.prototype.visitTimestampSecond      =      setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond  =  setTimestampNanosecond;\nSetVisitor.prototype.visitTime                 =                 setTime;\nSetVisitor.prototype.visitTimeSecond           =           setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond      =      setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond      =      setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond       =       setTimeNanosecond;\nSetVisitor.prototype.visitDecimal              =              setDecimal;\nSetVisitor.prototype.visitList                 =                 setList;\nSetVisitor.prototype.visitStruct               =               setStruct;\nSetVisitor.prototype.visitUnion                =                setUnion;\nSetVisitor.prototype.visitDenseUnion           =           setDenseUnion;\nSetVisitor.prototype.visitSparseUnion          =          setSparseUnion;\nSetVisitor.prototype.visitDictionary           =           setDictionary;\nSetVisitor.prototype.visitInterval             =        setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime      =      setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth    =    setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList        =        setFixedSizeList;\nSetVisitor.prototype.visitMap                  =                  setMap;\n\n/** @ignore */\nexport const instance = new SetVisitor();\n","// automatically generated by the FlatBuffers compiler, do not modify\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as NS7624605610262437867 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Footer {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Footer\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Footer {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * @param flatbuffers.ByteBuffer bb\n         * @param Footer= obj\n         * @returns Footer\n         */\n        static getRootAsFooter(bb: flatbuffers.ByteBuffer, obj?: Footer): Footer {\n            return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n        }\n\n        /**\n         * @returns org.apache.arrow.flatbuf.MetadataVersion\n         */\n        version(): NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion {\n            let offset = this.bb!.__offset(this.bb_pos, 4);\n            return offset ? /**  */ (this.bb!.readInt16(this.bb_pos + offset)) : NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1;\n        }\n\n        /**\n         * @param org.apache.arrow.flatbuf.Schema= obj\n         * @returns org.apache.arrow.flatbuf.Schema|null\n         */\n        schema(obj?: NS7624605610262437867.org.apache.arrow.flatbuf.Schema): NS7624605610262437867.org.apache.arrow.flatbuf.Schema | null {\n            let offset = this.bb!.__offset(this.bb_pos, 6);\n            return offset ? (obj || new NS7624605610262437867.org.apache.arrow.flatbuf.Schema).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        dictionaries(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        dictionariesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 8);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param number index\n         * @param org.apache.arrow.flatbuf.Block= obj\n         * @returns org.apache.arrow.flatbuf.Block\n         */\n        recordBatches(index: number, obj?: org.apache.arrow.flatbuf.Block): org.apache.arrow.flatbuf.Block | null {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb!.__vector(this.bb_pos + offset) + index * 24, this.bb!) : null;\n        }\n\n        /**\n         * @returns number\n         */\n        recordBatchesLength(): number {\n            let offset = this.bb!.__offset(this.bb_pos, 10);\n            return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         */\n        static startFooter(builder: flatbuffers.Builder) {\n            builder.startObject(4);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param org.apache.arrow.flatbuf.MetadataVersion version\n         */\n        static addVersion(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion) {\n            builder.addFieldInt16(0, version, NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion.V1);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset schemaOffset\n         */\n        static addSchema(builder: flatbuffers.Builder, schemaOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(1, schemaOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset dictionariesOffset\n         */\n        static addDictionaries(builder: flatbuffers.Builder, dictionariesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(2, dictionariesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startDictionariesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset recordBatchesOffset\n         */\n        static addRecordBatches(builder: flatbuffers.Builder, recordBatchesOffset: flatbuffers.Offset) {\n            builder.addFieldOffset(3, recordBatchesOffset, 0);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param number numElems\n         */\n        static startRecordBatchesVector(builder: flatbuffers.Builder, numElems: number) {\n            builder.startVector(24, numElems, 8);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @returns flatbuffers.Offset\n         */\n        static endFooter(builder: flatbuffers.Builder): flatbuffers.Offset {\n            let offset = builder.endObject();\n            return offset;\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Offset offset\n         */\n        static finishFooterBuffer(builder: flatbuffers.Builder, offset: flatbuffers.Offset) {\n            builder.finish(offset);\n        }\n\n        static createFooter(builder: flatbuffers.Builder, version: NS7624605610262437867.org.apache.arrow.flatbuf.MetadataVersion, schemaOffset: flatbuffers.Offset, dictionariesOffset: flatbuffers.Offset, recordBatchesOffset: flatbuffers.Offset): flatbuffers.Offset {\n            Footer.startFooter(builder);\n            Footer.addVersion(builder, version);\n            Footer.addSchema(builder, schemaOffset);\n            Footer.addDictionaries(builder, dictionariesOffset);\n            Footer.addRecordBatches(builder, recordBatchesOffset);\n            return Footer.endFooter(builder);\n        }\n    }\n}\n/**\n * @constructor\n */\nexport namespace org.apache.arrow.flatbuf {\n    export class Block {\n        bb: flatbuffers.ByteBuffer | null = null;\n\n        bb_pos: number = 0;\n        /**\n         * @param number i\n         * @param flatbuffers.ByteBuffer bb\n         * @returns Block\n         */\n        __init(i: number, bb: flatbuffers.ByteBuffer): Block {\n            this.bb_pos = i;\n            this.bb = bb;\n            return this;\n        }\n\n        /**\n         * Index to the start of the RecordBlock (note this is past the Message header)\n         *\n         * @returns flatbuffers.Long\n         */\n        offset(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos);\n        }\n\n        /**\n         * Length of the metadata\n         *\n         * @returns number\n         */\n        metaDataLength(): number {\n            return this.bb!.readInt32(this.bb_pos + 8);\n        }\n\n        /**\n         * Length of the data (this is aligned so there can be a gap between this and\n         * the metatdata).\n         *\n         * @returns flatbuffers.Long\n         */\n        bodyLength(): flatbuffers.Long {\n            return this.bb!.readInt64(this.bb_pos + 16);\n        }\n\n        /**\n         * @param flatbuffers.Builder builder\n         * @param flatbuffers.Long offset\n         * @param number metaDataLength\n         * @param flatbuffers.Long bodyLength\n         * @returns flatbuffers.Offset\n         */\n        static createBlock(builder: flatbuffers.Builder, offset: flatbuffers.Long, metaDataLength: number, bodyLength: flatbuffers.Long): flatbuffers.Offset {\n            builder.prep(8, 24);\n            builder.writeInt64(bodyLength);\n            builder.pad(4);\n            builder.writeInt32(metaDataLength);\n            builder.writeInt64(offset);\n            return builder.offset();\n        }\n\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, BuilderCtor } from '../interfaces';\nimport { BinaryBuilder } from '../builder/binary';\nimport { BoolBuilder } from '../builder/bool';\nimport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from '../builder/date';\nimport { DecimalBuilder } from '../builder/decimal';\nimport { DictionaryBuilder } from '../builder/dictionary';\nimport { FixedSizeBinaryBuilder } from '../builder/fixedsizebinary';\nimport { FixedSizeListBuilder } from '../builder/fixedsizelist';\nimport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from '../builder/float';\nimport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from '../builder/interval';\nimport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from '../builder/int';\nimport { ListBuilder } from '../builder/list';\nimport { MapBuilder } from '../builder/map';\nimport { NullBuilder } from '../builder/null';\nimport { StructBuilder } from '../builder/struct';\nimport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from '../builder/timestamp';\nimport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from '../builder/time';\nimport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from '../builder/union';\nimport { Utf8Builder } from '../builder/utf8';\n\n/** @ignore */\nexport interface GetBuilderCtor extends Visitor {\n    visit<T extends Type>(type: T): BuilderCtor<T>;\n    visitMany<T extends Type>(types: T[]): BuilderCtor<T>[];\n    getVisitFn<T extends Type>(type: T): () => BuilderCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => BuilderCtor<T>;\n}\n\n/** @ignore */\nexport class GetBuilderCtor extends Visitor {\n    public visitNull                 () { return NullBuilder;                 }\n    public visitBool                 () { return BoolBuilder;                 }\n    public visitInt                  () { return IntBuilder;                  }\n    public visitInt8                 () { return Int8Builder;                 }\n    public visitInt16                () { return Int16Builder;                }\n    public visitInt32                () { return Int32Builder;                }\n    public visitInt64                () { return Int64Builder;                }\n    public visitUint8                () { return Uint8Builder;                }\n    public visitUint16               () { return Uint16Builder;               }\n    public visitUint32               () { return Uint32Builder;               }\n    public visitUint64               () { return Uint64Builder;               }\n    public visitFloat                () { return FloatBuilder;                }\n    public visitFloat16              () { return Float16Builder;              }\n    public visitFloat32              () { return Float32Builder;              }\n    public visitFloat64              () { return Float64Builder;              }\n    public visitUtf8                 () { return Utf8Builder;                 }\n    public visitBinary               () { return BinaryBuilder;               }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryBuilder;      }\n    public visitDate                 () { return DateBuilder;                 }\n    public visitDateDay              () { return DateDayBuilder;              }\n    public visitDateMillisecond      () { return DateMillisecondBuilder;      }\n    public visitTimestamp            () { return TimestampBuilder;            }\n    public visitTimestampSecond      () { return TimestampSecondBuilder;      }\n    public visitTimestampMillisecond () { return TimestampMillisecondBuilder; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondBuilder; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondBuilder;  }\n    public visitTime                 () { return TimeBuilder;                 }\n    public visitTimeSecond           () { return TimeSecondBuilder;           }\n    public visitTimeMillisecond      () { return TimeMillisecondBuilder;      }\n    public visitTimeMicrosecond      () { return TimeMicrosecondBuilder;      }\n    public visitTimeNanosecond       () { return TimeNanosecondBuilder;       }\n    public visitDecimal              () { return DecimalBuilder;              }\n    public visitList                 () { return ListBuilder;                 }\n    public visitStruct               () { return StructBuilder;               }\n    public visitUnion                () { return UnionBuilder;                }\n    public visitDenseUnion           () { return DenseUnionBuilder;           }\n    public visitSparseUnion          () { return SparseUnionBuilder;          }\n    public visitDictionary           () { return DictionaryBuilder;           }\n    public visitInterval             () { return IntervalBuilder;             }\n    public visitIntervalDayTime      () { return IntervalDayTimeBuilder;      }\n    public visitIntervalYearMonth    () { return IntervalYearMonthBuilder;    }\n    public visitFixedSizeList        () { return FixedSizeListBuilder;        }\n    public visitMap                  () { return MapBuilder;                  }\n}\n\n/** @ignore */\nexport const instance = new GetBuilderCtor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport { Builder, BuilderOptions } from '../builder';\nexport { BoolBuilder } from './bool';\nexport { NullBuilder } from './null';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { Utf8Builder } from './utf8';\nexport { BinaryBuilder } from './binary';\nexport { ListBuilder } from './list';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { MapBuilder } from './map';\nexport { StructBuilder } from './struct';\nexport { UnionBuilder, SparseUnionBuilder, DenseUnionBuilder } from './union';\n\nimport { Type } from '../enum';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { BuilderType as B } from '../interfaces';\nimport { Builder, BuilderOptions } from '../builder';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\nfunction newBuilder<T extends DataType = any, TNull = any>(options: BuilderOptions<T, TNull>): B<T, TNull> {\n\n    const type = options.type;\n    const builder = new (getBuilderConstructor.getVisitFn<T>(type)())(options) as Builder<T, TNull>;\n\n    if (type.children && type.children.length > 0) {\n\n        const children = options['children'] || [] as BuilderOptions[];\n        const defaultOptions = { 'nullValues': options['nullValues'] };\n        const getChildOptions = Array.isArray(children)\n            ? ((_: Field, i: number) => children[i] || defaultOptions)\n            : (({ name }: Field) => children[name] || defaultOptions);\n\n        type.children.forEach((field, index) => {\n            const { type } = field;\n            const opts = getChildOptions(field, index);\n            builder.children.push(newBuilder({ ...opts, type }));\n        });\n    }\n\n    return builder as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number' && T !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.visitBinary;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* tslint:disable:class-name */\n\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Block = File_.org.apache.arrow.flatbuf.Block;\nimport _Footer = File_.org.apache.arrow.flatbuf.Footer;\n\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\n\n/** @ignore */\nclass Footer_ {\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema()!);\n        return new OffHeapFooter(schema, footer) as Footer_;\n    }\n\n    /** @nocollapse */\n    public static encode(footer: Footer_) {\n\n        const b: Builder = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n\n        const dictionaryBatchesOffset = b.endVector();\n\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n\n        return b.asUint8Array();\n    }\n\n    // @ts-ignore\n    protected _recordBatches: FileBlock[];\n    // @ts-ignore\n    protected _dictionaryBatches: FileBlock[];\n    public get numRecordBatches() { return this._recordBatches.length; }\n    public get numDictionaries() { return this._dictionaryBatches.length; }\n\n    constructor(public schema: Schema,\n                public version: MetadataVersion = MetadataVersion.V4,\n                recordBatches?: FileBlock[], dictionaryBatches?: FileBlock[]) {\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n\n    public *recordBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) { yield block; }\n        }\n    }\n\n    public *dictionaryBatches(): Iterable<FileBlock> {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) { yield block; }\n        }\n    }\n\n    public getRecordBatch(index: number) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\n\nexport { Footer_ as Footer };\n\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n\n    public get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    public get numDictionaries() { return this._footer.dictionariesLength(); }\n\n    constructor(schema: Schema, protected _footer: _Footer) {\n        super(schema, _footer.version());\n    }\n\n    public getRecordBatch(index: number) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n\n    public getDictionaryBatch(index: number) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) { return FileBlock.decode(fileBlock); }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nexport class FileBlock {\n\n    /** @nocollapse */\n    public static decode(block: _Block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n\n    /** @nocollapse */\n    public static encode(b: Builder, fileBlock: FileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n\n    public offset: number;\n    public bodyLength: number;\n    public metaDataLength: number;\n\n    constructor(metaDataLength: number, bodyLength: Long | number, offset: Long | number) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, Readable, Writable, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays, ArrayBufferViewInput } from '../util/buffer';\n\nimport {\n    isPromise, isFetchResponse,\n    isIterable, isAsyncIterable,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */\nexport type WritableSink<T> = Writable<T> | WritableStream<T> | NodeJS.WritableStream | null;\n/** @ignore */\nexport type ReadableSource<T> = Readable<T> | PromiseLike<T> | AsyncIterable<T> | ReadableStream<T> | NodeJS.ReadableStream | null;\n\n/** @ignore */\nexport class AsyncByteQueue<T extends ArrayBufferViewInput = Uint8Array> extends AsyncQueue<Uint8Array, T> {\n    public write(value: ArrayBufferViewInput | Uint8Array) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value as T);\n        }\n    }\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values as any[])[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n\n/** @ignore */\nexport class ByteStream implements IterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: ByteStreamSource<Uint8Array>;\n    constructor(source?: Iterable<ArrayBufferViewInput> | ArrayBufferViewInput) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\nexport class AsyncByteStream implements Readable<Uint8Array>, AsyncIterableIterator<Uint8Array> {\n    // @ts-ignore\n    private source: AsyncByteStreamSource<Uint8Array>;\n    constructor(source?: PromiseLike<ArrayBufferViewInput> | Response | ReadableStream<ArrayBufferViewInput> | NodeJS.ReadableStream | AsyncIterable<ArrayBufferViewInput> | Iterable<ArrayBufferViewInput>) {\n        if (source instanceof AsyncByteStream) {\n            this.source = (source as AsyncByteStream).source;\n        } else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        } else if (isReadableDOMStream<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        } else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body!));\n        } else if (isIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        } else if (isPromise<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        } else if (isAsyncIterable<ArrayBufferViewInput>(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    public next(value?: any) { return this.source.next(value); }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public get closed(): Promise<void> { return this.source.closed; }\n    public cancel(reason?: any) { return this.source.cancel(reason); }\n    public peek(size?: number | null) { return this.source.peek(size); }\n    public read(size?: number | null) { return this.source.read(size); }\n}\n\n/** @ignore */\ninterface ByteStreamSourceIterator<T> extends IterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): IteratorResult<T>;\n}\n\n/** @ignore */\ninterface AsyncByteStreamSourceIterator<T> extends AsyncIterableIterator<T> {\n    next(value?: { cmd: 'peek' | 'read', size?: number | null }): Promise<IteratorResult<T>>;\n}\n\n/** @ignore */\nclass ByteStreamSource<T> {\n    constructor(protected source: ByteStreamSourceIterator<T>) {}\n    public cancel(reason?: any) { this.return(reason); }\n    public peek(size?: number | null): T | null { return this.next(size, 'peek').value; }\n    public read(size?: number | null): T | null { return this.next(size, 'read').value; }\n    public next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return this.source.next({ cmd, size }); }\n    public throw(value?: any) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    public return(value?: any) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n\n/** @ignore */\nclass AsyncByteStreamSource<T> implements Readable<T> {\n\n    private _closedPromise: Promise<void>;\n    private _closedPromiseResolve?: (value?: any) => void;\n    constructor (protected source: ByteStreamSourceIterator<T> | AsyncByteStreamSourceIterator<T>) {\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    public async cancel(reason?: any) { await this.return(reason); }\n    public get closed(): Promise<void> { return this._closedPromise; }\n    public async read(size?: number | null): Promise<T | null> { return (await this.next(size, 'read')).value; }\n    public async peek(size?: number | null): Promise<T | null> { return (await this.next(size, 'peek')).value; }\n    public async next(size?: number | null, cmd: 'peek' | 'read' = 'read') { return (await this.source.next({ cmd, size })); }\n    public async throw(value?: any) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    public async return(value?: any) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { FileHandle } from './interfaces';\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\n\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    public size: number;\n    public position: number = 0;\n    protected buffer: Uint8Array | null;\n    constructor(buffer: ArrayBufferViewInput, byteLength?: number) {\n        super();\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    public readInt32(position: number) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public seek(position: number) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public read(nBytes?: number | null) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            this.position = Math.min(size,\n                 position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    public readAt(position: number, nBytes: number) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    public close() { this.buffer && (this.buffer = null); }\n    public throw(value?: any) { this.close(); return { done: true, value }; }\n    public return(value?: any) { this.close(); return { done: true, value }; }\n}\n\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    // @ts-ignore\n    public size: number;\n    public position: number = 0;\n    public _pending?: Promise<void>;\n    protected _handle: FileHandle | null;\n    constructor(file: FileHandle, byteLength?: number) {\n        super();\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        } else {\n            this._pending = (async () => {\n                this.size = (await file.stat()).size;\n                delete this._pending;\n            })();\n        }\n    }\n    public async readInt32(position: number) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    public async seek(position: number) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    public async read(nBytes?: number | null) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') { nBytes = Infinity; }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    public async readAt(position: number, nBytes: number) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    public async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    public async throw(value?: any) { await this.close(); return { done: true, value }; }\n    public async return(value?: any) { await this.close(); return { done: true, value }; }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nconst carryBit16 = 1 << 16;\n\n/** @ignore */\nfunction intAsHex(value: number): string {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n                      10,\n                      100,\n                      1000,\n                      10000,\n                      100000,\n                      1000000,\n                      10000000,\n                      100000000];\n\n/** @ignore */\nexport class BaseInt64 {\n    constructor (protected buffer: Uint32Array) {}\n\n    public high(): number { return this.buffer[1]; }\n    public low (): number { return this.buffer[0]; }\n\n    protected _times(other: BaseInt64) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n\n        let sum = product >>> 16;\n\n        product = L[2] * R[3];\n        sum += product;\n\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n\n        this.buffer[0] += sum << 16;\n\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n\n        return this;\n      }\n\n    protected _plus(other: BaseInt64) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n          ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n\n    public lessThan(other: BaseInt64): boolean {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n\n    public equals(other: BaseInt64): boolean {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n\n    public greaterThan(other: BaseInt64): boolean {\n        return other.lessThan(this);\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\n\n/** @ignore */\nexport class Uint64 extends BaseInt64 {\n    public times(other: Uint64): Uint64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Uint64): Uint64 {\n        this._plus(other);\n        return this;\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Uint64 {\n        return Uint64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Uint64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Uint64 {\n        const length = str.length;\n\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Uint64, right: Uint64): Uint64 {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int64 extends BaseInt64 {\n    public negate(): Int64 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        return this;\n    }\n\n    public times(other: Int64): Int64 {\n        this._times(other);\n        return this;\n    }\n\n    public plus(other: Int64): Int64 {\n        this._plus(other);\n        return this;\n    }\n\n    public lessThan(other: Int64): boolean {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(2)): Int64 {\n        return Int64.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(2)): Int64 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(2)): Int64 {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int64, right: Int64): Int64 {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\n\n/** @ignore */\nexport class Int128 {\n    constructor (private buffer: Uint32Array) {\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n\n    public high(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n\n    public low(): Int64 {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n\n    public negate(): Int128 {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n\n        if (this.buffer[0] == 0) { ++this.buffer[1]; }\n        if (this.buffer[1] == 0) { ++this.buffer[2]; }\n        if (this.buffer[2] == 0) { ++this.buffer[3]; }\n        return this;\n    }\n\n    public times(other: Int128): Int128 {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3],  0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2],  0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1],  0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0],  0]));\n\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n\n        this.buffer[1] = sum.low();\n\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n                        .plus(Uint64.multiply(L1, R2))\n                        .plus(Uint64.multiply(L2, R1))\n                        .plus(Uint64.multiply(L3, R0)).low();\n\n        return this;\n    }\n\n    public plus(other: Int128): Int128 {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n\n        return this;\n    }\n\n    public hex(): string {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n\n    /** @nocollapse */\n    public static multiply(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n\n    /** @nocollapse */\n    public static add(left: Int128, right: Int128): Int128 {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n\n    /** @nocollapse */\n    public static from(val: any, out_buffer = new Uint32Array(4)): Int128 {\n        return Int128.fromString(\n            typeof(val) === 'string' ? val : val.toString(),\n            out_buffer\n        );\n    }\n\n    /** @nocollapse */\n    public static fromNumber(num: number, out_buffer = new Uint32Array(4)): Int128 {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n\n    /** @nocollapse */\n    public static fromString(str: string, out_buffer = new Uint32Array(4)): Int128 {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                          kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n\n            out.times(multiple);\n            out.plus(chunk);\n\n            posn += group;\n        }\n\n        return negate ? out.negate() : out;\n    }\n\n    /** @nocollapse */\n    public static convertArray(values: (string|number)[]): Uint32Array {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport * as type from '../type';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\n\n/** @ignore */\nexport interface VectorLoader extends Visitor {\n    visit<T extends DataType>(node: Field<T> | T): Data<T>;\n    visitMany<T extends DataType>(nodes: (Field<T> | T)[]): Data<T>[];\n}\n\n/** @ignore */\nexport class VectorLoader extends Visitor {\n    private bytes: Uint8Array;\n    private nodes: FieldNode[];\n    private nodesIndex: number = -1;\n    private buffers: BufferRegion[];\n    private buffersIndex: number = -1;\n    private dictionaries: Map<number, Vector<any>>;\n    constructor(bytes: Uint8Array, nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super();\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n\n    public visit<T extends DataType>(node: Field<T> | T): Data<T> {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n\n    public visitNull            <T extends type.Null>            (type: T, { length,           } = this.nextFieldNode()) { return            Data.Null(type, 0, length);                                                                                                                                 }\n    public visitBool            <T extends type.Bool>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitInt             <T extends type.Int>             (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFloat           <T extends type.Float>           (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitUtf8            <T extends type.Utf8>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitBinary          <T extends type.Binary>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type));                                   }\n    public visitFixedSizeBinary <T extends type.FixedSizeBinary> (type: T, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDate            <T extends type.Date_>           (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTimestamp       <T extends type.Timestamp>       (type: T, { length, nullCount } = this.nextFieldNode()) { return       Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitTime            <T extends type.Time>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitDecimal         <T extends type.Decimal>         (type: T, { length, nullCount } = this.nextFieldNode()) { return         Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitList            <T extends type.List>            (type: T, { length, nullCount } = this.nextFieldNode()) { return            Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n    public visitStruct          <T extends type.Struct>          (type: T, { length, nullCount } = this.nextFieldNode()) { return          Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children));                                                 }\n    public visitUnion           <T extends type.Union>           (type: T                                              ) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type as type.SparseUnion) : this.visitDenseUnion(type as type.DenseUnion);                                      }\n    public visitDenseUnion      <T extends type.DenseUnion>      (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    public visitSparseUnion     <T extends type.SparseUnion>     (type: T, { length, nullCount } = this.nextFieldNode()) { return           Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children));                         }\n    public visitDictionary      <T extends type.Dictionary>      (type: T, { length, nullCount } = this.nextFieldNode()) { return      Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices), this.readDictionary(type));                        }\n    public visitInterval        <T extends type.Interval>        (type: T, { length, nullCount } = this.nextFieldNode()) { return        Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type));                                                           }\n    public visitFixedSizeList   <T extends type.FixedSizeList>   (type: T, { length, nullCount } = this.nextFieldNode()) { return   Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0]));                                                  }\n    public visitMap             <T extends type.Map_>            (type: T, { length, nullCount } = this.nextFieldNode()) { return             Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0]));                          }\n\n    protected nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    protected nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    protected readNullBitmap<T extends DataType>(type: T, nullCount: number, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    protected readOffsets<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readTypeIds<T extends DataType>(type: T, buffer?: BufferRegion) { return this.readData(type, buffer); }\n    protected readData<T extends DataType>(_type: T, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n    protected readDictionary<T extends type.Dictionary>(type: T): Vector<T['dictionary']> {\n        return this.dictionaries.get(type.id)!;\n    }\n}\n\n/** @ignore */\nexport class JSONVectorLoader extends VectorLoader {\n    private sources: any[][];\n    constructor(sources: any[][], nodes: FieldNode[], buffers: BufferRegion[], dictionaries: Map<number, Vector<any>>) {\n        super(new Uint8Array(0), nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    protected readNullBitmap<T extends DataType>(_type: T, nullCount: number, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    protected readOffsets<T extends DataType>(_type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    protected readTypeIds<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    protected readData<T extends DataType>(type: T, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset] as string[]));\n        } else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset] as string[]));\n        } else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset] as string[]);\n        } else if (DataType.isBool(type)) {\n            return packBools(sources[offset] as number[]);\n        } else if (DataType.isUtf8(type)) {\n            return encodeUtf8((sources[offset] as string[]).join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n\n/** @ignore */\nfunction binaryDataFromJSON(values: string[]) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport * as Schema_ from '../fb/Schema';\n\nimport * as type from '../type';\nimport { Visitor } from '../visitor';\n\nimport Null = Schema_.org.apache.arrow.flatbuf.Null;\nimport Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nimport Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nimport Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nimport Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nimport Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nimport Date = Schema_.org.apache.arrow.flatbuf.Date;\nimport Time = Schema_.org.apache.arrow.flatbuf.Time;\nimport Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nimport Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nimport List = Schema_.org.apache.arrow.flatbuf.List;\nimport Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nimport Union = Schema_.org.apache.arrow.flatbuf.Union;\nimport DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nimport FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nimport FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nimport Map_ = Schema_.org.apache.arrow.flatbuf.Map;\n\n/** @ignore */\nexport interface TypeAssembler extends Visitor {\n    visit<T extends type.DataType>(node: T, builder: Builder): number | undefined;\n}\n\n/** @ignore */\nexport class TypeAssembler extends Visitor {\n    public visit<T extends type.DataType>(node: T, builder: Builder): number | undefined {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    public visitNull<T extends type.Null>(_node: T, b: Builder) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    public visitInt<T extends type.Int>(node: T, b: Builder) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    public visitFloat<T extends type.Float>(node: T, b: Builder) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    public visitBinary<T extends type.Binary>(_node: T, b: Builder) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    public visitBool<T extends type.Bool>(_node: T, b: Builder) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    public visitUtf8<T extends type.Utf8>(_node: T, b: Builder) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    public visitDecimal<T extends type.Decimal>(node: T, b: Builder) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    public visitDate<T extends type.Date_>(node: T, b: Builder) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    public visitTime<T extends type.Time>(node: T, b: Builder) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    public visitTimestamp<T extends type.Timestamp>(node: T, b: Builder) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    public visitInterval<T extends type.Interval>(node: T, b: Builder) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    public visitList<T extends type.List>(_node: T, b: Builder) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    public visitStruct<T extends type.Struct>(_node: T, b: Builder) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    public visitUnion<T extends type.Union>(node: T, b: Builder) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    public visitDictionary<T extends type.Dictionary>(node: T, b: Builder) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    public visitFixedSizeBinary<T extends type.FixedSizeBinary>(node: T, b: Builder) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    public visitFixedSizeList<T extends type.FixedSizeList>(node: T, b: Builder) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    public visitMap<T extends type.Map_>(node: T, b: Builder) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\n\n/** @ignore */\nexport const instance = new TypeAssembler();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Schema, Field } from '../../schema';\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n\n/** @ignore */\nexport function schemaFromJSON(_schema: any, dictionaries: Map<number, DataType> = new Map()) {\n    return new Schema(\n        schemaFieldsFromJSON(_schema, dictionaries),\n        customMetadataFromJSON(_schema['customMetadata']),\n        dictionaries\n    );\n}\n\n/** @ignore */\nexport function recordBatchFromJSON(b: any) {\n    return new RecordBatch(\n        b['count'],\n        fieldNodesFromJSON(b['columns']),\n        buffersFromJSON(b['columns'])\n    );\n}\n\n/** @ignore */\nexport function dictionaryBatchFromJSON(b: any) {\n    return new DictionaryBatch(\n        recordBatchFromJSON(b['data']),\n        b['id'], b['isDelta']\n    );\n}\n\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema: any, dictionaries?: Map<number, DataType>) {\n    return (_schema['fields'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldChildrenFromJSON(_field: any, dictionaries?: Map<number, DataType>): Field[] {\n    return (_field['children'] || []).filter(Boolean).map((f: any) => Field.fromJSON(f, dictionaries));\n}\n\n/** @ignore */\nfunction fieldNodesFromJSON(xs: any[]): FieldNode[] {\n    return (xs || []).reduce<FieldNode[]>((fieldNodes, column: any) => [\n        ...fieldNodes,\n        new FieldNode(\n            column['count'],\n            nullCountFromJSON(column['VALIDITY'])\n        ),\n        ...fieldNodesFromJSON(column['children'])\n    ], [] as FieldNode[]);\n}\n\n/** @ignore */\nfunction buffersFromJSON(xs: any[], buffers: BufferRegion[] = []): BufferRegion[] {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n\n/** @ignore */\nfunction nullCountFromJSON(validity: number[]) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n\n/** @ignore */\nexport function fieldFromJSON(_field: any, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let keys: TKeys | null;\n    let field: Field | void;\n    let dictMeta: any;\n    let type: DataType<any>;\n    let dictType: Dictionary;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta['isOrdered']);\n        field = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction customMetadataFromJSON(_metadata?: object) {\n    return new Map<string, string>(Object.entries(_metadata || {}));\n}\n\n/** @ignore */\nfunction indexTypeFromJSON(_type: any) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n\n/** @ignore */\nfunction typeFromJSON(f: any, children?: Field[]): DataType<any> {\n\n    const typeId = f['type']['name'];\n\n    switch (typeId) {\n        case 'NONE':   return new Null();\n        case 'null':   return new Null();\n        case 'binary': return new Binary();\n        case 'utf8':   return new Utf8();\n        case 'bool':   return new Bool();\n        case 'list':   return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth'] as IntBitWidth);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']] as any);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']] as any);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']] as any, t['bitWidth'] as TimeBitWidth);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']] as any, t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']] as any);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']] as any, (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_((children || [])[0], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\n\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { ArrayBufferViewInput } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\n\nimport Long = flatbuffers.Long;\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport _Int = Schema_.org.apache.arrow.flatbuf.Int;\nimport Type = Schema_.org.apache.arrow.flatbuf.Type;\nimport _Field = Schema_.org.apache.arrow.flatbuf.Field;\nimport _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nimport _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nimport _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nimport _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nimport _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nimport _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nimport _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: Long = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    // @ts-ignore\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    // @ts-ignore\n    protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: Long | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: Long | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: Long | number, isDelta: boolean = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: Long | number, length: Long | number) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: Long | number, nullCount: Long | number) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type.NONE:    return new Null();\n        case Type.Null:    return new Null();\n        case Type.Binary:  return new Binary();\n        case Type.Utf8:    return new Utf8();\n        case Type.Bool:    return new Bool();\n        case Type.List:    return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal())!;\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date())!;\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    let type = field.type;\n    let typeId: Type = <any> field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (function() {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n                                                         : T extends MessageHeader.RecordBatch ? RecordBatch\n                                                         : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nimport ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array, ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, ReadableSource, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ArrowJSONLike, ITERATOR_DONE, FileHandle } from '../io/interfaces';\n\n/** @ignore */ const invalidMessageType       = (type: MessageHeader) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage              = (type: MessageHeader) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata   = (expected: number, actual: number) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected: number, actual: number) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n\n/** @ignore */\nexport class MessageReader implements IterableIterator<Message> {\n    protected source: ByteStream;\n    constructor(source: ByteStream | ArrayBufferViewInput | Iterable<ArrayBufferViewInput>) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    public [Symbol.iterator](): IterableIterator<Message> { return this as IterableIterator<Message>; }\n    public next(): IteratorResult<Message> {\n        let r;\n        if ((r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public throw(value?: any) { return this.source.throw(value); }\n    public return(value?: any) { return this.source.return(value); }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readMessageBody(bodyLength: number): Uint8Array {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected readMetadataLength(): IteratorResult<number> {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected readMetadata(metadataLength: number): IteratorResult<Message> {\n        const buf = this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class AsyncMessageReader implements AsyncIterableIterator<Message> {\n    protected source: AsyncByteStream;\n    constructor(source: ReadableSource<Uint8Array>);\n    constructor(source: FileHandle, byteLength?: number);\n    constructor(source: any, byteLength?: number) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n            ? new AsyncRandomAccessFile(source, byteLength!)\n            : new AsyncByteStream(source);\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<Message> { return this as AsyncIterableIterator<Message>; }\n    public async next(): Promise<IteratorResult<Message>> {\n        let r;\n        if ((r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        // ARROW-6313: If the first 4 bytes are continuation indicator (-1), read\n        // the next 4 for the 32-bit metadata length. Otherwise, assume this is a\n        // pre-v0.15 message, where the first 4 bytes are the metadata length.\n        if ((r.value === -1) &&\n            (r = await this.readMetadataLength()).done) { return ITERATOR_DONE; }\n        if ((r = await this.readMetadata(r.value)).done) { return ITERATOR_DONE; }\n        return (<any> r) as IteratorResult<Message>;\n    }\n    public async throw(value?: any) { return await this.source.throw(value); }\n    public async return(value?: any) { return await this.source.return(value); }\n    public async readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = await this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public async readMessageBody(bodyLength: number): Promise<Uint8Array> {\n        if (bodyLength <= 0) { return new Uint8Array(0); }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n               /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    public async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    protected async readMetadataLength(): Promise<IteratorResult<number>> {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = bb && bb.readInt32(0) || 0;\n        return { done: len === 0, value: len };\n    }\n    protected async readMetadata(metadataLength: number): Promise<IteratorResult<Message>> {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) { return ITERATOR_DONE; }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    private _schema = false;\n    private _json: ArrowJSON;\n    private _body: any[] = [];\n    private _batchIndex = 0;\n    private _dictionaryIndex = 0;\n    constructor(source: ArrowJSON | ArrowJSONLike) {\n        super(new Uint8Array(0));\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    public next() {\n        const { _json } = this;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { done: false, value: message };\n        }\n        if (this._dictionaryIndex < _json.dictionaries.length) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (this._batchIndex < _json.batches.length) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    public readMessageBody(_bodyLength?: number) {\n        return flattenDataSources(this._body) as any;\n        function flattenDataSources(xs: any[]): any[][] {\n            return (xs || []).reduce<any[][]>((buffers, column: any) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], [] as any[][]);\n        }\n    }\n    public readMessage<T extends MessageHeader>(type?: T | null) {\n        let r: IteratorResult<Message<T>>;\n        if ((r = this.next()).done) { return null; }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    public readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\n\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n\n/** @ignore */\nexport function checkForMagicArrowString(buffer: Uint8Array, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { Type, UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { selectVectorChildrenArgs } from '../util/args';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp, Union,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n} from '../type';\n\n/** @ignore */\nexport interface VectorAssembler extends Visitor {\n    visit<T extends Vector>(node: T): this;\n    visitMany<T extends Vector>(nodes: T[]): this[];\n    getVisitFn<T extends Type>(node: T): (vector: V<T>) => this;\n    getVisitFn<T extends DataType>(node: V<T> | Data<T> | T): (vector: V<T>) => this;\n\n    visitBool                 <T extends Bool>            (vector: V<T>): this;\n    visitInt                  <T extends Int>             (vector: V<T>): this;\n    visitFloat                <T extends Float>           (vector: V<T>): this;\n    visitUtf8                 <T extends Utf8>            (vector: V<T>): this;\n    visitBinary               <T extends Binary>          (vector: V<T>): this;\n    visitFixedSizeBinary      <T extends FixedSizeBinary> (vector: V<T>): this;\n    visitDate                 <T extends Date_>           (vector: V<T>): this;\n    visitTimestamp            <T extends Timestamp>       (vector: V<T>): this;\n    visitTime                 <T extends Time>            (vector: V<T>): this;\n    visitDecimal              <T extends Decimal>         (vector: V<T>): this;\n    visitList                 <T extends List>            (vector: V<T>): this;\n    visitStruct               <T extends Struct>          (vector: V<T>): this;\n    visitUnion                <T extends Union>           (vector: V<T>): this;\n    visitInterval             <T extends Interval>        (vector: V<T>): this;\n    visitFixedSizeList        <T extends FixedSizeList>   (vector: V<T>): this;\n    visitMap                  <T extends Map_>            (vector: V<T>): this;\n}\n\n/** @ignore */\nexport class VectorAssembler extends Visitor {\n\n    /** @nocollapse */\n    public static assemble<T extends Vector | RecordBatch>(...args: (T | T[])[]) {\n        const assembler = new VectorAssembler();\n        const vectorChildren = selectVectorChildrenArgs(RecordBatch, args);\n        const [assembleResult = assembler] = assembler.visitMany(vectorChildren);\n        return assembleResult;\n    }\n\n    private constructor() { super(); }\n\n    public visit<T extends Vector>(vector: T): this {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            if (!DataType.isNull(vector.type)) {\n                addBuffer.call(this, nullCount <= 0\n                    ? new Uint8Array(0) // placeholder validity buffer\n                    : truncateBitmap(data.offset, length, data.nullBitmap)\n                );\n            }\n            this.nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n\n    public visitNull<T extends Null>(_nullV: V<T>) {\n        return this;\n    }\n    public visitDictionary<T extends Dictionary>(vector: V<T>) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n\n    public get nodes() { return this._nodes; }\n    public get buffers() { return this._buffers; }\n    public get byteLength() { return this._byteLength; }\n    public get bufferRegions() { return this._bufferRegions; }\n\n    protected _byteLength = 0;\n    protected _nodes: FieldNode[] = [];\n    protected _buffers: ArrayBufferView[] = [];\n    protected _bufferRegions: BufferRegion[] = [];\n}\n\n/** @ignore */\nfunction addBuffer(this: VectorAssembler, values: ArrayBufferView) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n\n/** @ignore */\nfunction assembleUnion<T extends Union>(this: VectorAssembler, vector: V<T>) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    } else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        } else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child: Vector | null, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n\n/** @ignore */\nfunction assembleBoolVector<T extends Bool>(this: VectorAssembler, vector: V<T>) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values: Uint8Array;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    } else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n\n/** @ignore */\nfunction assembleFlatVector<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval>(this: VectorAssembler, vector: V<T>) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n\n/** @ignore */\nfunction assembleFlatListVector<T extends Utf8 | Binary>(this: VectorAssembler, vector: V<T>) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n\n/** @ignore */\nfunction assembleListVector<T extends Map_ | List | FixedSizeList>(this: VectorAssembler, vector: V<T>) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (MapVector, ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0)!);\n}\n\n/** @ignore */\nfunction assembleNestedVector<T extends Struct | Union>(this: VectorAssembler, vector: V<T>) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)!).filter(Boolean))[0];\n}\n\nVectorAssembler.prototype.visitBool            =     assembleBoolVector;\nVectorAssembler.prototype.visitInt             =     assembleFlatVector;\nVectorAssembler.prototype.visitFloat           =     assembleFlatVector;\nVectorAssembler.prototype.visitUtf8            = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary          = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary =     assembleFlatVector;\nVectorAssembler.prototype.visitDate            =     assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp       =     assembleFlatVector;\nVectorAssembler.prototype.visitTime            =     assembleFlatVector;\nVectorAssembler.prototype.visitDecimal         =     assembleFlatVector;\nVectorAssembler.prototype.visitList            =     assembleListVector;\nVectorAssembler.prototype.visitStruct          =   assembleNestedVector;\nVectorAssembler.prototype.visitUnion           =          assembleUnion;\nVectorAssembler.prototype.visitInterval        =     assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList   =     assembleListVector;\nVectorAssembler.prototype.visitMap             =     assembleListVector;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Vector } from '../vector';\nimport { Column } from '../column';\nimport { DataType } from '../type';\nimport { Schema, Field } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { WritableSink, AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { ArrayBufferViewInput, toUint8Array } from '../util/buffer';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport { Writable, ReadableInterop, ReadableDOMStreamOptions } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream, isIterable, isObject } from '../util/compat';\n\nexport interface RecordBatchStreamWriterOptions {\n    /**\n     *\n     */\n    autoDestroy?: boolean;\n    /**\n     * A flag indicating whether the RecordBatchWriter should construct pre-0.15.0\n     * encapsulated IPC Messages, which reserves  4 bytes for the Message metadata\n     * length instead of 8.\n     * @see https://issues.apache.org/jira/browse/ARROW-6313\n     */\n    writeLegacyIpcFormat?: boolean;\n}\n\nexport class RecordBatchWriter<T extends { [key: string]: DataType } = any> extends ReadableInterop<Uint8Array> implements Writable<RecordBatch<T>> {\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n        // @ts-ignore\n        readableStrategy?: { highWaterMark?: number, size?: any }\n    ): { writable: WritableStream<Table<T> | RecordBatch<T>>, readable: ReadableStream<Uint8Array> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    constructor(options?: RecordBatchStreamWriterOptions) {\n        super();\n        isObject(options) || (options = { autoDestroy: true, writeLegacyIpcFormat: false });\n        this._autoDestroy = (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n        this._writeLegacyIpcFormat = (typeof options.writeLegacyIpcFormat === 'boolean') ? options.writeLegacyIpcFormat : false;\n    }\n\n    protected _position = 0;\n    protected _started = false;\n    protected _autoDestroy: boolean;\n    protected _writeLegacyIpcFormat: boolean;\n    // @ts-ignore\n    protected _sink = new AsyncByteQueue();\n    protected _schema: Schema | null = null;\n    protected _dictionaryBlocks: FileBlock[] = [];\n    protected _recordBatchBlocks: FileBlock[] = [];\n    protected _dictionaryDeltaOffsets = new Map<number, number>();\n\n    public toString(sync: true): string;\n    public toString(sync?: false): Promise<string>;\n    public toString(sync: any = false) {\n        return this._sink.toString(sync) as Promise<string> | string;\n    }\n    public toUint8Array(sync: true): Uint8Array;\n    public toUint8Array(sync?: false): Promise<Uint8Array>;\n    public toUint8Array(sync: any = false) {\n        return this._sink.toUint8Array(sync) as Promise<Uint8Array> | Uint8Array;\n    }\n\n    public writeAll(input: Table<T> | Iterable<RecordBatch<T>>): this;\n    public writeAll(input: AsyncIterable<RecordBatch<T>>): Promise<this>;\n    public writeAll(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<this>;\n    public writeAll(input: PromiseLike<any> | Table<T> | Iterable<RecordBatch<T>> | AsyncIterable<RecordBatch<T>>) {\n        if (isPromise<any>(input)) {\n            return input.then((x) => this.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, <any> input);\n    }\n\n    public get closed() { return this._sink.closed; }\n    public [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    public toDOMStream(options?: ReadableDOMStreamOptions) { return this._sink.toDOMStream(options); }\n    public toNodeStream(options?: import('stream').ReadableOptions) { return this._sink.toNodeStream(options); }\n\n    public close() {\n        return this.reset()._sink.close();\n    }\n    public abort(reason?: any) {\n        return this.reset()._sink.abort(reason);\n    }\n    public finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    public reset(sink: WritableSink<ArrayBufferViewInput> = this._sink, schema: Schema<T> | null = null) {\n\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink as AsyncByteQueue;\n        } else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            } else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n\n        if (this._started && this._schema) {\n            this._writeFooter(this._schema);\n        }\n\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._dictionaryDeltaOffsets = new Map();\n\n        if (!schema || !(schema.compareTo(this._schema))) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            } else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n\n        return this;\n    }\n\n    public write(payload?: Table<T> | RecordBatch<T> | Iterable<RecordBatch<T>> | null) {\n\n        let schema: Schema<T> | null = null;\n\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        } else if (payload === null || payload === undefined) {\n            return this.finish() && undefined;\n        } else if (payload instanceof Table && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        } else if (payload instanceof RecordBatch && !(schema = payload.schema)) {\n            return this.finish() && undefined;\n        }\n\n        if (schema && !schema.compareTo(this._schema)) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n\n        if (payload instanceof RecordBatch) {\n            if (!(payload instanceof _InternalEmptyPlaceholderRecordBatch)) {\n                this._writeRecordBatch(payload);\n            }\n        } else if (payload instanceof Table) {\n            this.writeAll(payload.chunks);\n        } else if (isIterable(payload)) {\n            this.writeAll(payload);\n        }\n    }\n\n    protected _writeMessage<T extends MessageHeader>(message: Message<T>, alignment = 8) {\n\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const prefixSize = !this._writeLegacyIpcFormat ? 8 : 4;\n        const alignedSize = (flatbufferSize + prefixSize + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - prefixSize;\n\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        } else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n\n        // If not in legacy pre-0.15.0 mode, write the stream continuation indicator\n        if (!this._writeLegacyIpcFormat) {\n            this._write(Int32Array.of(-1));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - prefixSize));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) { this._write(buffer); }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n\n    protected _write(chunk: ArrayBufferViewInput) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMessage(Message.from(schema));\n    }\n\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) {\n        // eos bytes\n        return this._writeLegacyIpcFormat\n            ? this._write(Int32Array.of(0))\n            : this._write(Int32Array.of(-1, 0));\n    }\n\n    protected _writeMagic() {\n        return this._write(MAGIC);\n    }\n\n    protected _writePadding(nBytes: number) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(batch);\n        const recordBatch = new metadata.RecordBatch(batch.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeDictionaries(batch)\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n\n    protected _writeBodyBuffers(buffers: ArrayBufferView[]) {\n        let buffer: ArrayBufferView;\n        let size: number, padding: number;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        for (let [id, dictionary] of batch.dictionaries) {\n            let offset = this._dictionaryDeltaOffsets.get(id) || 0;\n            if (offset === 0 || (dictionary = dictionary.slice(offset)).length > 0) {\n                const chunks = 'chunks' in dictionary ? (dictionary as any).chunks : [dictionary];\n                for (const chunk of chunks) {\n                    this._writeDictionaryBatch(chunk, id, offset > 0);\n                    offset += chunk.length;\n                }\n            }\n        }\n        return this;\n    }\n}\n\n/** @ignore */\nexport class RecordBatchStreamWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): RecordBatchStreamWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>, options?: RecordBatchStreamWriterOptions): Promise<RecordBatchStreamWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any, options?: RecordBatchStreamWriterOptions) {\n        const writer = new RecordBatchStreamWriter<T>(options);\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n}\n\n/** @ignore */\nexport class RecordBatchFileWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchFileWriter<T>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchFileWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(input: any) {\n        const writer = new RecordBatchFileWriter<T>();\n        if (isPromise<any>(input)) {\n            return input.then((x) => writer.writeAll(x));\n        } else if (isAsyncIterable<RecordBatch<T>>(input)) {\n            return writeAllAsync(writer, input);\n        }\n        return writeAll(writer, input);\n    }\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n\n    // @ts-ignore\n    protected _writeSchema(schema: Schema<T>) {\n        return this._writeMagic()._writePadding(2);\n    }\n\n    protected _writeFooter(schema: Schema<T>) {\n        const buffer = Footer.encode(new Footer(\n            schema, MetadataVersion.V4,\n            this._recordBatchBlocks, this._dictionaryBlocks\n        ));\n        return super\n            ._writeFooter(schema) // EOS bytes for sequential readers\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n\n/** @ignore */\nexport class RecordBatchJSONWriter<T extends { [key: string]: DataType } = any> extends RecordBatchWriter<T> {\n\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: Table<T> | Iterable<RecordBatch<T>>): RecordBatchJSONWriter<T>;\n    // @ts-ignore\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: AsyncIterable<RecordBatch<T>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<AsyncIterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: PromiseLike<Table<T> | Iterable<RecordBatch<T>>>): Promise<RecordBatchJSONWriter<T>>;\n    /** @nocollapse */\n    public static writeAll<T extends { [key: string]: DataType } = any>(this: typeof RecordBatchWriter, input: any) {\n        return new RecordBatchJSONWriter<T>().writeAll(input as any);\n    }\n\n    private _recordBatches: RecordBatch[];\n    private _dictionaries: RecordBatch[];\n\n    constructor() {\n        super();\n        this._autoDestroy = true;\n        this._recordBatches = [];\n        this._dictionaries = [];\n    }\n\n    protected _writeMessage() { return this; }\n    // @ts-ignore\n    protected _writeFooter(schema: Schema<T>) { return this; }\n    protected _writeSchema(schema: Schema<T>) {\n        return this._write(`{\\n  \"schema\": ${\n            JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)\n        }`);\n    }\n    protected _writeDictionaries(batch: RecordBatch<T>) {\n        if (batch.dictionaries.size > 0) {\n            this._dictionaries.push(batch);\n        }\n        return this;\n    }\n    protected _writeDictionaryBatch(dictionary: Vector, id: number, isDelta = false) {\n        this._dictionaryDeltaOffsets.set(id, dictionary.length + (this._dictionaryDeltaOffsets.get(id) || 0));\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    protected _writeRecordBatch(batch: RecordBatch<T>) {\n        this._writeDictionaries(batch);\n        this._recordBatches.push(batch);\n        return this;\n    }\n    public close() {\n\n        if (this._dictionaries.length > 0) {\n            this._write(`,\\n  \"dictionaries\": [\\n`);\n            for (const batch of this._dictionaries) {\n                super._writeDictionaries(batch);\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._recordBatches.length > 0) {\n            for (let i = -1, n = this._recordBatches.length; ++i < n;) {\n                this._write(i === 0 ? `,\\n  \"batches\": [\\n    ` : `,\\n    `);\n                this._write(`${recordBatchToJSON(this._recordBatches[i])}`);\n                this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n            }\n            this._write(`\\n  ]`);\n        }\n\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n\n        this._dictionaries = [];\n        this._recordBatches = [];\n\n        return super.close();\n    }\n}\n\n/** @ignore */\nfunction writeAll<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, input: Table<T> | Iterable<RecordBatch<T>>) {\n    let chunks = input as Iterable<RecordBatch<T>>;\n    if (input instanceof Table) {\n        chunks = input.chunks;\n        writer.reset(undefined, input.schema);\n    }\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nasync function writeAllAsync<T extends { [key: string]: DataType } = any>(writer: RecordBatchWriter<T>, batches: AsyncIterable<RecordBatch<T>>) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }: Field): object {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n\n/** @ignore */\nfunction dictionaryBatchToJSON(dictionary: Vector, id: number, isDelta = false) {\n    const field = new Field(`${id}`, dictionary.type, dictionary.nullCount > 0);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n\n/** @ignore */\nfunction recordBatchToJSON(records: RecordBatch) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Data, Buffers } from '../data';\nimport { Schema, Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { RecordBatch } from '../recordbatch';\n\nconst noopBuf = new Uint8Array(0);\nconst nullBufs = (bitmapLength: number) => <unknown> [\n    noopBuf, noopBuf, new Uint8Array(bitmapLength), noopBuf\n] as Buffers<any>;\n\n/** @ignore */\nexport function ensureSameLengthData<T extends { [key: string]: DataType } = any>(\n    schema: Schema<T>,\n    chunks: Data<T[keyof T]>[],\n    batchLength = chunks.reduce((l, c) => Math.max(l, c.length), 0)\n) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let i = -1, n = chunks.length;\n    const fields = [...schema.fields];\n    const batchData = [] as Data<T[keyof T]>[];\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = chunks[i]) && data.length === batchLength) {\n            batchData[i] = data;\n        } else {\n            (field = fields[i]).nullable || (fields[i] = fields[i].clone({ nullable: true }) as Field<T[keyof T]>);\n            batchData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return [new Schema<T>(fields), batchLength, batchData] as [Schema<T>, number, Data<T[keyof T]>[]];\n}\n\n/** @ignore */\nexport function distributeColumnsIntoRecordBatches<T extends { [key: string]: DataType } = any>(columns: Column<T[keyof T]>[]): [Schema<T>, RecordBatch<T>[]] {\n    return distributeVectorsIntoRecordBatches<T>(new Schema<T>(columns.map(({ field }) => field)), columns);\n}\n\n/** @ignore */\nexport function distributeVectorsIntoRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, vecs: (Vector<T[keyof T]> | Chunked<T[keyof T]>)[]): [Schema<T>, RecordBatch<T>[]] {\n    return uniformlyDistributeChunksAcrossRecordBatches<T>(schema, vecs.map((v) => v instanceof Chunked ? v.chunks.map((c) => c.data) : [v.data]));\n}\n\n/** @ignore */\nfunction uniformlyDistributeChunksAcrossRecordBatches<T extends { [key: string]: DataType } = any>(schema: Schema<T>, columns: Data<T[keyof T]>[][]): [Schema<T>, RecordBatch<T>[]] {\n\n    const fields = [...schema.fields];\n    const batchArgs = [] as [number, Data<T[keyof T]>[]][];\n    const memo = { numBatches: columns.reduce((n, c) => Math.max(n, c.length), 0) };\n\n    let numBatches = 0, batchLength = 0;\n    let i: number = -1, numColumns = columns.length;\n    let child: Data<T[keyof T]>, childData: Data<T[keyof T]>[] = [];\n\n    while (memo.numBatches-- > 0) {\n\n        for (batchLength = Number.POSITIVE_INFINITY, i = -1; ++i < numColumns;) {\n            childData[i] = child = columns[i].shift()!;\n            batchLength = Math.min(batchLength, child ? child.length : batchLength);\n        }\n\n        if (isFinite(batchLength)) {\n            childData = distributeChildData(fields, batchLength, childData, columns, memo);\n            if (batchLength > 0) {\n                batchArgs[numBatches++] = [batchLength, childData.slice()];\n            }\n        }\n    }\n    return [\n        schema = new Schema<T>(fields, schema.metadata),\n        batchArgs.map((xs) => new RecordBatch(schema, ...xs))\n    ];\n}\n\n/** @ignore */\nfunction distributeChildData<T extends { [key: string]: DataType } = any>(fields: Field<T[keyof T]>[], batchLength: number, childData: Data<T[keyof T]>[], columns: Data<T[keyof T]>[][], memo: { numBatches: number }) {\n    let data: Data<T[keyof T]>;\n    let field: Field<T[keyof T]>;\n    let length = 0, i = -1, n = columns.length;\n    const bitmapLength = ((batchLength + 63) & ~63) >> 3;\n    while (++i < n) {\n        if ((data = childData[i]) && ((length = data.length) >= batchLength)) {\n            if (length === batchLength) {\n                childData[i] = data;\n            } else {\n                childData[i] = data.slice(0, batchLength);\n                data = data.slice(batchLength, length - batchLength);\n                memo.numBatches = Math.max(memo.numBatches, columns[i].unshift(data));\n            }\n        } else {\n            (field = fields[i]).nullable || (fields[i] = field.clone({ nullable: true }) as Field<T[keyof T]>);\n            childData[i] = data ? data._changeLengthAndBackfillNullBitmap(batchLength)\n                : Data.new(field.type, 0, batchLength, batchLength, nullBufs(bitmapLength)) as Data<T[keyof T]>;\n        }\n    }\n    return childData;\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nimport { VectorType as V } from '../interfaces';\nimport { AbstractVector, Vector, Clonable, Sliceable, Applicative } from '../vector';\n\n/** @ignore */\nexport interface BaseVector<T extends DataType = any> extends Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n    slice(begin?: number, end?: number): V<T>;\n    concat(...others: Vector<T>[]): Chunked<T>;\n    clone<R extends DataType = T>(data: Data<R>, children?: Vector<R>[]): V<R>;\n}\n\n/** @ignore */\nexport abstract class BaseVector<T extends DataType = any> extends AbstractVector<T>\n    implements Clonable<V<T>>, Sliceable<V<T>>, Applicative<T, Chunked<T>> {\n\n    protected _children?: Vector[];\n\n    constructor(data: Data<T>, children?: Vector[]) {\n        super();\n        this._children = children;\n        this.numChildren = data.childData.length;\n        this._bindDataAccessors(this.data = data);\n    }\n\n    public readonly data: Data<T>;\n    public readonly numChildren: number;\n\n    public get type() { return this.data.type; }\n    public get typeId() { return this.data.typeId; }\n    public get length() { return this.data.length; }\n    public get offset() { return this.data.offset; }\n    public get stride() { return this.data.stride; }\n    public get nullCount() { return this.data.nullCount; }\n    public get byteLength() { return this.data.byteLength; }\n    public get VectorName() { return `${Type[this.typeId]}Vector`; }\n\n    public get ArrayType(): T['ArrayType'] { return this.type.ArrayType; }\n\n    public get values() { return this.data.values; }\n    public get typeIds() { return this.data.typeIds; }\n    public get nullBitmap() { return this.data.nullBitmap; }\n    public get valueOffsets() { return this.data.valueOffsets; }\n\n    public get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n\n    public clone<R extends DataType = T>(data: Data<R>, children = this._children) {\n        return Vector.new<R>(data, children) as any;\n    }\n\n    public concat(...others: Vector<T>[]) {\n        return Chunked.concat<T>(this, ...others);\n    }\n\n    public slice(begin?: number, end?: number) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n\n    public isValid(index: number): boolean {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n\n    public getChildAt<R extends DataType = any>(index: number): Vector<R> | null {\n        return index < 0 || index >= this.numChildren ? null : (\n            (this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new<R>(this.data.childData[index] as Data<R>))\n        ) as Vector<R>;\n    }\n\n    public toJSON(): any { return [...this]; }\n\n    protected _sliceInternal(self: this, begin: number, end: number) {\n        return self.clone(self.data.slice(begin, end - begin), null!);\n    }\n\n    // @ts-ignore\n    protected _bindDataAccessors(data: Data<T>) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n(BaseVector.prototype as any)[Symbol.isConcatSpreadable] = true;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\n\n/** @ignore */\nexport class BinaryVector extends BaseVector<Binary> {\n    public asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Bool } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class BoolVector extends BaseVector<Bool> {\n    public static from<TNull = any>(input: Iterable<boolean | TNull>): BoolVector;\n    public static from<TNull = any>(input: AsyncIterable<boolean | TNull>): Promise<BoolVector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Bool, TNull>): Chunked<Bool>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Bool, TNull>): Promise<Chunked<Bool>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<boolean | TNull> | AsyncIterable<boolean | TNull> | VectorBuilderOptions<Bool, TNull> | VectorBuilderOptionsAsync<Bool, TNull>) {\n        return vectorFromValuesWithType(() => new Bool(), input);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DateUnit } from '../enum';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Date_, DateDay, DateMillisecond  } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends Date_> = [Iterable<Date>, T['unit']];\n\n/** @ignore */\nexport class DateVector<T extends Date_ = Date_> extends BaseVector<T> {\n    public static from<T extends DateUnit.DAY>(...args: FromArgs<DateDay>): V<DateDay>;\n    public static from<T extends DateUnit.MILLISECOND>(...args: FromArgs<DateMillisecond>): V<DateMillisecond>;\n    public static from<T extends Date_, TNull = any>(input: Iterable<Date | TNull>): V<T>;\n    public static from<T extends Date_, TNull = any>(input: AsyncIterable<Date | TNull>): Promise<V<T>>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Date_, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Date_, TNull = any>(...args: FromArgs<T> | [Iterable<Date | TNull> | AsyncIterable<Date | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>]) {\n        if (args.length === 2) {\n            return vectorFromValuesWithType(() => args[1] === DateUnit.DAY ? new DateDay() : new DateMillisecond() as T, args[0]);\n        }\n        return vectorFromValuesWithType(() => new DateMillisecond() as T, args[0]);\n    }\n}\n\n/** @ignore */\nexport class DateDayVector extends DateVector<DateDay> {}\n\n/** @ignore */\nexport class DateMillisecondVector extends DateVector<DateMillisecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Decimal } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class DecimalVector extends BaseVector<Decimal> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { VectorType as V } from '../interfaces';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { DataType, Dictionary, TKeys } from '../type';\n\n/** @ignore */\ntype FromArgs<T extends DataType = any, TKey extends TKeys = TKeys> = [Vector<T>, TKey, ArrayLike<number> | TKey['TArray']];\n\n/** @ignore */\nexport class DictionaryVector<T extends DataType = any, TKey extends TKeys = TKeys> extends BaseVector<Dictionary<T, TKey>> {\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: FromArgs<T, TKey>): V<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptions<Dictionary<T, TKey>>): Vector<Dictionary<T, TKey>>;\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(input: VectorBuilderOptionsAsync<Dictionary<T, TKey>>): Promise<Vector<Dictionary<T, TKey>>>;\n    /** @nocollapse */\n    public static from<T extends DataType = any, TKey extends TKeys = TKeys>(...args: any[]) {\n        if (args.length === 3) {\n            const [values, indices, keys] = args as FromArgs<T, TKey>;\n            const type = new Dictionary(values.type, indices, null, null);\n            return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys, values));\n        }\n        return vectorFromValuesWithType(() => args[0].type, args[0]);\n    }\n\n    constructor(data: Data<Dictionary<T, TKey>>) {\n        super(data);\n        this.indices = Vector.new(data.clone(this.type.indices));\n    }\n\n    public readonly indices: V<TKey>;\n\n    public get dictionary() { return <Vector<T>> this.data.dictionary; }\n    public reverseLookup(value: T) { return this.dictionary.indexOf(value); }\n    public getKey(idx: number): TKey['TValue'] | null { return this.indices.get(idx); }\n    public getValue(key: number): T['TValue'] | null { return this.dictionary.get(key); }\n    public setKey(idx: number, key: TKey['TValue'] | null) { return this.indices.set(idx, key); }\n    public setValue(key: number, value: T['TValue'] | null) { return this.dictionary.set(key, value); }\n}\n\n(DictionaryVector.prototype as any).indices = null;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { FixedSizeBinary } from '../type';\n\n/** @ignore */\nexport class FixedSizeBinaryVector extends BaseVector<FixedSizeBinary> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, FixedSizeList } from '../type';\n\n/** @ignore */\nexport class FixedSizeListVector<T extends DataType = any> extends BaseVector<FixedSizeList<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { Float, Float16, Float32, Float64, FloatArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor } from '../interfaces';\n\n/** @ignore */\ntype FloatVectorConstructors =\n    typeof FloatVector   |\n    typeof Float16Vector |\n    typeof Float32Vector |\n    typeof Float64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Float, TNull = any> =\n    FloatArray                          |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FloatArrayCtor = TypedArrayConstructor<FloatArray>;\n\n/** @ignore */\nexport class FloatVector<T extends Float = Float> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof FloatVector, input: Uint16Array): Float16Vector;\n    public static from(this: typeof FloatVector, input: Float32Array): Float32Vector;\n    public static from(this: typeof FloatVector, input: Float64Array): Float64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Float16Vector,  input: FromInput<Float16, TNull>): Float16Vector;\n    public static from<TNull = any>(this: typeof Float32Vector,  input: FromInput<Float32, TNull>): Float32Vector;\n    public static from<TNull = any>(this: typeof Float64Vector,  input: FromInput<Float64, TNull>): Float64Vector;\n\n    // Not zero-copy\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Float, TNull = any>(this: typeof FloatVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Float, TNull = any>(this: FloatVectorConstructors, input: FromInput<T, TNull>) {\n\n        let ArrowType = vectorTypeToDataType(this);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as FloatArrayCtor) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // FloatVector.from with a TypedArray, e.g. `FloatVector.from(new Float32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is Float16 but the input type isn't a Uint16Array,\n                // let the Float16Builder handle casting the input values to Uint16s.\n                if (!convertTo16Bit(ArrowType, input.constructor)) {\n                    return Vector.new(Data.Float(type, 0, length, 0, null, input as FloatArray));\n                }\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer float type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized FloatVector input');\n    }\n}\n\n/** @ignore */\nexport class Float16Vector extends FloatVector<Float16> {\n    // Since JS doesn't have half floats, `toArray()` returns a zero-copy slice\n    // of the underlying Uint16Array data. This behavior ensures we don't incur\n    // extra compute or copies if you're calling `toArray()` in order to create\n    // a buffer for something like WebGL. Buf if you're using JS and want typed\n    // arrays of 4-to-8-byte precision, these methods will enumerate the values\n    // and clamp to the desired byte lengths.\n    public toFloat32Array() { return new Float32Array(this as Iterable<number>); }\n    public toFloat64Array() { return new Float64Array(this as Iterable<number>); }\n}\n\n/** @ignore */\nexport class Float32Vector extends FloatVector<Float32> {}\n/** @ignore */\nexport class Float64Vector extends FloatVector<Float64> {}\n\nconst convertTo16Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Float16) && (dataCtor !== Uint16Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: FloatArrayCtor) => {\n    switch (ctor) {\n        case Uint16Array:    return Float16;\n        case Float32Array:   return Float32;\n        case Float64Array:   return Float64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: FloatVectorConstructors) => {\n    switch (ctor) {\n        case Float16Vector: return Float16;\n        case Float32Vector: return Float32;\n        case Float64Vector: return Float64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Interval, IntervalDayTime, IntervalYearMonth } from '../type';\n\n/** @ignore */\nexport class IntervalVector<T extends Interval = Interval> extends BaseVector<T> {}\n/** @ignore */\nexport class IntervalDayTimeVector extends IntervalVector<IntervalDayTime> {}\n/** @ignore */\nexport class IntervalYearMonthVector extends IntervalVector<IntervalYearMonth> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\nimport { BigInt64Array, BigUint64Array } from '../util/compat';\nimport { toBigInt64Array, toBigUint64Array } from '../util/buffer';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, IntArray } from '../type';\nimport { VectorType as V, TypedArrayConstructor, BigIntArrayConstructor, BigIntArray } from '../interfaces';\n\n/** @ignore */\ntype IntVectorConstructors =\n    typeof IntVector    |\n    typeof Int8Vector   |\n    typeof Int16Vector  |\n    typeof Int32Vector  |\n    typeof Uint8Vector  |\n    typeof Uint16Vector |\n    typeof Uint32Vector |\n    typeof Int64Vector  |\n    typeof Uint64Vector ;\n\n/** @ignore */\ntype FromInput<T extends Int, TNull = any> =\n    IntArray | BigIntArray              |\n    Iterable<T['TValue'] | TNull>       |\n    AsyncIterable<T['TValue'] | TNull>  |\n    VectorBuilderOptions<T, TNull>      |\n    VectorBuilderOptionsAsync<T, TNull> ;\n\n/** @ignore */\ntype FromArgs<T extends Int, TNull = any> = [FromInput<T, TNull>, boolean?];\n\n/** @ignore */\ntype IntArrayCtor = TypedArrayConstructor<IntArray> | BigIntArrayConstructor<BigIntArray>;\n\n/** @ignore */\nexport class IntVector<T extends Int = Int> extends BaseVector<T> {\n\n    // Guaranteed zero-copy variants\n    public static from(this: typeof IntVector, input: Int8Array): Int8Vector;\n    public static from(this: typeof IntVector, input: Int16Array): Int16Vector;\n    public static from(this: typeof IntVector, input: Int32Array): Int32Vector;\n    public static from(this: typeof IntVector, input: BigInt64Array): Int64Vector;\n    public static from(this: typeof IntVector, input: Int32Array, is64bit: true): Int64Vector;\n    public static from(this: typeof IntVector, input: Uint8Array): Uint8Vector;\n    public static from(this: typeof IntVector, input: Uint16Array): Uint16Vector;\n    public static from(this: typeof IntVector, input: Uint32Array): Uint32Vector;\n    public static from(this: typeof IntVector, input: BigUint64Array): Uint64Vector;\n    public static from(this: typeof IntVector, input: Uint32Array, is64bit: true): Uint64Vector;\n\n    // Zero-copy if input is a TypedArray of the same type as the\n    // Vector that from is called on, otherwise uses the Builders\n    public static from<TNull = any>(this: typeof Int8Vector,   input: FromInput<Int8, TNull>): Int8Vector;\n    public static from<TNull = any>(this: typeof Int16Vector,  input: FromInput<Int16, TNull>): Int16Vector;\n    public static from<TNull = any>(this: typeof Int32Vector,  input: FromInput<Int32, TNull>): Int32Vector;\n    public static from<TNull = any>(this: typeof Int64Vector,  input: FromInput<Int64, TNull>): Int64Vector;\n    public static from<TNull = any>(this: typeof Uint8Vector,  input: FromInput<Uint8, TNull>): Uint8Vector;\n    public static from<TNull = any>(this: typeof Uint16Vector, input: FromInput<Uint16, TNull>): Uint16Vector;\n    public static from<TNull = any>(this: typeof Uint32Vector, input: FromInput<Uint32, TNull>): Uint32Vector;\n    public static from<TNull = any>(this: typeof Uint64Vector, input: FromInput<Uint64, TNull>): Uint64Vector;\n\n    // Not zero-copy\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: Iterable<T['TValue'] | TNull>): V<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: AsyncIterable<T['TValue'] | TNull>): Promise<V<T>>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptions<T, TNull>): Chunked<T>;\n    public static from<T extends Int, TNull = any>(this: typeof IntVector, input: VectorBuilderOptionsAsync<T, TNull>): Promise<Chunked<T>>;\n    /** @nocollapse */\n    public static from<T extends Int, TNull = any>(this: IntVectorConstructors, ...args: FromArgs<T, TNull>) {\n\n        let [input, is64bit = false] = args;\n        let ArrowType = vectorTypeToDataType(this, is64bit);\n\n        if ((input instanceof ArrayBuffer) || ArrayBuffer.isView(input)) {\n            let InputType = arrayTypeToDataType(input.constructor as IntArrayCtor, is64bit) || ArrowType;\n            // Special case, infer the Arrow DataType from the input if calling the base\n            // IntVector.from with a TypedArray, e.g. `IntVector.from(new Int32Array())`\n            if (ArrowType === null) {\n                ArrowType = InputType;\n            }\n            // If the DataType inferred from the Vector constructor matches the\n            // DataType inferred from the input arguments, return zero-copy view\n            if (ArrowType && ArrowType === InputType) {\n                let type = new ArrowType();\n                let length = input.byteLength / type.ArrayType.BYTES_PER_ELEMENT;\n                // If the ArrowType is 64bit but the input type is 32bit pairs, update the logical length\n                if (convert32To64Bit(ArrowType, input.constructor)) {\n                    length *= 0.5;\n                }\n                return Vector.new(Data.Int(type, 0, length, 0, null, input as IntArray));\n            }\n        }\n\n        if (ArrowType) {\n            // If the DataType inferred from the Vector constructor is different than\n            // the DataType inferred from the input TypedArray, or if input isn't a\n            // TypedArray, use the Builders to construct the result Vector\n            return vectorFromValuesWithType(() => new ArrowType!() as T, input);\n        }\n\n        if ((input instanceof DataView) || (input instanceof ArrayBuffer)) {\n            throw new TypeError(`Cannot infer integer type from instance of ${input.constructor.name}`);\n        }\n\n        throw new TypeError('Unrecognized IntVector input');\n    }\n}\n\n/** @ignore */\nexport class Int8Vector extends IntVector<Int8> {}\n/** @ignore */\nexport class Int16Vector extends IntVector<Int16> {}\n/** @ignore */\nexport class Int32Vector extends IntVector<Int32> {}\n/** @ignore */\nexport class Int64Vector extends IntVector<Int64> {\n    public toBigInt64Array() {\n        return toBigInt64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigInt64Array;\n    public get values64(): BigInt64Array {\n        return this._values64 || (this._values64 = this.toBigInt64Array());\n    }\n}\n\n/** @ignore */\nexport class Uint8Vector extends IntVector<Uint8> {}\n/** @ignore */\nexport class Uint16Vector extends IntVector<Uint16> {}\n/** @ignore */\nexport class Uint32Vector extends IntVector<Uint32> {}\n/** @ignore */\nexport class Uint64Vector extends IntVector<Uint64> {\n    public toBigUint64Array() {\n        return toBigUint64Array(this.values);\n    }\n    // @ts-ignore\n    private _values64: BigUint64Array;\n    public get values64(): BigUint64Array {\n        return this._values64 || (this._values64 = this.toBigUint64Array());\n    }\n}\n\nconst convert32To64Bit = (typeCtor: any, dataCtor: any) => {\n    return (typeCtor === Int64 || typeCtor === Uint64) &&\n           (dataCtor === Int32Array || dataCtor === Uint32Array);\n};\n\n/** @ignore */\nconst arrayTypeToDataType = (ctor: IntArrayCtor, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Array:      return Int8;\n        case Int16Array:     return Int16;\n        case Int32Array:     return is64bit ? Int64 : Int32;\n        case BigInt64Array:  return Int64;\n        case Uint8Array:     return Uint8;\n        case Uint16Array:    return Uint16;\n        case Uint32Array:    return is64bit ? Uint64 : Uint32;\n        case BigUint64Array: return Uint64;\n        default: return null;\n    }\n};\n\n/** @ignore */\nconst vectorTypeToDataType = (ctor: IntVectorConstructors, is64bit: boolean) => {\n    switch (ctor) {\n        case Int8Vector:   return Int8;\n        case Int16Vector:  return Int16;\n        case Int32Vector:  return is64bit ? Int64 : Int32;\n        case Int64Vector:  return Int64;\n        case Uint8Vector:  return Uint8;\n        case Uint16Vector: return Uint16;\n        case Uint32Vector: return is64bit ? Uint64 : Uint32;\n        case Uint64Vector: return Uint64;\n        default: return null;\n    }\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { DataType, List } from '../type';\n\n/** @ignore */\nexport class ListVector<T extends DataType = any> extends BaseVector<List<T>> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { MapRow } from './row';\nimport { Field } from '../schema';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { DataType, Map_, Struct, List } from '../type';\n\n/** @ignore */\nexport class MapVector<K extends DataType = any, V extends DataType = any> extends BaseVector<Map_<K, V>> {\n    public asList() {\n        const child = this.type.children[0] as Field<Struct<{ key: K, value: V }>>;\n        return Vector.new(this.data.clone(new List<Struct<{ key: K, value: V }>>(child)));\n    }\n    public bind(index: number): Map_<K, V>['TValue'] {\n        const child = this.getChildAt<Struct<{ key: K, value: V }>>(0);\n        const { [index]: begin, [index + 1]: end } = this.valueOffsets;\n        return new MapRow(child!.slice(begin, end));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Null } from '../type';\nimport { BaseVector } from './base';\n\n/** @ignore */\nexport class NullVector extends BaseVector<Null> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { StructRow } from './row';\nimport { BaseVector } from './base';\nimport { DataType, Struct } from '../type';\n\n/** @ignore */ const kRowIndex = Symbol.for('rowIndex');\n/** @ignore */\nexport class StructVector<T extends { [key: string]: DataType } = any> extends BaseVector<Struct<T>> {\n    // @ts-ignore\n    private _row: StructRow<T>;\n    public bind(index: number): Struct<T>['TValue'] {\n        const proto = this._row || (this._row = new StructRow<T>(this));\n        const bound = Object.create(proto);\n        bound[kRowIndex] = index;\n        return bound;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond } from '../type';\n\n/** @ignore */\nexport class TimestampVector<T extends Timestamp = Timestamp> extends BaseVector<T> {}\n/** @ignore */\nexport class TimestampSecondVector extends TimestampVector<TimestampSecond> {}\n/** @ignore */\nexport class TimestampMillisecondVector extends TimestampVector<TimestampMillisecond> {}\n/** @ignore */\nexport class TimestampMicrosecondVector extends TimestampVector<TimestampMicrosecond> {}\n/** @ignore */\nexport class TimestampNanosecondVector extends TimestampVector<TimestampNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond } from '../type';\n\n/** @ignore */\nexport class TimeVector<T extends Time = Time> extends BaseVector<T> {}\n/** @ignore */\nexport class TimeSecondVector extends TimeVector<TimeSecond> {}\n/** @ignore */\nexport class TimeMillisecondVector extends TimeVector<TimeMillisecond> {}\n/** @ignore */\nexport class TimeMicrosecondVector extends TimeVector<TimeMicrosecond> {}\n/** @ignore */\nexport class TimeNanosecondVector extends TimeVector<TimeNanosecond> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { BaseVector } from './base';\nimport { Union, DenseUnion, SparseUnion} from '../type';\n\n/** @ignore */\nexport class UnionVector<T extends Union = Union> extends BaseVector<T> {\n    public get typeIdToChildIndex() { return this.data.type.typeIdToChildIndex; }\n}\n\n/** @ignore */\nexport class DenseUnionVector extends UnionVector<DenseUnion> {\n    public get valueOffsets() { return this.data.valueOffsets!; }\n}\n\n/** @ignore */\nexport class SparseUnionVector extends UnionVector<SparseUnion> {}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { VectorBuilderOptions } from './index';\nimport { vectorFromValuesWithType } from './index';\nimport { VectorBuilderOptionsAsync } from './index';\n\n/** @ignore */\nexport class Utf8Vector extends BaseVector<Utf8> {\n    public static from<TNull = any>(input: Iterable<string | TNull>): Utf8Vector;\n    public static from<TNull = any>(input: AsyncIterable<string | TNull>): Promise<Utf8Vector>;\n    public static from<TNull = any>(input: VectorBuilderOptions<Utf8, TNull>): Chunked<Utf8>;\n    public static from<TNull = any>(input: VectorBuilderOptionsAsync<Utf8, TNull>): Promise<Chunked<Utf8>>;\n    /** @nocollapse */\n    public static from<TNull = any>(input: Iterable<string | TNull> | AsyncIterable<string | TNull> | VectorBuilderOptions<Utf8, TNull> | VectorBuilderOptionsAsync<Utf8, TNull>) {\n        return vectorFromValuesWithType(() => new Utf8(), input);\n    }\n    public asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/** @ignore */\nexport function partial0<T>(visit: (node: T) => any) {\n    return function(this: T) { return visit(this); };\n}\n\n/** @ignore */\nexport function partial1<T>(visit: (node: T, a: any) => any) {\n    return function(this: T, a: any) { return visit(this, a); };\n}\n\n/** @ignore */\nexport function partial2<T>(visit: (node: T, a: any, b: any) => any) {\n    return function(this: T, a: any, b: any) { return visit(this, a, b); };\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { BN } from '../util/bn';\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { VectorType } from '../interfaces';\nimport { uint16ToFloat64 } from '../util/math';\nimport { Type, UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface GetVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, index: number): T['TValue'];\n    visitMany<T extends VectorType>  (nodes: T[], indices: number[]): T['TValue'][];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, index: number) => VectorType<T>['TValue'];\n    visitNull                 <T extends Null>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt                  <T extends Int>                  (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt16                <T extends Int16>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt32                <T extends Int32>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitInt64                <T extends Int64>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat                <T extends Float>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitBinary               <T extends Binary>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitDate                 <T extends Date_>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>, index: number): T['TValue'];\n    visitTime                 <T extends Time>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>, index: number): T['TValue'];\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>, index: number): T['TValue'];\n    visitList                 <T extends List>                 (vector: VectorType<T>, index: number): T['TValue'];\n    visitStruct               <T extends Struct>               (vector: VectorType<T>, index: number): T['TValue'];\n    visitUnion                <T extends Union>                (vector: VectorType<T>, index: number): T['TValue'];\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>, index: number): T['TValue'];\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>, index: number): T['TValue'];\n    visitInterval             <T extends Interval>             (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>, index: number): T['TValue'];\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>, index: number): T['TValue'];\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>, index: number): T['TValue'];\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>, index: number): T['TValue'];\n}\n\n/** @ignore */\nexport class GetVisitor extends Visitor {}\n\n/** @ignore */const epochDaysToMs = (data: Int32Array, index: number) => 86400000 * data[index];\n/** @ignore */const epochMillisecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */const epochMicrosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */const epochNanosecondsLongToMs = (data: Int32Array, index: number) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n\n/** @ignore */const epochMillisecondsToDate = (epochMs: number) => new Date(epochMs);\n/** @ignore */const epochDaysToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochDaysToMs(data, index));\n/** @ignore */const epochMillisecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n\n/** @ignore */\nconst getNull = <T extends Null>(_vector: VectorType<T>, _index: number): T['TValue'] => null;\n/** @ignore */\nconst getVariableWidthBytes = (values: Uint8Array, valueOffsets: Int32Array, index: number) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null as any;\n};\n\n/** @ignore */\nconst getBool = <T extends Bool>({ offset, values }: VectorType<T>, index: number): T['TValue'] => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n\n/** @ignore */\ntype Numeric1X = Int8 | Int16 | Int32 | Uint8 | Uint16 | Uint32 | Float32 | Float64;\n/** @ignore */\ntype Numeric2X = Int64 | Uint64;\n\n/** @ignore */\nconst getDateDay         = <T extends DateDay>        ({ values         }: VectorType<T>, index: number): T['TValue'] => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = <T extends DateMillisecond>({ values         }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric         = <T extends Numeric1X>      ({ stride, values }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getFloat16         = <T extends Float16>        ({ stride, values }: VectorType<T>, index: number): T['TValue'] => uint16ToFloat64(values[stride * index]);\n/** @ignore */\nconst getBigInts         = <T extends Numeric2X>({ stride, values, type }: VectorType<T>, index: number): T['TValue'] => <any> BN.new(values.subarray(stride * index, stride * (index + 1)), type.isSigned);\n/** @ignore */\nconst getFixedSizeBinary = <T extends FixedSizeBinary>({ stride, values }: VectorType<T>, index: number): T['TValue'] => values.subarray(stride * index, stride * (index + 1));\n\n/** @ignore */\nconst getBinary = <T extends Binary>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = <T extends Utf8>({ values, valueOffsets }: VectorType<T>, index: number): T['TValue'] => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null as any;\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = <T extends Int>(vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.bitWidth < 64\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getBigInts(vector as VectorType<Numeric2X>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = <T extends Float> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.precision !== Precision.HALF\n        ? getNumeric(vector as VectorType<Numeric1X>, index)\n        : getFloat16(vector as VectorType<Float16>, index)\n);\n\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = <T extends Date_> (vector: VectorType<T>, index: number): T['TValue'] => (\n    vector.type.unit === DateUnit.DAY\n        ? getDateDay(vector as VectorType<DateDay>, index)\n        : getDateMillisecond(vector as VectorType<DateMillisecond>, index)\n);\n\n/** @ignore */\nconst getTimestampSecond      = <T extends TimestampSecond>     ({ values }: VectorType<T>, index: number): T['TValue'] => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = <T extends TimestampMillisecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = <T extends TimestampMicrosecond>({ values }: VectorType<T>, index: number): T['TValue'] => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond  = <T extends TimestampNanosecond> ({ values }: VectorType<T>, index: number): T['TValue'] => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp            = <T extends Timestamp>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimestampSecond(vector as VectorType<TimestampSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector as VectorType<TimestampMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector as VectorType<TimestampMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimestampNanosecond(vector as VectorType<TimestampNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getTimeSecond      = <T extends TimeSecond>     ({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = <T extends TimeMillisecond>({ values, stride }: VectorType<T>, index: number): T['TValue'] => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = <T extends TimeMicrosecond>({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/** @ignore */\nconst getTimeNanosecond  = <T extends TimeNanosecond> ({ values         }: VectorType<T>, index: number): T['TValue'] => BN.signed(values.subarray(2 * index, 2 * (index + 1)));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime            = <T extends Time>(vector: VectorType<T>, index: number): T['TValue'] => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND:      return      getTimeSecond(vector as VectorType<TimeSecond>, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector as VectorType<TimeMillisecond>, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector as VectorType<TimeMicrosecond>, index);\n        case TimeUnit.NANOSECOND:  return  getTimeNanosecond(vector as VectorType<TimeNanosecond>, index);\n    }\n};\n\n/** @ignore */\nconst getDecimal = <T extends Decimal>({ values }: VectorType<T>, index: number): T['TValue'] => BN.decimal(values.subarray(4 * index, 4 * (index + 1)));\n\n/** @ignore */\nconst getList = <T extends List>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]) as T['TValue'];\n};\n\n/** @ignore */\nconst getMap = <T extends Map_>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/** @ignore */\nconst getStruct = <T extends Struct>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.bind(index) as T['TValue'];\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = <\n    V extends VectorType<Union> | VectorType<DenseUnion> | VectorType<SparseUnion>\n>(vector: V, index: number): V['TValue'] => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector as VectorType<DenseUnion>, index) :\n        getSparseUnion(vector as VectorType<SparseUnion>, index);\n};\n\n/** @ignore */\nconst getDenseUnion = <T extends DenseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n\n/** @ignore */\nconst getSparseUnion = <T extends SparseUnion>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const childIndex = vector.typeIdToChildIndex[vector.typeIds[index]];\n    const child = vector.getChildAt(childIndex);\n    return child ? child.get(index) : null;\n};\n\n/** @ignore */\nconst getDictionary = <T extends Dictionary>(vector: VectorType<T>, index: number): T['TValue'] => {\n    return vector.getValue(vector.getKey(index)!);\n};\n\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = <T extends Interval>(vector: VectorType<T>, index: number): T['TValue'] =>\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? getIntervalDayTime(vector as VectorType<IntervalDayTime>, index)\n        : getIntervalYearMonth(vector as VectorType<IntervalYearMonth>, index);\n\n/** @ignore */\nconst getIntervalDayTime = <T extends IntervalDayTime>({ values }: VectorType<T>, index: number): T['TValue'] => values.subarray(2 * index, 2 * (index + 1));\n\n/** @ignore */\nconst getIntervalYearMonth = <T extends IntervalYearMonth>({ values }: VectorType<T>, index: number): T['TValue'] => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n\n/** @ignore */\nconst getFixedSizeList = <T extends FixedSizeList>(vector: VectorType<T>, index: number): T['TValue'] => {\n    const child = vector.getChildAt(0)!, { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride) as T['TValue'];\n};\n\nGetVisitor.prototype.visitNull                 =                 getNull;\nGetVisitor.prototype.visitBool                 =                 getBool;\nGetVisitor.prototype.visitInt                  =                  getInt;\nGetVisitor.prototype.visitInt8                 =              getNumeric;\nGetVisitor.prototype.visitInt16                =              getNumeric;\nGetVisitor.prototype.visitInt32                =              getNumeric;\nGetVisitor.prototype.visitInt64                =              getBigInts;\nGetVisitor.prototype.visitUint8                =              getNumeric;\nGetVisitor.prototype.visitUint16               =              getNumeric;\nGetVisitor.prototype.visitUint32               =              getNumeric;\nGetVisitor.prototype.visitUint64               =              getBigInts;\nGetVisitor.prototype.visitFloat                =                getFloat;\nGetVisitor.prototype.visitFloat16              =              getFloat16;\nGetVisitor.prototype.visitFloat32              =              getNumeric;\nGetVisitor.prototype.visitFloat64              =              getNumeric;\nGetVisitor.prototype.visitUtf8                 =                 getUtf8;\nGetVisitor.prototype.visitBinary               =               getBinary;\nGetVisitor.prototype.visitFixedSizeBinary      =      getFixedSizeBinary;\nGetVisitor.prototype.visitDate                 =                 getDate;\nGetVisitor.prototype.visitDateDay              =              getDateDay;\nGetVisitor.prototype.visitDateMillisecond      =      getDateMillisecond;\nGetVisitor.prototype.visitTimestamp            =            getTimestamp;\nGetVisitor.prototype.visitTimestampSecond      =      getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond  =  getTimestampNanosecond;\nGetVisitor.prototype.visitTime                 =                 getTime;\nGetVisitor.prototype.visitTimeSecond           =           getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond      =      getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond      =      getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond       =       getTimeNanosecond;\nGetVisitor.prototype.visitDecimal              =              getDecimal;\nGetVisitor.prototype.visitList                 =                 getList;\nGetVisitor.prototype.visitStruct               =               getStruct;\nGetVisitor.prototype.visitUnion                =                getUnion;\nGetVisitor.prototype.visitDenseUnion           =           getDenseUnion;\nGetVisitor.prototype.visitSparseUnion          =          getSparseUnion;\nGetVisitor.prototype.visitDictionary           =           getDictionary;\nGetVisitor.prototype.visitInterval             =             getInterval;\nGetVisitor.prototype.visitIntervalDayTime      =      getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth    =    getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList        =        getFixedSizeList;\nGetVisitor.prototype.visitMap                  =                  getMap;\n\n/** @ignore */\nexport const instance = new GetVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IndexOfVisitor extends Visitor {\n    visit<T extends VectorType>  (node: T, value: T['TValue'] | null, index?: number): number;\n    visitMany <T extends VectorType>  (nodes: T[], values: (T['TValue'] | null)[], indices: (number | undefined)[]): number[];\n    getVisitFn<T extends Type>    (node: T): (vector: VectorType<T>, value: VectorType<T>['TValue'] | null, index?: number) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>, value:         T['TValue'] | null, index?: number) => number;\n    visitNull                 <T extends Null>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBool                 <T extends Bool>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt                  <T extends Int>                 (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt8                 <T extends Int8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt16                <T extends Int16>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt32                <T extends Int32>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInt64                <T extends Int64>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint8                <T extends Uint8>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint16               <T extends Uint16>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint32               <T extends Uint32>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUint64               <T extends Uint64>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat                <T extends Float>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat16              <T extends Float16>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat32              <T extends Float32>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFloat64              <T extends Float64>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUtf8                 <T extends Utf8>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitBinary               <T extends Binary>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDate                 <T extends Date_>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateDay              <T extends DateDay>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDateMillisecond      <T extends DateMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestamp            <T extends Timestamp>           (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampSecond      <T extends TimestampSecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMillisecond <T extends TimestampMillisecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond>(vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimestampNanosecond  <T extends TimestampNanosecond> (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTime                 <T extends Time>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeSecond           <T extends TimeSecond>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMillisecond      <T extends TimeMillisecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitTimeNanosecond       <T extends TimeNanosecond>      (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDecimal              <T extends Decimal>             (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitList                 <T extends List>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitStruct               <T extends Struct>              (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitUnion                <T extends Union>               (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDenseUnion           <T extends DenseUnion>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitSparseUnion          <T extends SparseUnion>         (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitDictionary           <T extends Dictionary>          (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitInterval             <T extends Interval>            (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalDayTime      <T extends IntervalDayTime>     (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>   (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitFixedSizeList        <T extends FixedSizeList>       (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n    visitMap                  <T extends Map_>                (vector: VectorType<T>, value: T['TValue'] | null, index?: number): number;\n}\n\n/** @ignore */\nexport class IndexOfVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullIndexOf(vector: VectorType<Null>, searchElement?: null) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n\n/** @ignore */\nfunction indexOfNull<T extends DataType>(vector: VectorType<T>, fromIndex?: number): number {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) { return i; }\n        ++i;\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfValue<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    if (searchElement === undefined) { return -1; }\n    if (searchElement === null) { return indexOfNull(vector, fromIndex); }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\n/** @ignore */\nfunction indexOfUnion<T extends DataType>(vector: VectorType<T>, searchElement?: T['TValue'] | null, fromIndex?: number): number {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nIndexOfVisitor.prototype.visitNull                 =  nullIndexOf;\nIndexOfVisitor.prototype.visitBool                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt                  = indexOfValue;\nIndexOfVisitor.prototype.visitInt8                 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16                = indexOfValue;\nIndexOfVisitor.prototype.visitInt32                = indexOfValue;\nIndexOfVisitor.prototype.visitInt64                = indexOfValue;\nIndexOfVisitor.prototype.visitUint8                = indexOfValue;\nIndexOfVisitor.prototype.visitUint16               = indexOfValue;\nIndexOfVisitor.prototype.visitUint32               = indexOfValue;\nIndexOfVisitor.prototype.visitUint64               = indexOfValue;\nIndexOfVisitor.prototype.visitFloat                = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32              = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64              = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8                 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary               = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary      = indexOfValue;\nIndexOfVisitor.prototype.visitDate                 = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay              = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp            = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond  = indexOfValue;\nIndexOfVisitor.prototype.visitTime                 = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond           = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond      = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond       = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal              = indexOfValue;\nIndexOfVisitor.prototype.visitList                 = indexOfValue;\nIndexOfVisitor.prototype.visitStruct               = indexOfValue;\nIndexOfVisitor.prototype.visitUnion                = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion           = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion          = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary           = indexOfValue;\nIndexOfVisitor.prototype.visitInterval             = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime      = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth    = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList        = indexOfValue;\nIndexOfVisitor.prototype.visitMap                  = indexOfValue;\n\n/** @ignore */\nexport const instance = new IndexOfVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface IteratorVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): IterableIterator<T['TValue'] | null>;\n    visitMany <T extends VectorType>(nodes: T[]): IterableIterator<T['TValue'] | null>[];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => IterableIterator<VectorType<T>['TValue'] | null>;\n    visitNull                 <T extends Null>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBool                 <T extends Bool>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt                  <T extends Int>                  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt8                 <T extends Int8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt16                <T extends Int16>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt32                <T extends Int32>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInt64                <T extends Int64>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint8                <T extends Uint8>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint16               <T extends Uint16>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint32               <T extends Uint32>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUint64               <T extends Uint64>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat                <T extends Float>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat16              <T extends Float16>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat32              <T extends Float32>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFloat64              <T extends Float64>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUtf8                 <T extends Utf8>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitBinary               <T extends Binary>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeBinary      <T extends FixedSizeBinary>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDate                 <T extends Date_>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateDay              <T extends DateDay>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDateMillisecond      <T extends DateMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestamp            <T extends Timestamp>            (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampSecond      <T extends TimestampSecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMillisecond <T extends TimestampMillisecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampMicrosecond <T extends TimestampMicrosecond> (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimestampNanosecond  <T extends TimestampNanosecond>  (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTime                 <T extends Time>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeSecond           <T extends TimeSecond>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMillisecond      <T extends TimeMillisecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeMicrosecond      <T extends TimeMicrosecond>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitTimeNanosecond       <T extends TimeNanosecond>       (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDecimal              <T extends Decimal>              (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitList                 <T extends List>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitStruct               <T extends Struct>               (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitUnion                <T extends Union>                (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDenseUnion           <T extends DenseUnion>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitSparseUnion          <T extends SparseUnion>          (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitDictionary           <T extends Dictionary>           (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitInterval             <T extends Interval>             (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalDayTime      <T extends IntervalDayTime>      (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitIntervalYearMonth    <T extends IntervalYearMonth>    (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitFixedSizeList        <T extends FixedSizeList>        (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n    visitMap                  <T extends Map_>                 (vector: VectorType<T>): IterableIterator<T['TValue'] | null>;\n}\n\n/** @ignore */\nexport class IteratorVisitor extends Visitor {}\n\n/** @ignore */\nfunction nullableIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits<T['TValue'] | null>(\n        vector.nullBitmap, vector.offset, vector.length, vector,\n        (vec: VectorType<T>, idx: number, nullByte: number, nullBit: number) =>\n            ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null\n    );\n}\n\n/** @ignore */\nfunction vectorIterator<T extends DataType>(vector: VectorType<T>): IterableIterator<T['TValue'] | null> {\n\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator<T>(vector);\n    }\n\n    const { type, typeId, length } = vector;\n\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && (\n        (typeId === Type.Timestamp) ||\n        (typeId === Type.Int && (type as Int).bitWidth !== 64) ||\n        (typeId === Type.Time && (type as Time).bitWidth !== 64) ||\n        (typeId === Type.Float && (type as Float).precision > 0 /* Precision.HALF */)\n    )) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\n\nIteratorVisitor.prototype.visitNull                 = vectorIterator;\nIteratorVisitor.prototype.visitBool                 = vectorIterator;\nIteratorVisitor.prototype.visitInt                  = vectorIterator;\nIteratorVisitor.prototype.visitInt8                 = vectorIterator;\nIteratorVisitor.prototype.visitInt16                = vectorIterator;\nIteratorVisitor.prototype.visitInt32                = vectorIterator;\nIteratorVisitor.prototype.visitInt64                = vectorIterator;\nIteratorVisitor.prototype.visitUint8                = vectorIterator;\nIteratorVisitor.prototype.visitUint16               = vectorIterator;\nIteratorVisitor.prototype.visitUint32               = vectorIterator;\nIteratorVisitor.prototype.visitUint64               = vectorIterator;\nIteratorVisitor.prototype.visitFloat                = vectorIterator;\nIteratorVisitor.prototype.visitFloat16              = vectorIterator;\nIteratorVisitor.prototype.visitFloat32              = vectorIterator;\nIteratorVisitor.prototype.visitFloat64              = vectorIterator;\nIteratorVisitor.prototype.visitUtf8                 = vectorIterator;\nIteratorVisitor.prototype.visitBinary               = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary      = vectorIterator;\nIteratorVisitor.prototype.visitDate                 = vectorIterator;\nIteratorVisitor.prototype.visitDateDay              = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp            = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond  = vectorIterator;\nIteratorVisitor.prototype.visitTime                 = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond           = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond      = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond       = vectorIterator;\nIteratorVisitor.prototype.visitDecimal              = vectorIterator;\nIteratorVisitor.prototype.visitList                 = vectorIterator;\nIteratorVisitor.prototype.visitStruct               = vectorIterator;\nIteratorVisitor.prototype.visitUnion                = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion           = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion          = vectorIterator;\nIteratorVisitor.prototype.visitDictionary           = vectorIterator;\nIteratorVisitor.prototype.visitInterval             = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime      = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth    = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList        = vectorIterator;\nIteratorVisitor.prototype.visitMap                  = vectorIterator;\n\n/** @ignore */\nexport const instance = new IteratorVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { instance as iteratorVisitor } from './iterator';\nimport {\n    DataType, Dictionary,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Float16, Float32, Float64,\n    Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64,\n    Date_, DateDay, DateMillisecond,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Union, DenseUnion, SparseUnion,\n} from '../type';\n\n/** @ignore */\nexport interface ToArrayVisitor extends Visitor {\n    visit<T extends VectorType>(node: T): T['TArray'];\n    visitMany<T extends VectorType>(nodes: T[]): T['TArray'][];\n    getVisitFn<T extends Type>(node: T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (vector: VectorType<T>) => VectorType<T>['TArray'];\n    visitNull                                    <T extends Null>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBool                                    <T extends Bool>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt                                     <T extends Int>                 (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt8                                    <T extends Int8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt16                                   <T extends Int16>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt32                                   <T extends Int32>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInt64                                   <T extends Int64>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint8                                   <T extends Uint8>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint16                                  <T extends Uint16>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint32                                  <T extends Uint32>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUint64                                  <T extends Uint64>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat                                   <T extends Float>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat16                                 <T extends Float16>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat32                                 <T extends Float32>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFloat64                                 <T extends Float64>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUtf8                                    <T extends Utf8>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitBinary                                  <T extends Binary>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeBinary                         <T extends FixedSizeBinary>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDate                                    <T extends Date_>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateDay                                 <T extends DateDay>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDateMillisecond                         <T extends DateMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestamp                               <T extends Timestamp>           (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampSecond                         <T extends TimestampSecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMillisecond                    <T extends TimestampMillisecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampMicrosecond                    <T extends TimestampMicrosecond>(vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimestampNanosecond                     <T extends TimestampNanosecond> (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTime                                    <T extends Time>                (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeSecond                              <T extends TimeSecond>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMillisecond                         <T extends TimeMillisecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeMicrosecond                         <T extends TimeMicrosecond>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitTimeNanosecond                          <T extends TimeNanosecond>      (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDecimal                                 <T extends Decimal>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitList                <R extends DataType, T extends List<R>>             (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitStruct                                  <T extends Struct>              (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitUnion                                   <T extends Union>               (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDenseUnion                              <T extends DenseUnion>          (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitSparseUnion                             <T extends SparseUnion>         (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitDictionary          <R extends DataType, T extends Dictionary<R>>       (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitInterval                                <T extends Interval>            (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalDayTime                         <T extends IntervalDayTime>     (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitIntervalYearMonth                       <T extends IntervalYearMonth>   (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitFixedSizeList       <R extends DataType, T extends FixedSizeList<R>>    (vector: VectorType<T>): VectorType<T>['TArray'];\n    visitMap                                     <T extends Map_>                (vector: VectorType<T>): VectorType<T>['TArray'];\n}\n\n/** @ignore */\nexport class ToArrayVisitor extends Visitor {}\n\n/** @ignore */\nfunction arrayOfVector<T extends DataType>(vector: VectorType<T>): T['TArray'] {\n\n    const { type, length, stride } = vector;\n\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Float: case Type.Decimal:\n        case Type.Time: case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n    }\n\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)] as T['TArray'];\n}\n\nToArrayVisitor.prototype.visitNull                 = arrayOfVector;\nToArrayVisitor.prototype.visitBool                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt                  = arrayOfVector;\nToArrayVisitor.prototype.visitInt8                 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16                = arrayOfVector;\nToArrayVisitor.prototype.visitInt32                = arrayOfVector;\nToArrayVisitor.prototype.visitInt64                = arrayOfVector;\nToArrayVisitor.prototype.visitUint8                = arrayOfVector;\nToArrayVisitor.prototype.visitUint16               = arrayOfVector;\nToArrayVisitor.prototype.visitUint32               = arrayOfVector;\nToArrayVisitor.prototype.visitUint64               = arrayOfVector;\nToArrayVisitor.prototype.visitFloat                = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32              = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64              = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8                 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary               = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary      = arrayOfVector;\nToArrayVisitor.prototype.visitDate                 = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay              = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp            = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond  = arrayOfVector;\nToArrayVisitor.prototype.visitTime                 = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond           = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond      = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond       = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal              = arrayOfVector;\nToArrayVisitor.prototype.visitList                 = arrayOfVector;\nToArrayVisitor.prototype.visitStruct               = arrayOfVector;\nToArrayVisitor.prototype.visitUnion                = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion           = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion          = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary           = arrayOfVector;\nToArrayVisitor.prototype.visitInterval             = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime      = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth    = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList        = arrayOfVector;\nToArrayVisitor.prototype.visitMap                  = arrayOfVector;\n\n/** @ignore */\nexport const instance = new ToArrayVisitor();\n","/* istanbul ignore file */\n\n// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Visitor } from '../visitor';\nimport { VectorType } from '../interfaces';\nimport { Type, TimeUnit } from '../enum';\nimport { Schema, Field } from '../schema';\nimport {\n    DataType, Dictionary,\n    Float, Int, Date_, Interval, Time, Timestamp,\n    Bool, Null, Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n} from '../type';\n\n/** @ignore */ const sum = (x: number, y: number) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type: DataType) => `Cannot compute the byte width of variable-width column ${type}`;\n\n/** @ignore */\nexport interface ByteWidthVisitor extends Visitor {\n    visit<T extends DataType>(node: T): number;\n    visitMany<T extends DataType>(nodes: T[]): number[];\n    getVisitFn<T extends Type>    (node: T): (type: DataType<T>) => number;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): (type: T) => number;\n}\n\n/** @ignore */\nexport class ByteWidthVisitor extends Visitor {\n    public visitNull            (____: Null            ) { return 0; }\n    public visitInt             (type: Int             ) { return type.bitWidth / 8; }\n    public visitFloat           (type: Float           ) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    public visitBinary          (type: Binary          ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitUtf8            (type: Utf8            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitBool            (____: Bool            ) { return 1 / 8; }\n    public visitDecimal         (____: Decimal         ) { return 16; }\n    public visitDate            (type: Date_           ) { return (type.unit + 1) * 4; }\n    public visitTime            (type: Time            ) { return type.bitWidth / 8; }\n    public visitTimestamp       (type: Timestamp       ) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    public visitInterval        (type: Interval        ) { return (type.unit + 1) * 4; }\n    public visitList            (type: List            ) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    public visitStruct          (type: Struct          ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitUnion           (type: Union           ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitFixedSizeBinary (type: FixedSizeBinary ) { return type.byteWidth; }\n    public visitFixedSizeList   (type: FixedSizeList   ) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    public visitMap             (type: Map_            ) { return this.visitFields(type.children).reduce(sum, 0); }\n    public visitDictionary      (type: Dictionary      ) { return this.visit(type.indices); }\n    public visitFields          (fields: Field[]       ) { return (fields || []).map((field) => this.visit(field.type)); }\n    public visitSchema          (schema: Schema        ) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\n\n/** @ignore */\nexport const instance = new ByteWidthVisitor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { VectorType, VectorCtor } from '../interfaces';\n\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\n\n/** @ignore */\nexport interface GetVectorConstructor extends Visitor {\n    visit<T extends Type>(node: T): VectorCtor<T>;\n    visitMany <T extends Type>(nodes: T[]): VectorCtor<T>[];\n    getVisitFn<T extends Type>(node: T): () => VectorCtor<T>;\n    getVisitFn<T extends DataType>(node: VectorType<T> | Data<T> | T): () => VectorCtor<T>;\n}\n\n/** @ignore */\nexport class GetVectorConstructor extends Visitor {\n    public visitNull                 () { return NullVector; }\n    public visitBool                 () { return BoolVector; }\n    public visitInt                  () { return IntVector; }\n    public visitInt8                 () { return Int8Vector; }\n    public visitInt16                () { return Int16Vector; }\n    public visitInt32                () { return Int32Vector; }\n    public visitInt64                () { return Int64Vector; }\n    public visitUint8                () { return Uint8Vector; }\n    public visitUint16               () { return Uint16Vector; }\n    public visitUint32               () { return Uint32Vector; }\n    public visitUint64               () { return Uint64Vector; }\n    public visitFloat                () { return FloatVector; }\n    public visitFloat16              () { return Float16Vector; }\n    public visitFloat32              () { return Float32Vector; }\n    public visitFloat64              () { return Float64Vector; }\n    public visitUtf8                 () { return Utf8Vector; }\n    public visitBinary               () { return BinaryVector; }\n    public visitFixedSizeBinary      () { return FixedSizeBinaryVector; }\n    public visitDate                 () { return DateVector; }\n    public visitDateDay              () { return DateDayVector; }\n    public visitDateMillisecond      () { return DateMillisecondVector; }\n    public visitTimestamp            () { return TimestampVector; }\n    public visitTimestampSecond      () { return TimestampSecondVector; }\n    public visitTimestampMillisecond () { return TimestampMillisecondVector; }\n    public visitTimestampMicrosecond () { return TimestampMicrosecondVector; }\n    public visitTimestampNanosecond  () { return TimestampNanosecondVector; }\n    public visitTime                 () { return TimeVector; }\n    public visitTimeSecond           () { return TimeSecondVector; }\n    public visitTimeMillisecond      () { return TimeMillisecondVector; }\n    public visitTimeMicrosecond      () { return TimeMicrosecondVector; }\n    public visitTimeNanosecond       () { return TimeNanosecondVector; }\n    public visitDecimal              () { return DecimalVector; }\n    public visitList                 () { return ListVector; }\n    public visitStruct               () { return StructVector; }\n    public visitUnion                () { return UnionVector; }\n    public visitDenseUnion           () { return DenseUnionVector; }\n    public visitSparseUnion          () { return SparseUnionVector; }\n    public visitDictionary           () { return DictionaryVector; }\n    public visitInterval             () { return IntervalVector; }\n    public visitIntervalDayTime      () { return IntervalDayTimeVector; }\n    public visitIntervalYearMonth    () { return IntervalYearMonthVector; }\n    public visitFixedSizeList        () { return FixedSizeListVector; }\n    public visitMap                  () { return MapVector; }\n}\n\n/** @ignore */\nexport const instance = new GetVectorConstructor();\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nexport { MapRow, StructRow } from './row';\n\nimport * as fn from '../util/fn';\nimport { Data } from '../data';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { Chunked } from './chunked';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { isIterable, isAsyncIterable } from '../util/compat';\nimport { Builder, IterableBuilderOptions } from '../builder';\nimport { VectorType as V, VectorCtorArgs } from '../interfaces';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n\ndeclare module '../vector' {\n    namespace Vector {\n        export { newVector as new };\n        export { vectorFrom as from };\n    }\n}\n\ndeclare module './base' {\n    namespace BaseVector {\n        export { vectorFrom as from };\n    }\n    interface BaseVector<T extends DataType> {\n        get(index: number): T['TValue'] | null;\n        set(index: number, value: T['TValue'] | null): void;\n        indexOf(value: T['TValue'] | null, fromIndex?: number): number;\n        toArray(): T['TArray'];\n        getByteWidth(): number;\n        [Symbol.iterator](): IterableIterator<T['TValue'] | null>;\n    }\n}\n\n/** @nocollapse */\nVector.new = newVector;\n\n/** @nocollapse */\nVector.from = vectorFrom;\n\n/** @ignore */\nfunction newVector<T extends DataType>(data: Data<T>, ...args: VectorCtorArgs<V<T>>): V<T> {\n    return new (getVectorConstructor.getVisitFn<T>(data)())(data, ...args) as V<T>;\n}\n\n/** @ignore */\nexport interface VectorBuilderOptions<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: Iterable<T['TValue'] | TNull>; }\n/** @ignore */\nexport interface VectorBuilderOptionsAsync<T extends DataType, TNull = any> extends IterableBuilderOptions<T, TNull> { values: AsyncIterable<T['TValue'] | TNull>; }\n\n/** @ignore */\nexport function vectorFromValuesWithType<T extends DataType, TNull = any>(newDataType: () => T, input: Iterable<T['TValue'] | TNull> | AsyncIterable<T['TValue'] | TNull> | VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    if (isIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as V<T>;\n    } else if (isAsyncIterable(input)) {\n        return Vector.from({ 'nullValues': [null, undefined], type: newDataType(), 'values': input }) as Promise<V<T>>;\n    }\n    const {\n        'values': values = [],\n        'type': type = newDataType(),\n        'nullValues': nullValues = [null, undefined],\n    } = { ...input };\n    return isIterable(values)\n        ? Vector.from({ nullValues, ...input, type } as VectorBuilderOptions<T, TNull>)\n        : Vector.from({ nullValues, ...input, type } as VectorBuilderOptionsAsync<T, TNull>);\n}\n\n/** @ignore */\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull>): Vector<T>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptionsAsync<T, TNull>): Promise<Vector<T>>;\nfunction vectorFrom<T extends DataType = any, TNull = any>(input: VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>) {\n    const { 'values': values = [], ...options } = { 'nullValues': [null, undefined], ...input } as VectorBuilderOptions<T, TNull> | VectorBuilderOptionsAsync<T, TNull>;\n    if (isIterable<T['TValue'] | TNull>(values)) {\n        const chunks = [...Builder.throughIterable(options)(values)];\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    }\n    return (async (chunks: V<T>[]) => {\n        const transform = Builder.throughAsyncIterable(options);\n        for await (const chunk of transform(values)) {\n            chunks.push(chunk);\n        }\n        return chunks.length === 1 ? chunks[0] : Chunked.concat<T>(chunks);\n    })([]);\n}\n\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\n\nBaseVector.prototype.get = function baseVectorGet<T extends DataType>(this: BaseVector<T>, index: number): T['TValue'] | null {\n    return getVisitor.visit(this, index);\n};\n\nBaseVector.prototype.set = function baseVectorSet<T extends DataType>(this: BaseVector<T>, index: number, value: T['TValue'] | null): void {\n    return setVisitor.visit(this, index, value);\n};\n\nBaseVector.prototype.indexOf = function baseVectorIndexOf<T extends DataType>(this: BaseVector<T>, value: T['TValue'] | null, fromIndex?: number): number {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\n\nBaseVector.prototype.toArray = function baseVectorToArray<T extends DataType>(this: BaseVector<T>): T['TArray'] {\n    return toArrayVisitor.visit(this);\n};\n\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth<T extends DataType>(this: BaseVector<T>): number {\n    return byteWidthVisitor.visit(this.type);\n};\n\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator<T extends DataType>(this: BaseVector<T>): IterableIterator<T['TValue'] | null> {\n    return iteratorVisitor.visit(this);\n};\n\n(BaseVector.prototype as any)._bindDataAccessors = bindBaseVectorDataAccessors;\n\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = fn.partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = fn.partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = fn.partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = fn.partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partialType0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = fn.partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n\n/** @ignore */\nfunction partialType0<T extends Vector>(visit: (node: T['type']) => any) {\n    return function(this: T) { return visit(this.type); };\n}\n\n/** @ignore */\nfunction wrapNullableGet<T extends DataType, V extends Vector<T>, F extends (i: number) => any>(fn: F): (...args: Parameters<F>) => ReturnType<F> {\n    return function(this: V, i: number) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n/** @ignore */\nfunction wrapNullableSet<T extends DataType, V extends BaseVector<T>, F extends (i: number, a: any) => void>(fn: F): (...args: Parameters<F>) => void {\n    return function(this: V, i: number, a: any) {\n        if (setBool(this.nullBitmap, this.offset + i, !(a === null || a === undefined))) {\n            fn.call(this, i, a);\n        }\n    };\n}\n\n/** @ignore */\nfunction bindBaseVectorDataAccessors<T extends DataType>(this: BaseVector<T>) {\n    const nullBitmap = this.nullBitmap;\n    if (nullBitmap && nullBitmap.byteLength > 0) {\n        this.get = wrapNullableGet(this.get);\n        this.set = wrapNullableSet(this.set);\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Column } from './column';\nimport { Schema, Field } from './schema';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from './recordbatch';\nimport { DataFrame } from './compute/dataframe';\nimport { RecordBatchReader } from './ipc/reader';\nimport { DataType, RowLike, Struct } from './type';\nimport { selectColumnArgs, selectArgs } from './util/args';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { isPromise, isIterable, isAsyncIterable } from './util/compat';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nimport { distributeColumnsIntoRecordBatches, distributeVectorsIntoRecordBatches } from './util/recordbatch';\nimport { Vector, Chunked, StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = Data<T[keyof T]>[] | Vector<T[keyof T]>[];\ntype Columns<T extends { [key: string]: DataType }> = Column<T[keyof T]>[] | Column<T[keyof T]>[][];\n\nexport interface Table<T extends { [key: string]: DataType } = any> {\n\n    get(index: number): Struct<T>['TValue'];\n    [Symbol.iterator](): IterableIterator<RowLike<T>>;\n\n    slice(begin?: number, end?: number): Table<T>;\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    clone(chunks?: RecordBatch<T>[], offsets?: Uint32Array): Table<T>;\n\n    scan(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    scanReverse(next: import('./compute/dataframe').NextFunc, bind?: import('./compute/dataframe').BindFunc): void;\n    countBy(name: import('./compute/predicate').Col | string): import('./compute/dataframe').CountByResult;\n    filter(predicate: import('./compute/predicate').Predicate): import('./compute/dataframe').FilteredDataFrame<T>;\n}\n\nexport class Table<T extends { [key: string]: DataType } = any>\n    extends Chunked<Struct<T>>\n    implements DataFrame<T>,\n               Clonable<Table<T>>,\n               Sliceable<Table<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    /** @nocollapse */\n    public static empty<T extends { [key: string]: DataType } = {}>(schema = new Schema<T>([])) { return new Table<T>(schema, []); }\n\n    public static from(): Table<{}>;\n    public static from<T extends { [key: string]: DataType } = any>(source: RecordBatchReader<T>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg0): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg2): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg1): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg3): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg4): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArg5): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: PromiseLike<RecordBatchReader<T>>): Promise<Table<T>>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(input?: any) {\n\n        if (!input) { return Table.empty(); }\n\n        if (typeof input === 'object') {\n            let table = isIterable(input['values']) ? tableFromIterable<T, TNull>(input)\n                 : isAsyncIterable(input['values']) ? tableFromAsyncIterable<T, TNull>(input)\n                                                    : null;\n            if (table !== null) { return table; }\n        }\n\n        let reader = RecordBatchReader.from<T>(input) as RecordBatchReader<T> | Promise<RecordBatchReader<T>>;\n\n        if (isPromise<RecordBatchReader<T>>(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table<T>(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches: RecordBatch[] = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table<T>(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n\n    /** @nocollapse */\n    public static async fromAsync<T extends { [key: string]: DataType } = any>(source: import('./ipc/reader').FromArgs): Promise<Table<T>> {\n        return await Table.from<T>(source as any);\n    }\n\n    /** @nocollapse */\n    public static fromStruct<T extends { [key: string]: DataType } = any>(vector: Vector<Struct<T>>) {\n        return Table.new<T>(vector.data.childData as Data<T[keyof T]>[], vector.type.children);\n    }\n\n    /**\n     * @summary Create a new Table from a collection of Columns or Vectors,\n     * with an optional list of names or Fields.\n     *\n     *\n     * `Table.new` accepts an Object of\n     * Columns or Vectors, where the keys will be used as the field names\n     * for the Schema:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new({ i32: i32s, f32: f32s });\n     * assert(table.schema.fields[0].name === 'i32');\n     * ```\n     *\n     * It also accepts a a list of Vectors with an optional list of names or\n     * Fields for the resulting Schema. If the list is omitted or a name is\n     * missing, the numeric index of each Vector will be used as the name:\n     * ```ts\n     * const i32s = Int32Vector.from([1, 2, 3]);\n     * const f32s = Float32Vector.from([.1, .2, .3]);\n     * const table = Table.new([i32s, f32s], ['i32']);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === '1');\n     * ```\n     *\n     * If the supplied arguments are Columns, `Table.new` will infer the Schema\n     * from the Columns:\n     * ```ts\n     * const i32s = Column.new('i32', Int32Vector.from([1, 2, 3]));\n     * const f32s = Column.new('f32', Float32Vector.from([.1, .2, .3]));\n     * const table = Table.new(i32s, f32s);\n     * assert(table.schema.fields[0].name === 'i32');\n     * assert(table.schema.fields[1].name === 'f32');\n     * ```\n     *\n     * If the supplied Vector or Column lengths are unequal, `Table.new` will\n     * extend the lengths of the shorter Columns, allocating additional bytes\n     * to represent the additional null slots. The memory required to allocate\n     * these additional bitmaps can be computed as:\n     * ```ts\n     * let additionalBytes = 0;\n     * for (let vec in shorter_vectors) {\n     *     additionalBytes += (((longestLength - vec.length) + 63) & ~63) >> 3;\n     * }\n     * ```\n     *\n     * For example, an additional null bitmap for one million null values would require\n     * 125,000 bytes (`((1e6 + 63) & ~63) >> 3`), or approx. `0.11MiB`\n     */\n    public static new<T extends { [key: string]: DataType } = any>(...columns: Columns<T>): Table<T>;\n    public static new<T extends VectorMap = any>(children: T): Table<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): Table<T>;\n    /** @nocollapse */\n    public static new(...cols: any[]) {\n        return new Table(...distributeColumnsIntoRecordBatches(selectColumnArgs(cols)));\n    }\n\n    constructor(batches: RecordBatch<T>[]);\n    constructor(...batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, batches: RecordBatch<T>[]);\n    constructor(schema: Schema<T>, ...batches: RecordBatch<T>[]);\n    constructor(...args: any[]) {\n\n        let schema: Schema<T> = null!;\n\n        if (args[0] instanceof Schema) { schema = args.shift(); }\n\n        let chunks = selectArgs<RecordBatch<T>>(RecordBatch, args);\n\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n\n        chunks[0] || (chunks[0] = new _InternalEmptyPlaceholderRecordBatch(schema));\n\n        super(new Struct(schema.fields), chunks);\n\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n\n    protected _schema: Schema<T>;\n    // List of inner RecordBatches\n    protected _chunks: RecordBatch<T>[];\n    protected _children?: Column<T[keyof T]>[];\n\n    public get schema() { return this._schema; }\n    public get length() { return this._length; }\n    public get chunks() { return this._chunks; }\n    public get numCols() { return this._numChildren; }\n\n    public clone(chunks = this._chunks) {\n        return new Table<T>(this._schema, chunks);\n    }\n\n    public getColumn<R extends keyof T>(name: R): Column<T[R]> {\n        return this.getColumnAt(this.getColumnIndex(name)) as Column<T[R]>;\n    }\n    public getColumnAt<R extends DataType = any>(index: number): Column<R> | null {\n        return this.getChildAt(index);\n    }\n    public getColumnIndex<R extends keyof T>(name: R) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Column<R> | null {\n        if (index < 0 || index >= this.numChildren) { return null; }\n        let field: Field<R>, child: Column<R>;\n        const fields = (this._schema as Schema<any>).fields;\n        const columns = this._children || (this._children = []) as Column[];\n        if (child = columns[index]) { return child as Column<R>; }\n        if (field = fields[index]) {\n            const chunks = this._chunks\n                .map((chunk) => chunk.getChildAt<R>(index))\n                .filter((vec): vec is Vector<R> => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column<R>(field, chunks));\n            }\n        }\n        return null;\n    }\n\n    // @ts-ignore\n    public serialize(encoding = 'binary', stream = true) {\n        const Writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return Writer.writeAll(this).toUint8Array(true);\n    }\n    public count(): number {\n        return this._length;\n    }\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt<K>(...columnIndices);\n        return new Table(schema, this._chunks.map(({ length, data: { childData } }) => {\n            return new RecordBatch(schema, length, columnIndices.map((i) => childData[i]).filter(Boolean));\n        }));\n    }\n    public assign<R extends { [key: string]: DataType } = any>(other: Table<R>) {\n\n        const fields = this._schema.fields;\n        const [indices, oldToNew] = other.schema.fields.reduce((memo, f2, newIdx) => {\n            const [indices, oldToNew] = memo;\n            const i = fields.findIndex((f) => f.name === f2.name);\n            ~i ? (oldToNew[i] = newIdx) : indices.push(newIdx);\n            return memo;\n        }, [[], []] as number[][]);\n\n        const schema = this._schema.assign(other.schema);\n        const columns = [\n            ...fields.map((_f, i, _fs, j = oldToNew[i]) =>\n                (j === undefined ? this.getColumnAt(i) : other.getColumnAt(j))!),\n            ...indices.map((i) => other.getColumnAt(i)!)\n        ].filter(Boolean) as Column<(T & R)[keyof T | keyof R]>[];\n\n        return new Table<T & R>(...distributeVectorsIntoRecordBatches<any>(schema, columns));\n    }\n}\n\nfunction tableFromIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptions<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return Table.fromStruct(StructVector.from(input as VectorBuilderOptions<Struct<T>, TNull>));\n    }\n    return null;\n}\n\nfunction tableFromAsyncIterable<T extends { [key: string]: DataType } = any, TNull = any>(input: VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n    const { type } = input;\n    if (type instanceof Struct) {\n        return StructVector.from(input as VectorBuilderOptionsAsync<Struct<T>, TNull>).then((vector) => Table.fromStruct(vector));\n    }\n    return null;\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Vector } from './vector';\nimport { Visitor } from './visitor';\nimport { Schema, Field } from './schema';\nimport { isIterable } from './util/compat';\nimport { Chunked } from './vector/chunked';\nimport { selectFieldArgs } from './util/args';\nimport { DataType, Struct, Dictionary } from './type';\nimport { ensureSameLengthData } from './util/recordbatch';\nimport { Clonable, Sliceable, Applicative } from './vector';\nimport { StructVector, VectorBuilderOptions, VectorBuilderOptionsAsync } from './vector/index';\n\ntype VectorMap = { [key: string]: Vector };\ntype Fields<T extends { [key: string]: DataType }> = (keyof T)[] | Field<T[keyof T]>[];\ntype ChildData<T extends { [key: string]: DataType }> = (Data<T[keyof T]> | Vector<T[keyof T]>)[];\n\nexport interface RecordBatch<T extends { [key: string]: DataType } = any> {\n    concat(...others: Vector<Struct<T>>[]): Table<T>;\n    slice(begin?: number, end?: number): RecordBatch<T>;\n    clone(data: Data<Struct<T>>, children?: Vector[]): RecordBatch<T>;\n}\n\nexport class RecordBatch<T extends { [key: string]: DataType } = any>\n    extends StructVector<T>\n    implements Clonable<RecordBatch<T>>,\n               Sliceable<RecordBatch<T>>,\n               Applicative<Struct<T>, Table<T>> {\n\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull>): Table<T>;\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptionsAsync<Struct<T>, TNull>): Promise<Table<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any, TNull = any>(options: VectorBuilderOptions<Struct<T>, TNull> | VectorBuilderOptionsAsync<Struct<T>, TNull>) {\n        if (isIterable<(Struct<T>)['TValue'] | TNull>(options['values'])) {\n            return Table.from(options as VectorBuilderOptions<Struct<T>, TNull>);\n        }\n        return Table.from(options as VectorBuilderOptionsAsync<Struct<T>, TNull>);\n    }\n\n    public static new<T extends VectorMap = any>(children: T): RecordBatch<{ [P in keyof T]: T[P]['type'] }>;\n    public static new<T extends { [key: string]: DataType } = any>(children: ChildData<T>, fields?: Fields<T>): RecordBatch<T>;\n    /** @nocollapse */\n    public static new<T extends { [key: string]: DataType } = any>(...args: any[]) {\n        const [fs, xs] = selectFieldArgs<T>(args);\n        const vs = xs.filter((x): x is Vector<T[keyof T]> => x instanceof Vector);\n        return new RecordBatch(...ensureSameLengthData(new Schema<T>(fs), vs.map((x) => x.data)));\n    }\n\n    protected _schema: Schema;\n    protected _dictionaries?: Map<number, Vector>;\n\n    constructor(schema: Schema<T>, length: number, children: (Data | Vector)[]);\n    constructor(schema: Schema<T>, data: Data<Struct<T>>, children?: Vector[]);\n    constructor(...args: any[]) {\n        let data: Data<Struct<T>>;\n        let schema = args[0] as Schema<T>;\n        let children: Vector[] | undefined;\n        if (args[1] instanceof Data) {\n            [, data, children] = (args as [any, Data<Struct<T>>, Vector<T[keyof T]>[]?]);\n        } else {\n            const fields = schema.fields as Field<T[keyof T]>[];\n            const [, length, childData] = args as [any, number, Data<T[keyof T]>[]];\n            data = Data.Struct(new Struct<T>(fields), 0, length, 0, null, childData);\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n\n    public clone(data: Data<Struct<T>>, children = this._children) {\n        return new RecordBatch<T>(this._schema, data, children);\n    }\n\n    public concat(...others: Vector<Struct<T>>[]): Table<T> {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n\n    public get schema() { return this._schema; }\n    public get numCols() { return this._schema.fields.length; }\n    public get dictionaries() {\n        return this._dictionaries || (this._dictionaries = DictionaryCollector.collect(this));\n    }\n\n    public select<K extends keyof T = any>(...columnNames: K[]) {\n        const nameToIndex = this._schema.fields.reduce((m, f, i) => m.set(f.name as K, i), new Map<K, number>());\n        return this.selectAt(...columnNames.map((columnName) => nameToIndex.get(columnName)!).filter((x) => x > -1));\n    }\n    public selectAt<K extends T[keyof T] = any>(...columnIndices: number[]) {\n        const schema = this._schema.selectAt(...columnIndices);\n        const childData = columnIndices.map((i) => this.data.childData[i]).filter(Boolean);\n        return new RecordBatch<{ [key: string]: K }>(schema, this.length, childData);\n    }\n}\n\n/**\n * An internal class used by the `RecordBatchReader` and `RecordBatchWriter`\n * implementations to differentiate between a stream with valid zero-length\n * RecordBatches, and a stream with a Schema message, but no RecordBatches.\n * @see https://github.com/apache/arrow/pull/4373\n * @ignore\n * @private\n */\n/* tslint:disable:class-name */\nexport class _InternalEmptyPlaceholderRecordBatch<T extends { [key: string]: DataType } = any> extends RecordBatch<T> {\n    constructor(schema: Schema<T>) {\n        super(schema, 0, schema.fields.map((f) => Data.new(f.type, 0, 0, 0)));\n    }\n}\n\n/** @ignore */\nclass DictionaryCollector extends Visitor {\n    public dictionaries = new Map<number, Vector>();\n    public static collect<T extends RecordBatch>(batch: T) {\n        return new DictionaryCollector().visit(\n            batch.data, new Struct(batch.schema.fields)\n        ).dictionaries;\n    }\n    public visit(data: Data, type: DataType) {\n        if (DataType.isDictionary(type)) {\n            return this.visitDictionary(data, type);\n        } else {\n            data.childData.forEach((child, i) =>\n                this.visit(child, type.children[i].type));\n        }\n        return this;\n    }\n    public visitDictionary(data: Data, type: Dictionary) {\n        const dictionary = data.dictionary;\n        if (dictionary && dictionary.length > 0) {\n            this.dictionaries.set(type.id, dictionary);\n        }\n        return this;\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { DataType } from '../type';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport { Schema, Field } from '../schema';\nimport streamAdapters from '../io/adapters';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ArrayBufferViewInput } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { RecordBatch, _InternalEmptyPlaceholderRecordBatch } from '../recordbatch';\nimport {\n    FileHandle,\n    ArrowJSONLike,\n    ITERATOR_DONE,\n    ReadableInterop,\n} from '../io/interfaces';\nimport {\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding\n} from './message';\nimport {\n    isPromise,\n    isIterable, isAsyncIterable,\n    isIteratorResult, isArrowJSON,\n    isFileHandle, isFetchResponse,\n    isReadableDOMStream, isReadableNodeStream\n} from '../util/compat';\n\n/** @ignore */ export type FromArg0 = ArrowJSONLike;\n/** @ignore */ export type FromArg1 = PromiseLike<ArrowJSONLike>;\n/** @ignore */ export type FromArg2 = Iterable<ArrayBufferViewInput> | ArrayBufferViewInput;\n/** @ignore */ export type FromArg3 = PromiseLike<Iterable<ArrayBufferViewInput> | ArrayBufferViewInput>;\n/** @ignore */ export type FromArg4 = Response | NodeJS.ReadableStream | ReadableStream<ArrayBufferViewInput> | AsyncIterable<ArrayBufferViewInput>;\n/** @ignore */ export type FromArg5 = FileHandle | PromiseLike<FileHandle> | PromiseLike<FromArg4>;\n/** @ignore */ export type FromArgs = FromArg0 | FromArg1 | FromArg2 | FromArg3 | FromArg4 | FromArg5;\n\n/** @ignore */ type OpenOptions = { autoDestroy?: boolean; };\n/** @ignore */ type RecordBatchReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n/** @ignore */ type AsyncRecordBatchReaders<T extends { [key: string]: DataType } = any> = AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>;\n/** @ignore */ type RecordBatchFileReaders<T extends { [key: string]: DataType } = any> = RecordBatchFileReader<T> | AsyncRecordBatchFileReader<T>;\n/** @ignore */ type RecordBatchStreamReaders<T extends { [key: string]: DataType } = any> = RecordBatchStreamReader<T> | AsyncRecordBatchStreamReader<T>;\n\nexport class RecordBatchReader<T extends { [key: string]: DataType } = any> extends ReadableInterop<RecordBatch<T>> {\n\n    protected _impl: RecordBatchReaderImpls<T>;\n    protected constructor(impl: RecordBatchReaderImpls<T>) {\n        super();\n        this._impl = impl;\n    }\n\n    public get closed() { return this._impl.closed; }\n    public get schema() { return this._impl.schema; }\n    public get autoDestroy() { return this._impl.autoDestroy; }\n    public get dictionaries() { return this._impl.dictionaries; }\n    public get numDictionaries() { return this._impl.numDictionaries; }\n    public get numRecordBatches() { return this._impl.numRecordBatches; }\n    public get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n\n    public isSync(): this is RecordBatchReaders<T> { return this._impl.isSync(); }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return this._impl.isAsync(); }\n    public isFile(): this is RecordBatchFileReaders<T> { return this._impl.isFile(); }\n    public isStream(): this is RecordBatchStreamReaders<T> { return this._impl.isStream(); }\n\n    public next() {\n        return this._impl.next();\n    }\n    public throw(value?: any) {\n        return this._impl.throw(value);\n    }\n    public return(value?: any) {\n        return this._impl.return(value);\n    }\n    public cancel() {\n        return this._impl.cancel();\n    }\n    public reset(schema?: Schema<T> | null): this {\n        this._impl.reset(schema);\n        this._DOMStream = undefined;\n        this._nodeStream = undefined;\n        return this;\n    }\n    public open(options?: OpenOptions) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    public readRecordBatch(index: number): RecordBatch<T> | null | Promise<RecordBatch<T> | null> {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return (<IterableIterator<RecordBatch<T>>> this._impl)[Symbol.iterator]();\n    }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return (<AsyncIterableIterator<RecordBatch<T>>> this._impl)[Symbol.asyncIterator]();\n    }\n    public toDOMStream() {\n        return streamAdapters.toDOMStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>));\n    }\n    public toNodeStream() {\n        return streamAdapters.toNodeStream<RecordBatch<T>>(\n            (this.isSync()\n                ? { [Symbol.iterator]: () => this } as Iterable<RecordBatch<T>>\n                : { [Symbol.asyncIterator]: () => this } as AsyncIterable<RecordBatch<T>>),\n            { objectMode: true });\n    }\n\n    /** @nocollapse */\n    // @ts-ignore\n    public static throughNode(options?: import('stream').DuplexOptions & { autoDestroy: boolean }): import('stream').Duplex {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    public static throughDOM<T extends { [key: string]: DataType }>(\n        // @ts-ignore\n        writableStrategy?: ByteLengthQueuingStrategy,\n        // @ts-ignore\n        readableStrategy?: { autoDestroy: boolean }\n    ): { writable: WritableStream<Uint8Array>, readable: ReadableStream<RecordBatch<T>> } {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n\n    public static from<T extends RecordBatchReader>(source: T): T;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg0): RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg1): Promise<RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg2): RecordBatchFileReader<T> | RecordBatchStreamReader<T>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg3): Promise<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg4): Promise<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static from<T extends { [key: string]: DataType } = any>(source: FromArg5): Promise<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static from<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        } else if (isArrowJSON(source)) {\n            return fromArrowJSON<T>(source);\n        } else if (isFileHandle(source)) {\n            return fromFileHandle<T>(source);\n        } else if (isPromise<any>(source)) {\n            return (async () => await RecordBatchReader.from<any>(await source))();\n        } else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream<T>(new AsyncByteStream(source));\n        }\n        return fromByteStream<T>(new ByteStream(source));\n    }\n\n    public static readAll<T extends RecordBatchReader>(source: T): T extends RecordBatchReaders ? IterableIterator<T> : AsyncIterableIterator<T>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg0): IterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg1): AsyncIterableIterator<RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg2): IterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg3): AsyncIterableIterator<RecordBatchFileReader<T> | RecordBatchStreamReader<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg4): AsyncIterableIterator<RecordBatchFileReader<T> | AsyncRecordBatchReaders<T>>;\n    public static readAll<T extends { [key: string]: DataType } = any>(source: FromArg5): AsyncIterableIterator<AsyncRecordBatchFileReader<T> | AsyncRecordBatchStreamReader<T>>;\n    /** @nocollapse */\n    public static readAll<T extends { [key: string]: DataType } = any>(source: any) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source as AsyncRecordBatchReaders<T>);\n        } else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable<ArrayBufferViewInput>(source) || isIteratorResult(source)) {\n            return readAllSync<T>(source) as IterableIterator<RecordBatchReaders<T>>;\n        }\n        return readAllAsync<T>(source) as AsyncIterableIterator<RecordBatchReaders<T> | AsyncRecordBatchReaders<T>>;\n    }\n}\n\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n\n/** @ignore */\nexport class RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: RecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator]() { return (this._impl as IterableIterator<RecordBatch<T>>)[Symbol.iterator](); }\n    public async *[Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    constructor(protected _impl: AsyncRecordBatchStreamReaderImpl<T>) { super (_impl); }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    public [Symbol.asyncIterator]() { return (this._impl as AsyncIterableIterator<RecordBatch<T>>)[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    constructor(protected _impl: RecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    constructor(protected _impl: AsyncRecordBatchFileReaderImpl<T>) { super (_impl); }\n}\n\n//\n// Now override the return types for each sync/async RecordBatchReader variant\n//\n\n/** @ignore */\nexport interface RecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): this;\n    cancel(): void;\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchStreamReader<T extends { [key: string]: DataType } = any> extends RecordBatchReader<T> {\n    open(options?: OpenOptions | undefined): Promise<this>;\n    cancel(): Promise<void>;\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n}\n\n/** @ignore */\nexport interface RecordBatchFileReader<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\nexport interface AsyncRecordBatchFileReader<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReader<T> {\n    footer: Footer;\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\ntype RecordBatchReaderImpls<T extends { [key: string]: DataType } = any> =\n     RecordBatchJSONReaderImpl<T> |\n     RecordBatchFileReaderImpl<T> |\n     RecordBatchStreamReaderImpl<T> |\n     AsyncRecordBatchFileReaderImpl<T> |\n     AsyncRecordBatchStreamReaderImpl<T>;\n\n/** @ignore */\ninterface RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> {\n\n    closed: boolean;\n    schema: Schema<T>;\n    autoDestroy: boolean;\n    dictionaries: Map<number, Vector>;\n\n    isFile(): this is RecordBatchFileReaders<T>;\n    isStream(): this is RecordBatchStreamReaders<T>;\n    isSync(): this is RecordBatchReaders<T>;\n    isAsync(): this is AsyncRecordBatchReaders<T>;\n\n    reset(schema?: Schema<T> | null): this;\n}\n\n/** @ignore */\ninterface RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): this;\n    cancel(): void;\n\n    throw(value?: any): IteratorResult<any>;\n    return(value?: any): IteratorResult<any>;\n    next(value?: any): IteratorResult<RecordBatch<T>>;\n\n    [Symbol.iterator](): IterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> {\n\n    open(options?: OpenOptions): Promise<this>;\n    cancel(): Promise<void>;\n\n    throw(value?: any): Promise<IteratorResult<any>>;\n    return(value?: any): Promise<IteratorResult<any>>;\n    next(value?: any): Promise<IteratorResult<RecordBatch<T>>>;\n\n    [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>>;\n}\n\n/** @ignore */\ninterface RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): RecordBatch<T> | null;\n}\n\n/** @ignore */\ninterface AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T> {\n    readRecordBatch(index: number): Promise<RecordBatch<T> | null>;\n}\n\n/** @ignore */\nabstract class RecordBatchReaderImpl<T extends { [key: string]: DataType } = any> implements RecordBatchReaderImpl<T> {\n\n    // @ts-ignore\n    public schema: Schema;\n    public closed = false;\n    public autoDestroy = true;\n    public dictionaries: Map<number, Vector>;\n\n    protected _dictionaryIndex = 0;\n    protected _recordBatchIndex = 0;\n    public get numDictionaries() { return this._dictionaryIndex; }\n    public get numRecordBatches() { return this._recordBatchIndex; }\n\n    constructor(dictionaries = new Map<number, Vector>()) {\n        this.dictionaries = dictionaries;\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return false; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return false; }\n    public isFile(): this is RecordBatchFileReaders<T> { return false; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return false; }\n\n    public reset(schema?: Schema<T> | null) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = <any> schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n\n    protected _loadRecordBatch(header: metadata.RecordBatch, body: any) {\n        return new RecordBatch<T>(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    protected _loadDictionaryBatch(header: metadata.DictionaryBatch, body: any) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        const dictionary = dictionaries.get(id);\n        if (isDelta || !dictionary) {\n            const type = schema.dictionaries.get(id)!;\n            return (dictionary && isDelta ? dictionary.concat(\n                Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0])) as Vector;\n        }\n        return dictionary;\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new VectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n/** @ignore */\nclass RecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements IterableIterator<RecordBatch<T>> {\n\n    protected _reader: MessageReader;\n    protected _handle: ByteStream | ArrowJSONLike;\n\n    constructor(source: ByteStream | ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.iterator](): IterableIterator<RecordBatch<T>> {\n        return this as IterableIterator<RecordBatch<T>>;\n    }\n    public cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()!))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    public throw(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public return(value?: any): IteratorResult<any> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public next(): IteratorResult<RecordBatch<T>> {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return this.return();\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchReaderImpl<T> implements AsyncIterableIterator<RecordBatch<T>> {\n\n    protected _handle: AsyncByteStream;\n    protected _reader: AsyncMessageReader;\n\n    constructor(source: AsyncByteStream, dictionaries?: Map<number, Vector>) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public isStream(): this is RecordBatchStreamReaders<T> { return true; }\n    public [Symbol.asyncIterator](): AsyncIterableIterator<RecordBatch<T>> {\n        return this as AsyncIterableIterator<RecordBatch<T>>;\n    }\n    public async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = <any> null;\n            this.dictionaries = <any> null;\n        }\n    }\n    public async open(options?: OpenOptions) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())!))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    public async throw(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async return(value?: any): Promise<IteratorResult<any>> {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    public async next() {\n        if (this.closed) { return ITERATOR_DONE; }\n        let message: Message | null, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            } else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            } else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        if (this.schema && this._recordBatchIndex === 0) {\n            this._recordBatchIndex++;\n            return { done: false, value: new _InternalEmptyPlaceholderRecordBatch<T>(this.schema) };\n        }\n        return await this.return();\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null) {\n        return await this._reader.readMessage<T>(type);\n    }\n}\n\n/** @ignore */\nclass RecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n\n    // @ts-ignore\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: RandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: RandomAccessFile | ArrayBufferViewInput, dictionaries?: Map<number, Vector>) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    public isSync(): this is RecordBatchReaders<T> { return true; }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    public readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Message<T> | null {\n        if (!this._footer) { this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl<T extends { [key: string]: DataType } = any> extends AsyncRecordBatchStreamReaderImpl<T>\n    implements AsyncRecordBatchFileReaderImpl<T> {\n\n    protected _footer?: Footer;\n    // @ts-ignore\n    protected _handle: AsyncRandomAccessFile;\n    public get footer() { return this._footer!; }\n    public get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    public get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n\n    constructor(source: FileHandle, byteLength?: number, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, dictionaries?: Map<number, Vector>);\n    constructor(source: FileHandle | AsyncRandomAccessFile, ...rest: any[]) {\n        const byteLength = typeof rest[0] !== 'number' ? <number> rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? <Map<number, Vector>> rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    public isFile(): this is RecordBatchFileReaders<T> { return true; }\n    public isAsync(): this is AsyncRecordBatchReaders<T> { return true; }\n    public async open(options?: OpenOptions) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    public async readRecordBatch(index: number) {\n        if (this.closed) { return null; }\n        if (!this._footer) { await this.open(); }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    protected async _readDictionaryBatch(index: number) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    protected async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    protected async _readNextMessageAndValidate<T extends MessageHeader>(type?: T | null): Promise<Message<T> | null> {\n        if (!this._footer) { await this.open(); }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n\n/** @ignore */\nclass RecordBatchJSONReaderImpl<T extends { [key: string]: DataType } = any> extends RecordBatchStreamReaderImpl<T> {\n    constructor(source: ArrowJSONLike, dictionaries?: Map<number, Vector>) {\n        super(source, dictionaries);\n    }\n    protected _loadVectors(header: metadata.RecordBatch, body: any, types: (Field | DataType)[]) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers, this.dictionaries).visitMany(types);\n    }\n}\n\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n\n/** @ignore */\nfunction shouldAutoDestroy(self: { autoDestroy: boolean }, options?: OpenOptions) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n\n/** @ignore */\nfunction* readAllSync<T extends { [key: string]: DataType } = any>(source: RecordBatchReaders<T> | FromArg0 | FromArg2) {\n    const reader = RecordBatchReader.from<T>(<any> source) as RecordBatchReaders<T>;\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do { yield reader; } while (!(reader.reset().open()).closed);\n        }\n    } finally { reader.cancel(); }\n}\n\n/** @ignore */\nasync function* readAllAsync<T extends { [key: string]: DataType } = any>(source: AsyncRecordBatchReaders<T> | FromArg1 | FromArg3 | FromArg4 | FromArg5) {\n    const reader = await RecordBatchReader.from<T>(<any> source) as RecordBatchReader<T>;\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do { yield reader; } while (!(await reader.reset().open()).closed);\n        }\n    } finally { await reader.cancel(); }\n}\n\n/** @ignore */\nfunction fromArrowJSON<T extends { [key: string]: DataType }>(source: ArrowJSONLike) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl<T>(source));\n}\n\n/** @ignore */\nfunction fromByteStream<T extends { [key: string]: DataType }>(source: ByteStream) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl<T>(function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromAsyncByteStream<T extends { [key: string]: DataType }>(source: AsyncByteStream) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl<T>(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(async function*(): any {}()));\n}\n\n/** @ignore */\nasync function fromFileHandle<T extends { [key: string]: DataType }>(source: FileHandle) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl<T>(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl<T>(file));\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { Vector } from '../../vector';\nimport { VectorType as V } from '../../interfaces';\nimport { Builder, BuilderOptions } from '../../builder/index';\n\n/** @ignore */\nexport interface BuilderTransformOptions<T extends DataType = any, TNull = any> extends BuilderOptions<T, TNull> {\n    queueingStrategy?: 'bytes' | 'count';\n    dictionaryHashFunction?: (value: any) => string | number;\n    readableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    writableStrategy?: { highWaterMark?: number, size?: any, type?: 'bytes'; };\n    valueToChildTypeId?: (builder: Builder<T, TNull>, value: any, offset: number) => number;\n}\n\n/** @ignore */\nexport function builderThroughDOMStream<T extends DataType = any, TNull = any>(options: BuilderTransformOptions<T, TNull>) {\n    return new BuilderTransform(options);\n}\n\n/** @ignore */\nexport class BuilderTransform<T extends DataType = any, TNull = any> {\n\n    public readable: ReadableStream<V<T>>;\n    public writable: WritableStream<T['TValue'] | TNull>;\n    public _controller: ReadableStreamDefaultController<V<T>> | null;\n\n    private _numChunks = 0;\n    private _finished = false;\n    private _bufferedSize = 0;\n    private _builder: Builder<T, TNull>;\n    private _getSize: (builder: Builder<T, TNull>) => number;\n\n    constructor(options: BuilderTransformOptions<T, TNull>) {\n\n        // Access properties by string indexers to defeat closure compiler\n\n        const {\n            ['readableStrategy']: readableStrategy,\n            ['writableStrategy']: writableStrategy,\n            ['queueingStrategy']: queueingStrategy = 'count',\n            ...builderOptions\n        } = options;\n\n        this._controller = null;\n        this._builder = Builder.new<T, TNull>(builderOptions);\n        this._getSize = queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength;\n\n        const { ['highWaterMark']: readableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...readableStrategy };\n        const { ['highWaterMark']: writableHighWaterMark = queueingStrategy === 'bytes' ? 2 ** 14 : 1000 } = { ...writableStrategy };\n\n        this['readable'] = new ReadableStream<V<T>>({\n            ['cancel']: ()  => { this._builder.clear(); },\n            ['pull']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n            ['start']: (c) => { this._maybeFlush(this._builder, this._controller = c); },\n        }, {\n            'highWaterMark': readableHighWaterMark,\n            'size': queueingStrategy !== 'bytes' ? chunkLength : chunkByteLength,\n        });\n\n        this['writable'] = new WritableStream({\n            ['abort']: () => { this._builder.clear(); },\n            ['write']: () => { this._maybeFlush(this._builder, this._controller); },\n            ['close']: () => { this._maybeFlush(this._builder.finish(), this._controller); },\n        }, {\n            'highWaterMark': writableHighWaterMark,\n            'size': (value: T['TValue'] | TNull) => this._writeValueAndReturnChunkSize(value),\n        });\n    }\n\n    private _writeValueAndReturnChunkSize(value: T['TValue'] | TNull) {\n        const bufferedSize = this._bufferedSize;\n        this._bufferedSize = this._getSize(this._builder.append(value));\n        return this._bufferedSize - bufferedSize;\n    }\n\n    private _maybeFlush(builder: Builder<T, TNull>, controller: ReadableStreamDefaultController<V<T>> | null) {\n        if (controller === null) { return; }\n        if (this._bufferedSize >= controller.desiredSize!) {\n            ++this._numChunks && this._enqueue(controller, builder.toVector());\n        }\n        if (builder.finished) {\n            if (builder.length > 0 || this._numChunks === 0) {\n                ++this._numChunks && this._enqueue(controller, builder.toVector());\n            }\n            if (!this._finished && (this._finished = true)) {\n                this._enqueue(controller, null);\n            }\n        }\n    }\n\n    private _enqueue(controller: ReadableStreamDefaultController<V<T>>, chunk: V<T> | null) {\n        this._bufferedSize = 0;\n        this._controller = null;\n        chunk === null ? controller.close() : controller.enqueue(chunk);\n    }\n}\n\n/** @ignore */ const chunkLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.length;\n/** @ignore */ const chunkByteLength = <T extends DataType = any>(chunk: Vector<T> | Builder<T>) => chunk.byteLength;\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Vector } from '../vector';\nimport { RecordBatch } from '../recordbatch';\nimport { DictionaryVector } from '../vector/dictionary';\n\n/** @ignore */\nexport type ValueFunc<T> = (idx: number, cols: RecordBatch) => T | null;\n/** @ignore */\nexport type PredicateFunc = (idx: number, cols: RecordBatch) => boolean;\n\n/** @ignore */\nexport abstract class Value<T> {\n    eq(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new Equals(this, other);\n    }\n    le(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new LTeq(this, other);\n    }\n    ge(other: Value<T> | T): Predicate {\n        if (!(other instanceof Value)) { other = new Literal(other); }\n        return new GTeq(this, other);\n    }\n    lt(other: Value<T> | T): Predicate {\n        return new Not(this.ge(other));\n    }\n    gt(other: Value<T> | T): Predicate {\n        return new Not(this.le(other));\n    }\n    ne(other: Value<T> | T): Predicate {\n        return new Not(this.eq(other));\n    }\n}\n\n/** @ignore */\nexport class Literal<T= any> extends Value<T> {\n    constructor(public v: T) { super(); }\n}\n\n/** @ignore */\nexport class Col<T= any> extends Value<T> {\n    // @ts-ignore\n    public vector: Vector;\n    // @ts-ignore\n    public colidx: number;\n\n    constructor(public name: string) { super(); }\n    bind(batch: RecordBatch): (idx: number, batch?: RecordBatch) => any {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) { throw new Error(`Failed to bind Col \"${this.name}\"`); }\n        }\n\n        const vec = this.vector = batch.getChildAt(this.colidx)!;\n        return (idx: number) => vec.get(idx);\n    }\n}\n\n/** @ignore */\nexport abstract class Predicate {\n    abstract bind(batch: RecordBatch): PredicateFunc;\n    and(...expr: Predicate[]): And { return new And(this, ...expr); }\n    or(...expr: Predicate[]): Or { return new Or(this, ...expr); }\n    not(): Predicate { return new Not(this); }\n}\n\n/** @ignore */\nexport abstract class ComparisonPredicate<T= any> extends Predicate {\n    constructor(public readonly left: Value<T>, public readonly right: Value<T>) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            } else { // right is a Col\n\n                return this._bindLitCol(batch, this.left, this.right as Col);\n            }\n        } else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left as Col, this.right);\n            } else { // right is a Col\n                return this._bindColCol(batch, this.left as Col, this.right as Col);\n            }\n        }\n    }\n\n    protected abstract _bindLitLit(batch: RecordBatch, left: Literal, right: Literal): PredicateFunc;\n    protected abstract _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc;\n    protected abstract _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc;\n    protected abstract _bindLitCol(batch: RecordBatch, lit: Literal, col: Col): PredicateFunc;\n}\n\n/** @ignore */\nexport abstract class CombinationPredicate extends Predicate {\n    readonly children: Predicate[];\n    constructor(...children: Predicate[]) {\n        super();\n        this.children = children;\n    }\n}\n// add children to prototype so it doesn't get mangled in es2015/umd\n(<any> CombinationPredicate.prototype).children = Object.freeze([]); // freeze for safety\n\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ands\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.every((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children: Predicate[]) {\n        // Flatten any Ors\n        children = children.reduce((accum: Predicate[], p: Predicate): Predicate[] => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch: RecordBatch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx: number, batch: RecordBatch) => bound.some((p) => p(idx, batch));\n    }\n}\n\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    // Helpers used to cache dictionary reverse lookups between calls to bind\n    private lastDictionary: Vector|undefined;\n    private lastKey: number|undefined;\n\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v == right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, batch: RecordBatch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key: any;\n            const vector = col.vector as DictionaryVector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            } else {\n                key = this.lastKey;\n            }\n\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            } else {\n                return (idx: number) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        } else {\n            return (idx: number, cols: RecordBatch) => col_func(idx, cols) == lit.v;\n        }\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        // Equals is commutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v <= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) <= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v <= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    protected _bindLitLit(_batch: RecordBatch, left: Literal, right: Literal): PredicateFunc {\n        const rtrn: boolean = left.v >= right.v;\n        return () => rtrn;\n    }\n\n    protected _bindColCol(batch: RecordBatch, left: Col, right: Col): PredicateFunc {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx: number, cols: RecordBatch) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n\n    protected _bindColLit(batch: RecordBatch, col: Col, lit: Literal): PredicateFunc {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => col_func(idx, cols) >= lit.v;\n    }\n\n    protected _bindLitCol(batch: RecordBatch, lit: Literal, col: Col) {\n        const col_func = col.bind(batch);\n        return (idx: number, cols: RecordBatch) => lit.v >= col_func(idx, cols);\n    }\n}\n\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(public readonly child: Predicate) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        const func = this.child.bind(batch);\n        return (idx: number, batch: RecordBatch) => !func(idx, batch);\n    }\n}\n\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(private next: PredicateFunc, private bind_: (batch: RecordBatch) => void) {\n        super();\n    }\n\n    bind(batch: RecordBatch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\n\nexport function lit(v: any): Value<any> { return new Literal(v); }\nexport function col(n: string): Col<any> { return new Col(n); }\nexport function and(...p: Predicate[]): And { return new And(...p); }\nexport function or(...p: Predicate[]): Or { return new Or(...p); }\nexport function custom(next: PredicateFunc, bind: (batch: RecordBatch) => void) {\n    return new CustomPredicate(next, bind);\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Table } from '../table';\nimport { Vector } from '../vector';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Predicate, Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as V } from '../interfaces';\nimport { DataType, Int, Struct, Dictionary } from '../type';\n\n/** @ignore */\nexport type BindFunc = (batch: RecordBatch) => void;\n/** @ignore */\nexport type NextFunc = (idx: number, batch: RecordBatch) => void;\n\nTable.prototype.countBy = function(this: Table, name: Col | string) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.scanReverse = function(this: Table, next: NextFunc, bind?: BindFunc) { return new DataFrame(this.chunks).scanReverse(next, bind); };\nTable.prototype.filter = function(this: Table, predicate: Predicate): FilteredDataFrame { return new DataFrame(this.chunks).filter(predicate); };\n\nexport class DataFrame<T extends { [key: string]: DataType } = any> extends Table<T> {\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(this.chunks, predicate);\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) { bind(batch); }\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                next(index, batch);\n            }\n        }\n    }\n    public countBy(name: Col | string) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n/** @ignore */\nexport class CountByResult<T extends DataType = any, TCount extends Int = Int> extends Table<{ values: T,  counts: TCount }> {\n    constructor(values: Vector<T>, counts: V<TCount>) {\n        type R = { values: T, counts: TCount };\n        const schema = new Schema<R>([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch<R>(schema, counts.length, [values, counts]));\n    }\n    public toJSON(): Object {\n        const values = this.getColumnAt(0)!;\n        const counts = this.getColumnAt(1)!;\n        const result = {} as { [k: string]: number | null };\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\n\n/** @ignore */\nexport class FilteredDataFrame<T extends { [key: string]: DataType } = any> extends DataFrame<T> {\n    private _predicate: Predicate;\n    constructor (batches: RecordBatch<T>[], predicate: Predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    public scan(next: NextFunc, bind?: BindFunc) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public scanReverse(next: NextFunc, bind?: BindFunc) {\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = numBatches; --batchIndex >= 0;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            let isBound = false;\n            // yield all indices\n            for (let index = batch.length; --index >= 0;) {\n                if (predicate(index, batch)) {\n                    // bind batches lazily - if predicate doesn't match anything\n                    // in the batch we don't need to call bind on the batch\n                    if (bind && !isBound) {\n                        bind(batch);\n                        isBound = true;\n                    }\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    public count(): number {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { ++sum; }\n            }\n        }\n        return sum;\n    }\n    public *[Symbol.iterator](): IterableIterator<Struct<T>['TValue']> {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) { yield batch.get(index) as any; }\n            }\n        }\n    }\n    public filter(predicate: Predicate): FilteredDataFrame<T> {\n        return new FilteredDataFrame<T>(\n            this._chunks,\n            this._predicate.and(predicate)\n        );\n    }\n    public countBy(name: Col | string) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name as Col;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector as V<Dictionary>;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n\n        const countByteLength = Math.ceil(Math.log(vector.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n                                countByteLength >= 2 ? Uint16Array : Uint8Array;\n\n        const counts = new CountsArrayType(vector.dictionary.length);\n\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = (count_by.vector as V<Dictionary>).indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) { counts[key]++; }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType } from './enum';\nexport { Data } from './data';\nexport {\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n} from './type';\n\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Visitor } from './visitor';\nexport { Schema, Field } from './schema';\nexport {\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n} from './vector/index';\n\nexport {\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './builder/index';\n\nexport { ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions } from './io/interfaces';\nexport { DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc } from './compute/dataframe';\n\nimport * as util_bn_ from './util/bn';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_math_ from './util/math';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\n\nexport { predicate };\n/** @ignore */\nexport const util = {\n    ...util_bn_,\n    ...util_int_,\n    ...util_bit_,\n    ...util_math_,\n    ...util_buffer_,\n    ...util_vector_\n};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport streamAdapters from './io/adapters';\nimport { Builder } from './builder/index';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './io/whatwg/iterable';\nimport { builderThroughDOMStream } from './io/whatwg/builder';\nimport { recordBatchReaderThroughDOMStream } from './io/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './io/whatwg/writer';\n\nstreamAdapters.toDOMStream = toDOMStream;\nBuilder['throughDOM'] = builderThroughDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\n\nexport {\n    ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, BufferType,\n    Data,\n    DataType,\n    Null,\n    Bool,\n    Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64,\n    Float, Float16, Float32, Float64,\n    Utf8,\n    Binary,\n    FixedSizeBinary,\n    Date_, DateDay, DateMillisecond,\n    Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond,\n    Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond,\n    Decimal,\n    List,\n    Struct,\n    Union, DenseUnion, SparseUnion,\n    Dictionary,\n    Interval, IntervalDayTime, IntervalYearMonth,\n    FixedSizeList,\n    Map_,\n    Table,\n    Column,\n    Schema, Field,\n    Visitor,\n    Vector,\n    BaseVector,\n    BinaryVector,\n    BoolVector,\n    Chunked,\n    DateVector, DateDayVector, DateMillisecondVector,\n    DecimalVector,\n    DictionaryVector,\n    FixedSizeBinaryVector,\n    FixedSizeListVector,\n    FloatVector, Float16Vector, Float32Vector, Float64Vector,\n    IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector,\n    IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector,\n    ListVector,\n    MapVector,\n    NullVector,\n    StructVector,\n    TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector,\n    TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector,\n    UnionVector, DenseUnionVector, SparseUnionVector,\n    Utf8Vector,\n    ByteStream, AsyncByteStream, AsyncByteQueue, ReadableSource, WritableSink,\n    RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader,\n    RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter,\n    MessageReader, AsyncMessageReader, JSONMessageReader,\n    Message,\n    RecordBatch,\n    ArrowJSONLike, FileHandle, Readable, Writable, ReadableWritable, ReadableDOMStreamOptions,\n    DataFrame, FilteredDataFrame, CountByResult, BindFunc, NextFunc,\n    predicate,\n    util,\n    Builder,\n    BinaryBuilder,\n    BoolBuilder,\n    DateBuilder, DateDayBuilder, DateMillisecondBuilder,\n    DecimalBuilder,\n    DictionaryBuilder,\n    FixedSizeBinaryBuilder,\n    FixedSizeListBuilder,\n    FloatBuilder, Float16Builder, Float32Builder, Float64Builder,\n    IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder,\n    IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder,\n    ListBuilder,\n    MapBuilder,\n    NullBuilder,\n    StructBuilder,\n    TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder,\n    TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder,\n    UnionBuilder, DenseUnionBuilder, SparseUnionBuilder,\n    Utf8Builder,\n} from './Arrow';\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { toUint8Array } from '../../util/buffer';\nimport { ReadableDOMStreamOptions } from '../../io/interfaces';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n\n/** @ignore */\nexport function toDOMStream<T>(source: Iterable<T> | AsyncIterable<T>, options?: ReadableDOMStreamOptions): ReadableStream<T> {\n    if (isAsyncIterable<T>(source)) { return asyncIterableAsReadableDOMStream(source, options); }\n    if (isIterable<T>(source)) { return iterableAsReadableDOMStream(source, options); }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n\n/** @ignore */\nfunction iterableAsReadableDOMStream<T>(source: Iterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: Iterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    function next(controller: ReadableStreamDefaultController<T>, it: Iterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream<T>(source: AsyncIterable<T>, options?: ReadableDOMStreamOptions) {\n\n    let it: AsyncIterator<T> | null = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n\n    return new ReadableStream<T>({\n        ...options as any,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n\n    async function next(controller: ReadableStreamDefaultController<T>, it: AsyncIterator<T>) {\n        let buf: Uint8Array;\n        let r: IteratorResult<T> | null = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = <any> buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream<T extends { [key: string]: DataType } = any>(writableStrategy?: ByteLengthQueuingStrategy, readableStrategy?: { autoDestroy: boolean }) {\n\n    const queue = new AsyncByteQueue();\n    let reader: RecordBatchReader<T> | null = null;\n\n    const readable = new ReadableStream<RecordBatch<T>>({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n\n    async function open() {\n        return await (await RecordBatchReader.from<T>(queue)).open(readableStrategy);\n    }\n\n    async function next(controller: ReadableStreamDefaultController<RecordBatch<T>>, reader: RecordBatchReader<T>) {\n        let size = controller.desiredSize;\n        let r: IteratorResult<RecordBatch<T>> | null = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { DataType } from '../../type';\nimport { RecordBatch } from '../../recordbatch';\nimport { AsyncByteStream } from '../../io/stream';\nimport { RecordBatchWriter } from '../../ipc/writer';\n\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream<T extends { [key: string]: DataType } = any>(\n    this: typeof RecordBatchWriter,\n    writableStrategy?: QueuingStrategy<RecordBatch<T>> & { autoDestroy: boolean },\n    readableStrategy?: { highWaterMark?: number, size?: any }\n) {\n\n    const writer = new this<T>(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n\n    async function next(controller: ReadableStreamDefaultController<Uint8Array>) {\n        let buf: Uint8Array | null = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) { return; }\n        }\n        controller.close();\n    }\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Table, Type } from \"apache-arrow\";\nvar ArrowTable = /** @class */ (function () {\n    function ArrowTable(dataBuffer, indexBuffer, columnsBuffer, styler) {\n        var _this = this;\n        this.getCell = function (rowIndex, columnIndex) {\n            var isBlankCell = rowIndex < _this.headerRows && columnIndex < _this.headerColumns;\n            var isIndexCell = rowIndex >= _this.headerRows && columnIndex < _this.headerColumns;\n            var isColumnsCell = rowIndex < _this.headerRows && columnIndex >= _this.headerColumns;\n            if (isBlankCell) {\n                var classNames = [\"blank\"];\n                if (columnIndex > 0) {\n                    classNames.push(\"level\" + rowIndex);\n                }\n                return {\n                    type: \"blank\",\n                    classNames: classNames.join(\" \"),\n                    content: \"\"\n                };\n            }\n            else if (isColumnsCell) {\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"col_heading\",\n                    \"level\" + rowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                return {\n                    type: \"columns\",\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.columnsTable, dataColumnIndex, rowIndex)\n                };\n            }\n            else if (isIndexCell) {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var classNames = [\n                    \"row_heading\",\n                    \"level\" + columnIndex,\n                    \"row\" + dataRowIndex\n                ];\n                return {\n                    type: \"index\",\n                    id: \"T_\" + _this.uuid + \"level\" + columnIndex + \"_row\" + dataRowIndex,\n                    classNames: classNames.join(\" \"),\n                    content: _this.getContent(_this.indexTable, dataRowIndex, columnIndex)\n                };\n            }\n            else {\n                var dataRowIndex = rowIndex - _this.headerRows;\n                var dataColumnIndex = columnIndex - _this.headerColumns;\n                var classNames = [\n                    \"data\",\n                    \"row\" + dataRowIndex,\n                    \"col\" + dataColumnIndex\n                ];\n                var content = _this.styler\n                    ? _this.getContent(_this.styler.displayValuesTable, dataRowIndex, dataColumnIndex)\n                    : _this.getContent(_this.dataTable, dataRowIndex, dataColumnIndex);\n                return {\n                    type: \"data\",\n                    id: \"T_\" + _this.uuid + \"row\" + dataRowIndex + \"_col\" + dataColumnIndex,\n                    classNames: classNames.join(\" \"),\n                    content: content\n                };\n            }\n        };\n        this.getContent = function (table, rowIndex, columnIndex) {\n            var column = table.getColumnAt(columnIndex);\n            if (column === null) {\n                return \"\";\n            }\n            var columnTypeId = _this.getColumnTypeId(table, columnIndex);\n            switch (columnTypeId) {\n                case Type.Timestamp: {\n                    return _this.nanosToDate(column.get(rowIndex));\n                }\n                default: {\n                    return column.get(rowIndex);\n                }\n            }\n        };\n        this.dataTable = Table.from(dataBuffer);\n        this.indexTable = Table.from(indexBuffer);\n        this.columnsTable = Table.from(columnsBuffer);\n        this.styler = styler\n            ? {\n                caption: styler.caption,\n                displayValuesTable: Table.from(styler.displayValues),\n                styles: styler.styles,\n                uuid: styler.uuid\n            }\n            : undefined;\n    }\n    Object.defineProperty(ArrowTable.prototype, \"rows\", {\n        get: function () {\n            return this.indexTable.length + this.columnsTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columns\", {\n        get: function () {\n            return this.indexTable.numCols + this.columnsTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerRows\", {\n        get: function () {\n            return this.rows - this.dataRows;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"headerColumns\", {\n        get: function () {\n            return this.columns - this.dataColumns;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataRows\", {\n        get: function () {\n            return this.dataTable.length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"dataColumns\", {\n        get: function () {\n            return this.dataTable.numCols;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"uuid\", {\n        get: function () {\n            return this.styler && this.styler.uuid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"caption\", {\n        get: function () {\n            return this.styler && this.styler.caption;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"styles\", {\n        get: function () {\n            return this.styler && this.styler.styles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"table\", {\n        get: function () {\n            return this.dataTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"index\", {\n        get: function () {\n            return this.indexTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ArrowTable.prototype, \"columnTable\", {\n        get: function () {\n            return this.columnsTable;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Serialize arrow table.\n     */\n    ArrowTable.prototype.serialize = function () {\n        return {\n            data: this.dataTable.serialize(),\n            index: this.indexTable.serialize(),\n            columns: this.columnsTable.serialize()\n        };\n    };\n    /**\n     * Returns apache-arrow specific typeId of column.\n     */\n    ArrowTable.prototype.getColumnTypeId = function (table, columnIndex) {\n        return table.schema.fields[columnIndex].type.typeId;\n    };\n    ArrowTable.prototype.nanosToDate = function (nanos) {\n        return new Date(nanos / 1e6);\n    };\n    return ArrowTable;\n}());\nexport { ArrowTable };\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n// Safari doesn't support the EventTarget class, so we use a shim.\nimport { EventTarget } from \"event-target-shim\";\nimport { ArrowTable } from \"./ArrowTable\";\n/** Messages from Component -> Streamlit */\nvar ComponentMessageType;\n(function (ComponentMessageType) {\n    // A component sends this message when it's ready to receive messages\n    // from Streamlit. Streamlit won't send any messages until it gets this.\n    // Data: { apiVersion: number }\n    ComponentMessageType[\"COMPONENT_READY\"] = \"streamlit:componentReady\";\n    // The component has a new widget value. Send it back to Streamlit, which\n    // will then re-run the app.\n    // Data: { value: any }\n    ComponentMessageType[\"SET_COMPONENT_VALUE\"] = \"streamlit:setComponentValue\";\n    // The component has a new height for its iframe.\n    // Data: { height: number }\n    ComponentMessageType[\"SET_FRAME_HEIGHT\"] = \"streamlit:setFrameHeight\";\n})(ComponentMessageType || (ComponentMessageType = {}));\n/**\n * Streamlit communication API.\n *\n * Components can send data to Streamlit via the functions defined here,\n * and receive data from Streamlit via the `events` property.\n */\nvar Streamlit = /** @class */ (function () {\n    function Streamlit() {\n    }\n    /**\n     * The Streamlit component API version we're targetting.\n     * There's currently only 1!\n     */\n    Streamlit.API_VERSION = 1;\n    Streamlit.RENDER_EVENT = \"streamlit:render\";\n    /** Dispatches events received from Streamlit. */\n    Streamlit.events = new EventTarget();\n    Streamlit.registeredMessageListener = false;\n    /**\n     * Tell Streamlit that the component is ready to start receiving data.\n     * Streamlit will defer emitting RENDER events until it receives the\n     * COMPONENT_READY message.\n     */\n    Streamlit.setComponentReady = function () {\n        if (!Streamlit.registeredMessageListener) {\n            // Register for message events if we haven't already\n            window.addEventListener(\"message\", Streamlit.onMessageEvent);\n            Streamlit.registeredMessageListener = true;\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.COMPONENT_READY, {\n            apiVersion: Streamlit.API_VERSION\n        });\n    };\n    /**\n     * Report the component's height to Streamlit.\n     * This should be called every time the component changes its DOM - that is,\n     * when it's first loaded, and any time it updates.\n     */\n    Streamlit.setFrameHeight = function (height) {\n        if (height === undefined) {\n            // `height` is optional. If undefined, it defaults to scrollHeight,\n            // which is the entire height of the element minus its border,\n            // scrollbar, and margin.\n            height = document.body.scrollHeight;\n        }\n        if (height === Streamlit.lastFrameHeight) {\n            // Don't bother updating if our height hasn't changed.\n            return;\n        }\n        Streamlit.lastFrameHeight = height;\n        Streamlit.sendBackMsg(ComponentMessageType.SET_FRAME_HEIGHT, { height: height });\n    };\n    /**\n     * Set the component's value. This value will be returned to the Python\n     * script, and the script will be re-run.\n     *\n     * For example:\n     *\n     * JavaScript:\n     * Streamlit.setComponentValue(\"ahoy!\")\n     *\n     * Python:\n     * value = st.my_component(...)\n     * st.write(value) # -> \"ahoy!\"\n     *\n     * The value must be an ArrowTable, a typed array, an ArrayBuffer, or be\n     * serializable to JSON.\n     */\n    Streamlit.setComponentValue = function (value) {\n        var dataType;\n        if (value instanceof ArrowTable) {\n            dataType = \"dataframe\";\n            value = value.serialize();\n        }\n        else if (isTypedArray(value)) {\n            // All typed arrays get sent as Uint8Array, because that's what our\n            // protobuf library uses for the \"bytes\" field type.\n            dataType = \"bytes\";\n            value = new Uint8Array(value.buffer);\n        }\n        else if (value instanceof ArrayBuffer) {\n            dataType = \"bytes\";\n            value = new Uint8Array(value);\n        }\n        else {\n            dataType = \"json\";\n        }\n        Streamlit.sendBackMsg(ComponentMessageType.SET_COMPONENT_VALUE, {\n            value: value,\n            dataType: dataType\n        });\n    };\n    /** Receive a ForwardMsg from the Streamlit app */\n    Streamlit.onMessageEvent = function (event) {\n        var type = event.data[\"type\"];\n        switch (type) {\n            case Streamlit.RENDER_EVENT:\n                Streamlit.onRenderMessage(event.data);\n                break;\n        }\n    };\n    /**\n     * Handle an untyped Streamlit render event and redispatch it as a\n     * StreamlitRenderEvent.\n     */\n    Streamlit.onRenderMessage = function (data) {\n        var args = data[\"args\"];\n        if (args == null) {\n            console.error(\"Got null args in onRenderMessage. This should never happen\");\n            args = {};\n        }\n        // Parse our dataframe arguments with arrow, and merge them into our args dict\n        var dataframeArgs = data[\"dfs\"] && data[\"dfs\"].length > 0\n            ? Streamlit.argsDataframeToObject(data[\"dfs\"])\n            : {};\n        args = __assign(__assign({}, args), dataframeArgs);\n        var disabled = Boolean(data[\"disabled\"]);\n        var theme = data[\"theme\"];\n        if (theme) {\n            _injectTheme(theme);\n        }\n        // Dispatch a render event!\n        var eventData = { disabled: disabled, args: args, theme: theme };\n        var event = new CustomEvent(Streamlit.RENDER_EVENT, {\n            detail: eventData\n        });\n        Streamlit.events.dispatchEvent(event);\n    };\n    Streamlit.argsDataframeToObject = function (argsDataframe) {\n        var argsDataframeArrow = argsDataframe.map(function (_a) {\n            var key = _a.key, value = _a.value;\n            return [key, Streamlit.toArrowTable(value)];\n        });\n        return Object.fromEntries(argsDataframeArrow);\n    };\n    Streamlit.toArrowTable = function (df) {\n        var _a = df.data, data = _a.data, index = _a.index, columns = _a.columns, styler = _a.styler;\n        return new ArrowTable(data, index, columns, styler);\n    };\n    /** Post a message to the Streamlit app. */\n    Streamlit.sendBackMsg = function (type, data) {\n        window.parent.postMessage(__assign({ isStreamlitMessage: true, type: type }, data), \"*\");\n    };\n    return Streamlit;\n}());\nexport { Streamlit };\nvar _injectTheme = function (theme) {\n    var style = document.createElement(\"style\");\n    document.head.appendChild(style);\n    style.innerHTML = \"\\n    :root {\\n      --primary-color: \" + theme.primaryColor + \";\\n      --background-color: \" + theme.backgroundColor + \";\\n      --secondary-background-color: \" + theme.secondaryBackgroundColor + \";\\n      --text-color: \" + theme.textColor + \";\\n      --font: \" + theme.font + \";\\n    }\\n\\n    body {\\n      background-color: var(--background-color);\\n      color: var(--text-color);\\n    }\\n  \";\n};\n/** True if the value is a TypedArray. */\nfunction isTypedArray(value) {\n    var isBigIntArray = false;\n    try {\n        isBigIntArray =\n            value instanceof BigInt64Array || value instanceof BigUint64Array;\n    }\n    catch (e) {\n        // Ignore cause Safari does not support this\n        // https://caniuse.com/mdn-javascript_builtins_bigint64array\n    }\n    return (value instanceof Int8Array ||\n        value instanceof Uint8Array ||\n        value instanceof Uint8ClampedArray ||\n        value instanceof Int16Array ||\n        value instanceof Uint16Array ||\n        value instanceof Int32Array ||\n        value instanceof Uint32Array ||\n        value instanceof Float32Array ||\n        value instanceof Float64Array ||\n        isBigIntArray);\n}\n","/**\n * @license\n * Copyright 2018-2021 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport React from \"react\";\nimport { Streamlit } from \"./streamlit\";\n/**\n * Optional Streamlit React-based component base class.\n *\n * You are not required to extend this base class to create a Streamlit\n * component. If you decide not to extend it, you should implement the\n * `componentDidMount` and `componentDidUpdate` functions in your own class,\n * so that your plugin properly resizes.\n */\nvar StreamlitComponentBase = /** @class */ (function (_super) {\n    __extends(StreamlitComponentBase, _super);\n    function StreamlitComponentBase() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    StreamlitComponentBase.prototype.componentDidMount = function () {\n        // After we're rendered for the first time, tell Streamlit that our height\n        // has changed.\n        Streamlit.setFrameHeight();\n    };\n    StreamlitComponentBase.prototype.componentDidUpdate = function () {\n        // After we're updated, tell Streamlit that our height may have changed.\n        Streamlit.setFrameHeight();\n    };\n    return StreamlitComponentBase;\n}(React.PureComponent));\nexport { StreamlitComponentBase };\n/**\n * Wrapper for React-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\nexport function withStreamlitConnection(WrappedComponent) {\n    var ComponentWrapper = /** @class */ (function (_super) {\n        __extends(ComponentWrapper, _super);\n        function ComponentWrapper(props) {\n            var _this = _super.call(this, props) || this;\n            _this.componentDidMount = function () {\n                // Set up event listeners, and signal to Streamlit that we're ready.\n                // We won't render the component until we receive the first RENDER_EVENT.\n                Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n                Streamlit.setComponentReady();\n            };\n            _this.componentDidUpdate = function () {\n                // If our child threw an error, we display it in render(). In this\n                // case, the child won't be mounted and therefore won't call\n                // `setFrameHeight` on its own. We do it here so that the rendered\n                // error will be visible.\n                if (_this.state.componentError != null) {\n                    Streamlit.setFrameHeight();\n                }\n            };\n            _this.componentWillUnmount = function () {\n                Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, _this.onRenderEvent);\n            };\n            /**\n             * Streamlit is telling this component to redraw.\n             * We save the render data in State, so that it can be passed to the\n             * component in our own render() function.\n             */\n            _this.onRenderEvent = function (event) {\n                // Update our state with the newest render data\n                var renderEvent = event;\n                _this.setState({ renderData: renderEvent.detail });\n            };\n            _this.render = function () {\n                // If our wrapped component threw an error, display it.\n                if (_this.state.componentError != null) {\n                    return (React.createElement(\"div\", null,\n                        React.createElement(\"h1\", null, \"Component Error\"),\n                        React.createElement(\"span\", null, _this.state.componentError.message)));\n                }\n                // Don't render until we've gotten our first RENDER_EVENT from Streamlit.\n                if (_this.state.renderData == null) {\n                    return null;\n                }\n                return (React.createElement(WrappedComponent, { width: window.innerWidth, disabled: _this.state.renderData.disabled, args: _this.state.renderData.args, theme: _this.state.renderData.theme }));\n            };\n            _this.state = {\n                renderData: undefined,\n                componentError: undefined\n            };\n            return _this;\n        }\n        /**\n         * Error boundary function. This will be called if our wrapped\n         * component throws an error. We store the caught error in our state,\n         * and display it in the next render().\n         */\n        ComponentWrapper.getDerivedStateFromError = function (error) {\n            return { componentError: error };\n        };\n        return ComponentWrapper;\n    }(React.PureComponent));\n    return hoistNonReactStatics(ComponentWrapper, WrappedComponent);\n}\n","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import React from 'react'\r\nimport styles from './styles.module.css'\r\nimport PropTypes from 'prop-types' // ES6\r\n\r\n// export const AudioReactRecorder = ({ text }) => {\r\n//   return <div className={styles.test}>BULLSWEET: {text}</div>\r\n// }\r\n\r\nexport const RecordState = Object.freeze({\r\n  START: 'start',\r\n  PAUSE: 'pause',\r\n  STOP: 'stop',\r\n  NONE: 'none'\r\n})\r\n\r\nexport default class AudioReactRecorder extends React.Component {\r\n  //0 - constructor\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.canvasRef = React.createRef()\r\n  }\r\n\r\n  //TODO: add the props definitions\r\n  static propTypes = {\r\n    state: PropTypes.string,\r\n    type: PropTypes.string.isRequired,\r\n    backgroundColor: PropTypes.string,\r\n    foregroundColor: PropTypes.string,\r\n    canvasWidth: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n    canvasHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\r\n\r\n    //method calls\r\n    onStop: PropTypes.func\r\n  }\r\n  static defaultProps = {\r\n    state: RecordState.NONE,\r\n    type: 'audio/wav',\r\n    backgroundColor: 'rgb(200, 200, 200)',\r\n    foregroundColor: 'rgb(0, 0, 0)',\r\n    canvasWidth: 500,\r\n    canvasHeight: 300\r\n  }\r\n\r\n  //2 - mount\r\n  componentDidMount() {\r\n    this.init()\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { state } = this.props\r\n\r\n    this.checkState(prevProps.state, state)\r\n  }\r\n\r\n  checkState(previousState) {\r\n    switch (previousState) {\r\n      case RecordState.START:\r\n        this.doIfState(RecordState.PAUSE, this.pause)\r\n        this.doIfState(RecordState.STOP, this.stop)\r\n        break\r\n      case RecordState.PAUSE:\r\n        this.doIfState(RecordState.START, this.resume)\r\n        this.doIfState(RecordState.STOP, this.stop)\r\n        break\r\n      case RecordState.STOP:\r\n        this.doIfState(RecordState.START, this.start)\r\n        break\r\n      default:\r\n        this.doIfState(RecordState.START, this.start)\r\n        break\r\n    }\r\n  }\r\n\r\n  doIfState(state, cb) {\r\n    if (this.props.state == state) {\r\n      cb && cb()\r\n    }\r\n  }\r\n\r\n  //TODO: destroy request animation frame\r\n  componentWillUnmount() {}\r\n\r\n  //TODO: change to state some conditionals\r\n  init = async () => {\r\n    this.leftchannel = []\r\n    this.rightchannel = []\r\n    this.recorder = null\r\n    this.recording = false\r\n    this.recordingLength = 0\r\n    this.volume = null\r\n    this.audioInput = null\r\n    this.sampleRate = null\r\n    this.AudioContext = window.AudioContext || window.webkitAudioContext\r\n    this.context = null\r\n    this.analyser = null\r\n    this.canvas = this.canvasRef.current\r\n    this.canvasCtx = this.canvas.getContext('2d')\r\n    this.stream = null\r\n    this.tested = false\r\n\r\n    navigator.getUserMedia =\r\n      navigator.getUserMedia ||\r\n      navigator.webkitGetUserMedia ||\r\n      navigator.mozGetUserMedia\r\n  }\r\n\r\n  //get mic stream\r\n  getStream = (constraints) => {\r\n    if (!constraints) {\r\n      constraints = { audio: true, video: false }\r\n    }\r\n\r\n    return navigator.mediaDevices.getUserMedia(constraints)\r\n  }\r\n\r\n  setUpRecording = () => {\r\n    this.context = new this.AudioContext()\r\n    this.sampleRate = this.context.sampleRate\r\n\r\n    // creates a gain node\r\n    this.volume = this.context.createGain()\r\n\r\n    // creates an audio node from teh microphone incoming stream\r\n    this.audioInput = this.context.createMediaStreamSource(this.stream)\r\n\r\n    // Create analyser\r\n    this.analyser = this.context.createAnalyser()\r\n\r\n    // connect audio input to the analyser\r\n    this.audioInput.connect(this.analyser)\r\n\r\n    // connect analyser to the volume control\r\n    // analyser.connect(volume);\r\n\r\n    let bufferSize = 2048\r\n    this.recorder = this.context.createScriptProcessor(bufferSize, 2, 2)\r\n\r\n    // we connect the volume control to the processor\r\n    // volume.connect(recorder);\r\n\r\n    this.analyser.connect(this.recorder)\r\n\r\n    // finally connect the processor to the output\r\n    this.recorder.connect(this.context.destination)\r\n\r\n    const self = this\r\n    this.recorder.onaudioprocess = function (e) {\r\n      // Check\r\n      if (!self.recording) return\r\n      // Do something with the data, i.e Convert this to WAV\r\n      let left = e.inputBuffer.getChannelData(0)\r\n      let right = e.inputBuffer.getChannelData(1)\r\n      if (!self.tested) {\r\n        self.tested = true\r\n        // if this reduces to 0 we are not getting any sound\r\n        if (!left.reduce((a, b) => a + b)) {\r\n          console.log('Error: There seems to be an issue with your Mic')\r\n          // clean up;\r\n          self.stop()\r\n          self.stream.getTracks().forEach(function (track) {\r\n            track.stop()\r\n          })\r\n          self.context.close()\r\n        }\r\n      }\r\n      // we clone the samples\r\n      self.leftchannel.push(new Float32Array(left))\r\n      self.rightchannel.push(new Float32Array(right))\r\n      self.recordingLength += bufferSize\r\n    }\r\n    this.visualize()\r\n  }\r\n\r\n  mergeBuffers = (channelBuffer, recordingLength) => {\r\n    let result = new Float32Array(recordingLength)\r\n    let offset = 0\r\n    let lng = channelBuffer.length\r\n    for (let i = 0; i < lng; i++) {\r\n      let buffer = channelBuffer[i]\r\n      result.set(buffer, offset)\r\n      offset += buffer.length\r\n    }\r\n    return result\r\n  }\r\n\r\n  interleave = (leftChannel, rightChannel) => {\r\n    let length = leftChannel.length + rightChannel.length\r\n    let result = new Float32Array(length)\r\n\r\n    let inputIndex = 0\r\n\r\n    for (let index = 0; index < length; ) {\r\n      result[index++] = leftChannel[inputIndex]\r\n      result[index++] = rightChannel[inputIndex]\r\n      inputIndex++\r\n    }\r\n    return result\r\n  }\r\n\r\n  writeUTFBytes = (view, offset, string) => {\r\n    let lng = string.length\r\n    for (let i = 0; i < lng; i++) {\r\n      view.setUint8(offset + i, string.charCodeAt(i))\r\n    }\r\n  }\r\n\r\n  visualize = () => {\r\n    const { backgroundColor, foregroundColor } = this.props\r\n\r\n    this.WIDTH = this.canvas.width\r\n    this.HEIGHT = this.canvas.height\r\n    this.CENTERX = this.canvas.width / 2\r\n    this.CENTERY = this.canvas.height / 2\r\n\r\n    if (!this.analyser) return\r\n\r\n    this.analyser.fftSize = 2048\r\n    const bufferLength = this.analyser.fftSize\r\n    const dataArray = new Uint8Array(bufferLength)\r\n\r\n    this.canvasCtx.clearRect(0, 0, this.WIDTH, this.HEIGHT)\r\n\r\n    //reference this using self\r\n    let self = this\r\n    const draw = function () {\r\n      self.drawVisual = requestAnimationFrame(draw)\r\n\r\n      self.analyser.getByteTimeDomainData(dataArray)\r\n\r\n      self.canvasCtx.fillStyle = backgroundColor\r\n      self.canvasCtx.fillRect(0, 0, self.WIDTH, self.HEIGHT)\r\n\r\n      self.canvasCtx.lineWidth = 2\r\n      self.canvasCtx.strokeStyle = foregroundColor\r\n\r\n      self.canvasCtx.beginPath()\r\n\r\n      var sliceWidth = (self.WIDTH * 1.0) / bufferLength\r\n      var x = 0\r\n\r\n      for (var i = 0; i < bufferLength; i++) {\r\n        var v = dataArray[i] / 128.0\r\n        var y = (v * self.HEIGHT) / 2\r\n\r\n        if (i === 0) {\r\n          self.canvasCtx.moveTo(x, y)\r\n        } else {\r\n          self.canvasCtx.lineTo(x, y)\r\n        }\r\n\r\n        x += sliceWidth\r\n      }\r\n\r\n      self.canvasCtx.lineTo(self.canvas.width, self.canvas.height / 2)\r\n      self.canvasCtx.stroke()\r\n    }\r\n\r\n    draw()\r\n  }\r\n\r\n  setupMic = async () => {\r\n    //TODO: only get stream after clicking start\r\n    try {\r\n      window.stream = this.stream = await this.getStream()\r\n      //TODO: on got stream\r\n    } catch (err) {\r\n      //TODO: error getting stream\r\n      console.log('Error: Issue getting mic', err)\r\n    }\r\n\r\n    this.setUpRecording()\r\n  }\r\n\r\n  start = async () => {\r\n    await this.setupMic()\r\n\r\n    this.recording = true\r\n    // reset the buffers for the new recording\r\n    this.leftchannel.length = this.rightchannel.length = 0\r\n    this.recordingLength = 0\r\n  }\r\n\r\n  stop = () => {\r\n    const { onStop, type } = this.props\r\n\r\n    this.recording = false\r\n    this.closeMic()\r\n\r\n    // we flat the left and right channels down\r\n    this.leftBuffer = this.mergeBuffers(this.leftchannel, this.recordingLength)\r\n    this.rightBuffer = this.mergeBuffers(\r\n      this.rightchannel,\r\n      this.recordingLength\r\n    )\r\n    // we interleave both channels together\r\n    let interleaved = this.interleave(this.leftBuffer, this.rightBuffer)\r\n\r\n    ///////////// WAV Encode /////////////////\r\n    // from http://typedarray.org/from-microphone-to-wav-with-getusermedia-and-web-audio/\r\n    //\r\n\r\n    // we create our wav file\r\n    let buffer = new ArrayBuffer(44 + interleaved.length * 2)\r\n    let view = new DataView(buffer)\r\n\r\n    // RIFF chunk descriptor\r\n    this.writeUTFBytes(view, 0, 'RIFF')\r\n    view.setUint32(4, 44 + interleaved.length * 2, true)\r\n    this.writeUTFBytes(view, 8, 'WAVE')\r\n    // FMT sub-chunk\r\n    this.writeUTFBytes(view, 12, 'fmt ')\r\n    view.setUint32(16, 16, true)\r\n    view.setUint16(20, 1, true)\r\n    // stereo (2 channels)\r\n    view.setUint16(22, 2, true)\r\n    view.setUint32(24, this.sampleRate, true)\r\n    view.setUint32(28, this.sampleRate * 4, true)\r\n    view.setUint16(32, 4, true)\r\n    view.setUint16(34, 16, true)\r\n    // data sub-chunk\r\n    this.writeUTFBytes(view, 36, 'data')\r\n    view.setUint32(40, interleaved.length * 2, true)\r\n\r\n    // write the PCM samples\r\n    let lng = interleaved.length\r\n    let index = 44\r\n    let volume = 1\r\n    for (let i = 0; i < lng; i++) {\r\n      view.setInt16(index, interleaved[i] * (0x7fff * volume), true)\r\n      index += 2\r\n    }\r\n\r\n    // our final binary blob\r\n    const blob = new Blob([view], { type: type })\r\n    const audioUrl = URL.createObjectURL(blob)\r\n\r\n    onStop &&\r\n      onStop({\r\n        blob: blob,\r\n        url: audioUrl,\r\n        type\r\n      })\r\n  }\r\n\r\n  pause = () => {\r\n    this.recording = false\r\n    this.closeMic()\r\n  }\r\n\r\n  resume = () => {\r\n    this.setupMic()\r\n    this.recording = true\r\n  }\r\n\r\n  closeMic = () => {\r\n    this.stream.getAudioTracks().forEach((track) => {\r\n      track.stop()\r\n    })\r\n    this.audioInput.disconnect(0)\r\n    this.analyser.disconnect(0)\r\n    this.recorder.disconnect(0)\r\n  }\r\n\r\n  //1 - render\r\n  render() {\r\n    const { canvasWidth, canvasHeight } = this.props\r\n\r\n    return (\r\n      <div className='audio-react-recorder'>\r\n        <canvas\r\n          ref={this.canvasRef}\r\n          width={canvasWidth}\r\n          height={canvasHeight}\r\n          className='audio-react-recorder__canvas'\r\n        ></canvas>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","'use strict';\n\nvar reactIs = require('react-is');\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nvar REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true\n};\nvar KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true\n};\nvar FORWARD_REF_STATICS = {\n  '$$typeof': true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true\n};\nvar MEMO_STATICS = {\n  '$$typeof': true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true\n};\nvar TYPE_STATICS = {};\nTYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;\nTYPE_STATICS[reactIs.Memo] = MEMO_STATICS;\n\nfunction getStatics(component) {\n  // React v16.11 and below\n  if (reactIs.isMemo(component)) {\n    return MEMO_STATICS;\n  } // React v16.12 and above\n\n\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;\n}\n\nvar defineProperty = Object.defineProperty;\nvar getOwnPropertyNames = Object.getOwnPropertyNames;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\nvar getPrototypeOf = Object.getPrototypeOf;\nvar objectPrototype = Object.prototype;\nfunction hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n    if (objectPrototype) {\n      var inheritedComponent = getPrototypeOf(sourceComponent);\n\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);\n      }\n    }\n\n    var keys = getOwnPropertyNames(sourceComponent);\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent));\n    }\n\n    var targetStatics = getStatics(targetComponent);\n    var sourceStatics = getStatics(sourceComponent);\n\n    for (var i = 0; i < keys.length; ++i) {\n      var key = keys[i];\n\n      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {\n        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);\n\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor);\n        } catch (e) {}\n      }\n    }\n  }\n\n  return targetComponent;\n}\n\nmodule.exports = hoistNonReactStatics;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.14.0\";\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"sourceRoot":""}