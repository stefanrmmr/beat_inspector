{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","state","numClicks","isFocused","recordState","audioData","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onStop","backgroundColor","id","controls","src","onClick","start","pause","stop","onClickedA","onClickedB","onClickedC","onClicked","setState","prevState","Streamlit","setComponentValue","_onFocus","_onBlur","RecordState","START","PAUSE","STOP","data","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","document","getElementById"],"mappings":"wQAqBMA,G,kNACGC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,EAAOC,YAAa,KAAMC,UAAW,I,EAExEC,OAAS,WAGd,IAAMC,EAAO,EAAKC,MAAMC,KAAX,KAKLC,EAAU,EAAKF,MAAfE,MACFC,EAA6B,GAE3BP,EAAgB,EAAKH,MAArBG,YAIR,GAAIM,EAAO,CAGT,IAAME,EAAa,oBACjB,EAAKX,MAAME,UAAYO,EAAMG,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAOlB,OACE,8BACE,6BACE,kBAAC,IAAD,CACEX,MAAOG,EACPY,OAAQ,EAAKA,OACbC,gBAAgB,qBAElB,2BACEC,GAAG,QACHC,UAAQ,EACRC,IAAK,EAAKnB,MAAMI,YAElB,4BAAQa,GAAG,SAASG,QAAS,EAAKC,OAAlC,SAGA,4BAAQJ,GAAG,QAAQG,QAAS,EAAKE,OAAjC,SAGA,4BAAQL,GAAG,OAAOG,QAAS,EAAKG,MAAhC,SAlBJ,UAyBUjB,EAzBV,SA0BE,4BAAQW,GAAG,WAAWP,MAAOA,EAAOU,QAAS,EAAKI,YAAlD,YAGA,4BAAQP,GAAG,WAAWP,MAAOA,EAAOU,QAAS,EAAKK,YAAlD,YAGA,4BAAQR,GAAG,WAAWP,MAAOA,EAAOU,QAAS,EAAKM,YAAlD,c,EAQEC,UAAY,WAGlB,EAAKC,UACH,SAAAC,GAAS,MAAK,CAAE5B,UAAW4B,EAAU5B,UAAY,MACjD,kBAAM6B,IAAUC,kBAAkB,EAAK/B,MAAMC,e,EAKzCuB,WAAa,WAGnBM,IAAUC,kBAAkB,M,EAGtBN,WAAa,WAGnBK,IAAUC,kBAAkB,M,EAGtBL,WAAa,WAGnBI,IAAUC,kBAAkB,M,EAMtBC,SAAW,WACjB,EAAKJ,SAAS,CAAE1B,WAAW,K,EAIrB+B,QAAU,WAChB,EAAKL,SAAS,CAAE1B,WAAW,K,EAIrBmB,MAAQ,WACd,EAAKO,SAAS,CACZzB,YAAa+B,IAAYC,S,EAIrBb,MAAQ,WACd,EAAKM,SAAS,CACZzB,YAAa+B,IAAYE,S,EAIrBb,KAAO,WACb,EAAKK,SAAS,CACZzB,YAAa+B,IAAYG,Q,EAIrBtB,OAAS,SAACuB,GAChB,EAAKV,SAAS,CACZxB,UAAWkC,K,yBAtISC,MAiJXC,cAAwBzC,GAKvC+B,IAAUW,oBAIVX,IAAUY,iBC3KVC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d9548ea2.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  recordState: null\n  audioData: string\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, recordState: null, audioData: ''}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        <div>\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop}\n            backgroundColor='rgb(255,255,255)'\n          />\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioData}\n          ></audio>\n          <button id='record' onClick={this.start}>\n            Start\n          </button>\n          <button id='pause' onClick={this.pause}>\n            Pause\n          </button>\n          <button id='stop' onClick={this.stop}>\n            Stop\n          </button>\n        </div>\n\n\n\n        Hello, {name}! &nbsp;\n        <button id='button_a' style={style} onClick={this.onClickedA}>\n          Button A\n        </button>\n        <button id='button_b' style={style} onClick={this.onClickedB}>\n          Button B\n        </button>\n        <button id='button_c' style={style} onClick={this.onClickedC}>\n          Button C\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n\n  private onClickedA = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('A')\n  }\n\n  private onClickedB = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('B')\n  }\n\n  private onClickedC = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('C')\n  }\n\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n\n  /** fucntions from react audio recorder app */\n  private start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  private pause = () => {\n    this.setState({\n      recordState: RecordState.PAUSE\n    })\n  }\n\n  private stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onStop = (data) => {\n    this.setState({\n      audioData: data\n    })\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}