{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","state","isFocused","recordState","audioDataUrl","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onStop","onStop_audio","backgroundColor","foregroundColor","canvasWidth","canvasHeight","id","controls","src","onClick","onClick_start","onClick_stop","onClick_reset","onClick_continue","setState","RecordState","START","Streamlit","setComponentValue","STOP","data","url","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","document","getElementById"],"mappings":"wQAiBMA,G,kNACGC,MAAQ,CAAEC,WAAW,EAAOC,YAAa,KAAMC,aAAc,GAAIC,OAAO,G,EAExEC,OAAS,WAMd,IAAQC,EAAU,EAAKC,MAAfD,MACFE,EAA6B,GAE3BN,EAAgB,EAAKF,MAArBE,YAGR,GAAII,EAAO,CAGT,IAAMG,EAAa,oBACjB,EAAKT,MAAMC,UAAYK,EAAMI,aAAe,QAC9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGlB,OACE,8BACE,6BACE,kBAAC,IAAD,CACET,MAAOE,EACPW,OAAQ,EAAKC,aACbC,gBAAgB,kBAChBC,gBAAgB,mBAChBC,YAAa,IACbC,aAAc,MAGhB,2BACEC,GAAG,QACHC,UAAQ,EACRC,IAAK,EAAKrB,MAAMG,eAGlB,4BAAQgB,GAAG,SAASG,QAAS,EAAKC,eAAlC,mBAGA,4BAAQJ,GAAG,OAAOG,QAAS,EAAKE,cAAhC,QAGA,4BAAQL,GAAG,QAAQG,QAAS,EAAKG,eAAjC,SAGA,4BAAQN,GAAG,WAAWG,QAAS,EAAKI,kBAApC,2B,EASAH,cAAgB,WACtB,EAAKI,SAAS,CACZvB,OAAO,EACPD,aAAc,GACdD,YAAa0B,IAAYC,QAE3BC,IAAUC,kBAAkB,K,EAGtBP,aAAe,WACrB,EAAKG,SAAS,CACZvB,OAAO,EACPF,YAAa0B,IAAYI,Q,EAIrBP,cAAgB,WACtB,EAAKE,SAAS,CACZvB,OAAO,EACPD,aAAc,GACdD,YAAa0B,IAAYI,OAE3BF,IAAUC,kBAAkB,K,EAGtBL,iBAAmB,WACO,KAA5B,EAAK1B,MAAMG,cAEb2B,IAAUC,kBAAkB,EAAK/B,MAAMG,e,EAInCW,aAAe,SAACmB,IACG,IAArB,EAAKjC,MAAMI,OAEb,EAAKuB,SAAS,CACZxB,aAAc,KAEhB2B,IAAUC,kBAAkB,KAE5B,EAAKJ,SAAS,CACZxB,aAAc8B,EAAKC,O,yBArGDC,MAiHXC,cAAwBrC,GAIvC+B,IAAUO,oBAIVP,IAAUQ,iBCtIVC,IAASlC,OACP,kBAAC,IAAMmC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.27f9a0ef.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataUrl: string\n  reset: boolean\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataUrl: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            backgroundColor='rgb(15, 17, 22)'\n            foregroundColor='rgb(227, 252, 3)'\n            canvasWidth={450}\n            canvasHeight={150}\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataUrl}\n          />\n\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset\n          </button>\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analysis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataUrl: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataUrl: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataUrl !== '')\n    {\n      Streamlit.setComponentValue(this.state.audioDataUrl)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset === true)\n    {\n      this.setState({\n        audioDataUrl: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataUrl: data.url\n      })\n    }\n\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}