{"version":3,"sources":["index.tsx"],"names":["span","Component","document","body","appendChild","createElement","textNode","createTextNode","button","textContent","numClicks","isFocused","onclick","Streamlit","setComponentValue","onfocus","onblur","events","addEventListener","RENDER_EVENT","event","data","detail","theme","borderStyling","style","border","outline","disabled","name","args","String","fromCharCode","setFrameHeight","setComponentReady"],"mappings":"wPAwCMA,GAnCYC,YAmCLC,SAASC,KAAKC,YAAYF,SAASG,cAAc,UACxDC,EAAWN,EAAKI,YAAYF,SAASK,eAAe,KACpDC,EAASR,EAAKI,YAAYF,SAASG,cAAc,WACvDG,EAAOC,YAAc,YAGrB,IAAIC,EAAY,EACZC,GAAY,EAChBH,EAAOI,QAAU,WAGfF,GAAa,EACbG,IAAUC,kBAAkBJ,IAG9BF,EAAOO,QAAU,WACfJ,GAAY,GAGdH,EAAOQ,OAAS,WACdL,GAAY,GA0CdE,IAAUI,OAAOC,iBAAiBL,IAAUM,cAlC5C,SAAkBC,GAEhB,IAAMC,EAAQD,EAAkCE,OAIhD,GAAID,EAAKE,MAAO,CAGd,IAAMC,EAAa,wBACjBb,EAAY,kBAAoB,OADf,KAGnBH,EAAOiB,MAAMC,OAASF,EACtBhB,EAAOiB,MAAME,QAAUH,EAIzBhB,EAAOoB,SAAWP,EAAKO,SAIvB,IAAIC,EAAOR,EAAKS,KAAL,KAGXxB,EAASG,YAAc,iBAAUoB,EAAV,MAAqBE,OAAOC,aAAa,KAMhEnB,IAAUoB,oBAQZpB,IAAUqB,oBAIVrB,IAAUoB,mB","file":"static/js/main.009c69af.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport React, { Component } from 'react'\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      recordState: null\n    }\n  }\n  start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n  stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n  //audioData contains blob and blobUrl\n  onStop = (audioData) => {\n    console.log('audioData', audioData)\n  }\n  render() {\n    const { recordState } = this.state\n    return (\n      <div>\n        <AudioReactRecorder state={recordState} onStop={this.onStop} />\n        <button onClick={this.start}>Start</button>\n        <button onClick={this.stop}>Stop</button>\n      </div>\n    )\n  }\n}\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span = document.body.appendChild(document.createElement(\"span\"))\nconst textNode = span.appendChild(document.createTextNode(\"\"))\nconst button = span.appendChild(document.createElement(\"button\"))\nbutton.textContent = \"Click Me!\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\nlet isFocused = false\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n}\n\nbutton.onfocus = function(): void {\n  isFocused = true\n}\n\nbutton.onblur = function(): void {\n  isFocused = false\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${\n      isFocused ? \"--primary-color\" : \"gray\"\n    })`\n    button.style.border = borderStyling\n    button.style.outline = borderStyling\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let name = data.args[\"name\"]\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}