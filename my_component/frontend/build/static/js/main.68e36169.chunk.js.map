{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyComponent","state","isFocused","recordState","audioDataUrl","render","theme","props","style","borderStyling","primaryColor","border","outline","onStop","onStop_audio","backgroundColor","id","controls","src","onClick","onClick_start","onClick_pause","onClick_stop","setState","RecordState","START","PAUSE","STOP","data","url","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","setComponentReady","setFrameHeight","ReactDOM","StrictMode","document","getElementById"],"mappings":"yQAgBMA,G,kNACGC,MAAQ,CAAEC,WAAW,EAAOC,YAAa,KAAMC,aAAc,I,EAE7DC,OAAS,WAQd,IAAQC,EAAU,EAAKC,MAAfD,MACFE,EAA6B,GAE3BL,EAAgB,EAAKF,MAArBE,YAGR,GAAIG,EAAO,CAGT,IAAMG,EAAa,oBACjB,EAAKR,MAAMC,UAAYI,EAAMI,aAAe,QAC9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAGlB,OACE,8BACE,6BACE,kBAAC,IAAD,CACER,MAAOE,EACPU,OAAQ,EAAKC,aACbC,gBAAgB,qBAGlB,2BACEC,GAAG,QACHC,UAAQ,EACRC,IAAK,EAAKjB,MAAMG,eAGlB,4BAAQY,GAAG,SAASG,QAAS,EAAKC,eAAlC,SAGA,4BAAQJ,GAAG,QAAQG,QAAS,EAAKE,eAAjC,SAGA,4BAAQL,GAAG,OAAOG,QAAS,EAAKG,cAAhC,W,EAUAF,cAAgB,WACtB,EAAKG,SAAS,CACZpB,YAAaqB,IAAYC,S,EAIrBJ,cAAgB,WACtB,EAAKE,SAAS,CACZpB,YAAaqB,IAAYE,S,EAIrBJ,aAAe,WACrB,EAAKC,SAAS,CACZpB,YAAaqB,IAAYG,Q,EAIrBb,aAAe,SAACc,GACtB,EAAKL,SAAS,CACZnB,aAAcwB,EAAKC,MAErBC,IAAUC,kBAAkBH,EAAKC,M,yBA/EXG,MAwFXC,cAAwBjC,GAIvC8B,IAAUI,oBAIVJ,IAAUK,iBC5GVC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.68e36169.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataUrl: string\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataUrl: ''}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    // const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            backgroundColor='rgb(255,255,255)'\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataUrl}\n          ></audio>\n\n          <button id='record' onClick={this.onClick_start}>\n            Start\n          </button>\n          <button id='pause' onClick={this.onClick_pause}>\n            Pause\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  /** fucntions from react audio recorder app */\n  private onClick_start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  private onClick_pause = () => {\n    this.setState({\n      recordState: RecordState.PAUSE\n    })\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onStop_audio = (data) => {\n    this.setState({\n      audioDataUrl: data.url\n    })\n    Streamlit.setComponentValue(data.url)\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}