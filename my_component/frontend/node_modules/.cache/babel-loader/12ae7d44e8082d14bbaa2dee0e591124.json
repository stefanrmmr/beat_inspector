{"ast":null,"code":"import{Streamlit}from\"streamlit-component-lib\";// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nvar span=document.body.appendChild(document.createElement(\"span\"));var textNode=span.appendChild(document.createTextNode(\"\"));var button=span.appendChild(document.createElement(\"button\"));button.textContent=\"Click Me!\";// Add a click handler to our button. It will send data back to Streamlit.\nvar numClicks=0;var isFocused=false;button.onclick=function(){// Increment numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nnumClicks+=1;Streamlit.setComponentValue(numClicks);};button.onfocus=function(){isFocused=true;};button.onblur=function(){isFocused=false;};/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */function onRender(event){// Get the RenderData from the event\nvar data=event.detail;// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(data.theme){// Use CSS vars to style our button border. Alternatively, the theme style\n// is defined in the data.theme object.\nvar borderStyling=\"1px solid var(\".concat(isFocused?\"--primary-color\":\"gray\",\")\");button.style.border=borderStyling;button.style.outline=borderStyling;}// Disable our button if necessary.\nbutton.disabled=data.disabled;// RenderData.args is the JSON dictionary of arguments sent from the\n// Python script.\nvar name=data.args[\"name\"];// Show \"Hello, name!\" with a non-breaking space afterwards.\ntextNode.textContent=\"Hello, \".concat(name,\"! \")+String.fromCharCode(160);// We tell Streamlit to update our frameHeight after each render event, in\n// case it has changed. (This isn't strictly necessary for the example\n// because our height stays fixed, but this is a low-cost function, so\n// there's no harm in doing it redundantly.)\nStreamlit.setFrameHeight();}// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRender);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/index.tsx"],"names":["Streamlit","span","document","body","appendChild","createElement","textNode","createTextNode","button","textContent","numClicks","isFocused","onclick","setComponentValue","onfocus","onblur","onRender","event","data","detail","theme","borderStyling","style","border","outline","disabled","name","args","String","fromCharCode","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"mappings":"AAAA,OAASA,SAAT,KAAsC,yBAAtC,CAEA;AACA;AACA,GAAMC,CAAAA,IAAI,CAAGC,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BF,QAAQ,CAACG,aAAT,CAAuB,MAAvB,CAA1B,CAAb,CACA,GAAMC,CAAAA,QAAQ,CAAGL,IAAI,CAACG,WAAL,CAAiBF,QAAQ,CAACK,cAAT,CAAwB,EAAxB,CAAjB,CAAjB,CACA,GAAMC,CAAAA,MAAM,CAAGP,IAAI,CAACG,WAAL,CAAiBF,QAAQ,CAACG,aAAT,CAAuB,QAAvB,CAAjB,CAAf,CACAG,MAAM,CAACC,WAAP,CAAqB,WAArB,CAEA;AACA,GAAIC,CAAAA,SAAS,CAAG,CAAhB,CACA,GAAIC,CAAAA,SAAS,CAAG,KAAhB,CAEAH,MAAM,CAACI,OAAP,CAAiB,UAAiB,CAChC;AACA;AACAF,SAAS,EAAI,CAAb,CACAV,SAAS,CAACa,iBAAV,CAA4BH,SAA5B,EACD,CALD,CAOAF,MAAM,CAACM,OAAP,CAAiB,UAAiB,CAChCH,SAAS,CAAG,IAAZ,CACD,CAFD,CAIAH,MAAM,CAACO,MAAP,CAAgB,UAAiB,CAC/BJ,SAAS,CAAG,KAAZ,CACD,CAFD,CAIA;AACA;AACA;AACA;AACA,GACA,QAASK,CAAAA,QAAT,CAAkBC,KAAlB,CAAsC,CACpC;AACA,GAAMC,CAAAA,IAAI,CAAID,KAAD,CAAmCE,MAAhD,CAEA;AACA;AACA,GAAID,IAAI,CAACE,KAAT,CAAgB,CACd;AACA;AACA,GAAMC,CAAAA,aAAa,yBACjBV,SAAS,CAAG,iBAAH,CAAuB,MADf,KAAnB,CAGAH,MAAM,CAACc,KAAP,CAAaC,MAAb,CAAsBF,aAAtB,CACAb,MAAM,CAACc,KAAP,CAAaE,OAAb,CAAuBH,aAAvB,CACD,CAED;AACAb,MAAM,CAACiB,QAAP,CAAkBP,IAAI,CAACO,QAAvB,CAEA;AACA;AACA,GAAIC,CAAAA,IAAI,CAAGR,IAAI,CAACS,IAAL,CAAU,MAAV,CAAX,CAEA;AACArB,QAAQ,CAACG,WAAT,CAAuB,iBAAUiB,IAAV,OAAqBE,MAAM,CAACC,YAAP,CAAoB,GAApB,CAA5C,CAEA;AACA;AACA;AACA;AACA7B,SAAS,CAAC8B,cAAV,GACD,CAED;AACA9B,SAAS,CAAC+B,MAAV,CAAiBC,gBAAjB,CAAkChC,SAAS,CAACiC,YAA5C,CAA0DjB,QAA1D,EAEA;AACA;AACAhB,SAAS,CAACkC,iBAAV,GAEA;AACA;AACAlC,SAAS,CAAC8B,cAAV","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span = document.body.appendChild(document.createElement(\"span\"))\nconst textNode = span.appendChild(document.createTextNode(\"\"))\nconst button = span.appendChild(document.createElement(\"button\"))\nbutton.textContent = \"Click Me!\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\nlet isFocused = false\n\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n}\n\nbutton.onfocus = function(): void {\n  isFocused = true\n}\n\nbutton.onblur = function(): void {\n  isFocused = false\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${\n      isFocused ? \"--primary-color\" : \"gray\"\n    })`\n    button.style.border = borderStyling\n    button.style.outline = borderStyling\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let name = data.args[\"name\"]\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}