{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import AudioReactRecorder,{RecordState}from'audio-react-recorder';import'audio-react-recorder/dist/index.css';/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */var MyComponent=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(MyComponent,_StreamlitComponentBa);var _super=_createSuper(MyComponent);function MyComponent(){var _this;_classCallCheck(this,MyComponent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={numClicks:0,isFocused:false,recordState:null,audioDataUrl:''};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nvar name=_this.props.args[\"name\"];// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};var recordState=_this.state.recordState;// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:_this.onStop,backgroundColor:\"rgb(255,255,255)\"}),/*#__PURE__*/React.createElement(\"audio\",{id:\"audio\",controls:true,src:_this.state.audioDataUrl}),/*#__PURE__*/React.createElement(\"button\",{id:\"record\",onClick:_this.start},\"Start\"),/*#__PURE__*/React.createElement(\"button\",{id:\"pause\",onClick:_this.pause},\"Pause\"),/*#__PURE__*/React.createElement(\"button\",{id:\"stop\",onClick:_this.stop},\"Stop\")),\"Hello, \",name,\"! \\xA0\",/*#__PURE__*/React.createElement(\"button\",{id:\"button_a\",style:style,onClick:_this.onClickedA},\"Button A\"),/*#__PURE__*/React.createElement(\"button\",{id:\"button_b\",style:style,onClick:_this.onClickedB},\"Button B\"),/*#__PURE__*/React.createElement(\"button\",{id:\"button_c\",style:style,onClick:_this.onClickedC},\"Button C\"));};_this.onClicked=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\n_this.setState(function(prevState){return{numClicks:prevState.numClicks+1};},function(){return Streamlit.setComponentValue(_this.state.numClicks);});};_this.onClickedA=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nStreamlit.setComponentValue('A');};_this.onClickedB=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nStreamlit.setComponentValue('B');};_this.onClickedC=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nStreamlit.setComponentValue('C');};_this._onFocus=function(){_this.setState({isFocused:true});};_this._onBlur=function(){_this.setState({isFocused:false});};_this.start=function(){_this.setState({recordState:RecordState.START});};_this.pause=function(){_this.setState({recordState:RecordState.PAUSE});};_this.stop=function(){_this.setState({recordState:RecordState.STOP});};_this.onStop=function(data){_this.setState({audioDataUrl:data.url});Streamlit.setComponentValue(data.url);};return _this;}return _createClass(MyComponent);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);// You don't need to edit withStreamlitConnection (but you're welcome to!).\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","MyComponent","state","numClicks","isFocused","recordState","audioDataUrl","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onStop","start","pause","stop","onClickedA","onClickedB","onClickedC","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur","START","PAUSE","STOP","data","url","setComponentReady","setFrameHeight"],"mappings":"4kBAAA,OACEA,SADF,CAEEC,sBAFF,CAGEC,uBAHF,KAIO,yBAJP,CAKA,MAAOC,CAAAA,KAAP,KAAiC,OAAjC,CAEA,MAAOC,CAAAA,kBAAP,EAA6BC,WAA7B,KAAgD,sBAAhD,CACA,MAAO,qCAAP,CASA;AACA;AACA;AACA,G,GACMC,CAAAA,W,qWACGC,K,CAAQ,CAAEC,SAAS,CAAE,CAAb,CAAgBC,SAAS,CAAE,KAA3B,CAAkCC,WAAW,CAAE,IAA/C,CAAqDC,YAAY,CAAE,EAAnE,C,OAERC,M,CAAS,UAAiB,CAC/B;AACA;AACA,GAAMC,CAAAA,IAAI,CAAG,MAAKC,KAAL,CAAWC,IAAX,CAAgB,MAAhB,CAAb,CAEA;AACA;AACA;AACA,GAAQC,CAAAA,KAAR,CAAkB,MAAKF,KAAvB,CAAQE,KAAR,CACA,GAAMC,CAAAA,KAA0B,CAAG,EAAnC,CAEA,GAAQP,CAAAA,WAAR,CAAwB,MAAKH,KAA7B,CAAQG,WAAR,CAEA;AACA;AACA,GAAIM,KAAJ,CAAW,CACT;AACA;AACA,GAAME,CAAAA,aAAa,qBACjB,MAAKX,KAAL,CAAWE,SAAX,CAAuBO,KAAK,CAACG,YAA7B,CAA4C,MAD3B,CAAnB,CAGAF,KAAK,CAACG,MAAN,CAAeF,aAAf,CACAD,KAAK,CAACI,OAAN,CAAgBH,aAAhB,CACD,CAED;AACA;AACA;AACA;AACA,mBACE,6CACE,4CACE,oBAAC,kBAAD,EACE,KAAK,CAAER,WADT,CAEE,MAAM,CAAE,MAAKY,MAFf,CAGE,eAAe,CAAC,kBAHlB,EADF,cAME,6BACE,EAAE,CAAC,OADL,CAEE,QAAQ,KAFV,CAGE,GAAG,CAAE,MAAKf,KAAL,CAAWI,YAHlB,EANF,cAWE,8BAAQ,EAAE,CAAC,QAAX,CAAoB,OAAO,CAAE,MAAKY,KAAlC,UAXF,cAcE,8BAAQ,EAAE,CAAC,OAAX,CAAmB,OAAO,CAAE,MAAKC,KAAjC,UAdF,cAiBE,8BAAQ,EAAE,CAAC,MAAX,CAAkB,OAAO,CAAE,MAAKC,IAAhC,SAjBF,CADF,WAyBUZ,IAzBV,uBA0BE,8BAAQ,EAAE,CAAC,UAAX,CAAsB,KAAK,CAAEI,KAA7B,CAAoC,OAAO,CAAE,MAAKS,UAAlD,aA1BF,cA6BE,8BAAQ,EAAE,CAAC,UAAX,CAAsB,KAAK,CAAET,KAA7B,CAAoC,OAAO,CAAE,MAAKU,UAAlD,aA7BF,cAgCE,8BAAQ,EAAE,CAAC,UAAX,CAAsB,KAAK,CAAEV,KAA7B,CAAoC,OAAO,CAAE,MAAKW,UAAlD,aAhCF,CADF,CAsCD,C,OAGOC,S,CAAY,UAAY,CAC9B;AACA;AACA,MAAKC,QAAL,CACE,SAAAC,SAAS,QAAK,CAAEvB,SAAS,CAAEuB,SAAS,CAACvB,SAAV,CAAsB,CAAnC,CAAL,EADX,CAEE,iBAAMR,CAAAA,SAAS,CAACgC,iBAAV,CAA4B,MAAKzB,KAAL,CAAWC,SAAvC,CAAN,EAFF,EAID,C,OAGOkB,U,CAAa,UAAY,CAC/B;AACA;AACA1B,SAAS,CAACgC,iBAAV,CAA4B,GAA5B,EACD,C,OAEOL,U,CAAa,UAAY,CAC/B;AACA;AACA3B,SAAS,CAACgC,iBAAV,CAA4B,GAA5B,EACD,C,OAEOJ,U,CAAa,UAAY,CAC/B;AACA;AACA5B,SAAS,CAACgC,iBAAV,CAA4B,GAA5B,EACD,C,OAKOC,Q,CAAW,UAAY,CAC7B,MAAKH,QAAL,CAAc,CAAErB,SAAS,CAAE,IAAb,CAAd,EACD,C,OAGOyB,O,CAAU,UAAY,CAC5B,MAAKJ,QAAL,CAAc,CAAErB,SAAS,CAAE,KAAb,CAAd,EACD,C,OAGOc,K,CAAQ,UAAM,CACpB,MAAKO,QAAL,CAAc,CACZpB,WAAW,CAAEL,WAAW,CAAC8B,KADb,CAAd,EAGD,C,OAEOX,K,CAAQ,UAAM,CACpB,MAAKM,QAAL,CAAc,CACZpB,WAAW,CAAEL,WAAW,CAAC+B,KADb,CAAd,EAGD,C,OAEOX,I,CAAO,UAAM,CACnB,MAAKK,QAAL,CAAc,CACZpB,WAAW,CAAEL,WAAW,CAACgC,IADb,CAAd,EAGD,C,OAEOf,M,CAAS,SAACgB,IAAD,CAAU,CACzB,MAAKR,QAAL,CAAc,CACZnB,YAAY,CAAE2B,IAAI,CAACC,GADP,CAAd,EAGAvC,SAAS,CAACgC,iBAAV,CAA4BM,IAAI,CAACC,GAAjC,EACD,C,kDAzIuBtC,sB,EA6I1B;AACA;AACA;AACA;AACA;AACA,cAAeC,CAAAA,uBAAuB,CAACI,WAAD,CAAtC,CACA;AAEA;AACA;AACAN,SAAS,CAACwC,iBAAV,GAEA;AACA;AACAxC,SAAS,CAACyC,cAAV","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  recordState: null\n  audioDataUrl: string\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, recordState: null, audioDataUrl: ''}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        <div>\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop}\n            backgroundColor='rgb(255,255,255)'\n          />\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataUrl}\n          ></audio>\n          <button id='record' onClick={this.start}>\n            Start\n          </button>\n          <button id='pause' onClick={this.pause}>\n            Pause\n          </button>\n          <button id='stop' onClick={this.stop}>\n            Stop\n          </button>\n        </div>\n\n\n\n        Hello, {name}! &nbsp;\n        <button id='button_a' style={style} onClick={this.onClickedA}>\n          Button A\n        </button>\n        <button id='button_b' style={style} onClick={this.onClickedB}>\n          Button B\n        </button>\n        <button id='button_c' style={style} onClick={this.onClickedC}>\n          Button C\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n\n  private onClickedA = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('A')\n  }\n\n  private onClickedB = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('B')\n  }\n\n  private onClickedC = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('C')\n  }\n\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n\n  /** fucntions from react audio recorder app */\n  private start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  private pause = () => {\n    this.setState({\n      recordState: RecordState.PAUSE\n    })\n  }\n\n  private stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onStop = (data) => {\n    this.setState({\n      audioDataUrl: data.url\n    })\n    Streamlit.setComponentValue(data.url)\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}