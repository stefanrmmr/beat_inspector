{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";// from audio recorder app component\nimport AudioReactRecorder,{RecordState}from'audio-react-recorder';/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */var MyComponent=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(MyComponent,_StreamlitComponentBa);var _super=_createSuper(MyComponent);function MyComponent(props){var _this;_classCallCheck(this,MyComponent);_this=_super.call(this,props);_this.state={numClicks:0,isFocused:false};_this.start=function(){_this.setState({recordState:RecordState.START});};_this.stop=function(){_this.setState({recordState:RecordState.STOP});};_this.onStop=function(audioData){console.log('audioData',audioData);};_this.render=function(){// from audio recorder script\nvar recordState=_this.state.recordState;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:_this.onStop}),/*#__PURE__*/React.createElement(\"button\",{onClick:_this.start},\"Start\"),/*#__PURE__*/React.createElement(\"button\",{onClick:_this.stop},\"Stop\"));// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nvar name=_this.props.args[\"name\"];// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/React.createElement(\"span\",null,\"Hello, \",name,\"! This is a custom streamlit component! \\xA0\",/*#__PURE__*/React.createElement(\"button\",{style:style,onClick:_this.onClicked,disabled:_this.props.disabled,onFocus:_this._onFocus,onBlur:_this._onBlur},\"demo button\"));};_this.onClicked=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\n_this.setState(function(prevState){return{numClicks:prevState.numClicks+1};},function(){return Streamlit.setComponentValue(_this.state.numClicks);});};_this._onFocus=function(){_this.setState({isFocused:true});};_this._onBlur=function(){_this.setState({isFocused:false});};_this.state={recordState:null};return _this;}return _createClass(MyComponent);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","MyComponent","props","state","numClicks","isFocused","start","setState","recordState","START","stop","STOP","onStop","audioData","console","log","render","name","args","theme","style","borderStyling","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","prevState","setComponentValue"],"mappings":"4kBAAA,OACEA,SADF,CAEEC,sBAFF,CAGEC,uBAHF,KAIO,yBAJP,CAKA,MAAOC,CAAAA,KAAP,KAAiC,OAAjC,CAEA;AACA,MAAOC,CAAAA,kBAAP,EAA6BC,WAA7B,KAAgD,sBAAhD,CAOA;AACA;AACA;AACA,G,GACMC,CAAAA,W,gIAGJ,qBAAYC,KAAZ,CAAmB,6CACjB,uBAAMA,KAAN,EADiB,MAFZC,KAEY,CAFJ,CAAEC,SAAS,CAAE,CAAb,CAAgBC,SAAS,CAAE,KAA3B,CAEI,OAQnBC,KARmB,CAQX,UAAM,CACZ,MAAKC,QAAL,CAAc,CACZC,WAAW,CAAER,WAAW,CAACS,KADb,CAAd,EAGD,CAZkB,OAcnBC,IAdmB,CAcZ,UAAM,CACX,MAAKH,QAAL,CAAc,CACZC,WAAW,CAAER,WAAW,CAACW,IADb,CAAd,EAGD,CAlBkB,OAqBnBC,MArBmB,CAqBV,SAACC,SAAD,CAAe,CACtBC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBF,SAAzB,EACD,CAvBkB,OAyBZG,MAzBY,CAyBH,UAAiB,CAE/B;AACA,GAAQR,CAAAA,WAAR,CAAwB,MAAKL,KAA7B,CAAQK,WAAR,CACA,mBACE,4CACE,oBAAC,kBAAD,EAAoB,KAAK,CAAEA,WAA3B,CAAwC,MAAM,CAAE,MAAKI,MAArD,EADF,cAGE,8BAAQ,OAAO,CAAE,MAAKN,KAAtB,UAHF,cAIE,8BAAQ,OAAO,CAAE,MAAKI,IAAtB,SAJF,CADF,CAUA;AACA;AACA,GAAMO,CAAAA,IAAI,CAAG,MAAKf,KAAL,CAAWgB,IAAX,CAAgB,MAAhB,CAAb,CAEA;AACA;AACA;AACA,GAAQC,CAAAA,KAAR,CAAkB,MAAKjB,KAAvB,CAAQiB,KAAR,CACA,GAAMC,CAAAA,KAA0B,CAAG,EAAnC,CAEA;AACA;AACA,GAAID,KAAJ,CAAW,CACT;AACA;AACA,GAAME,CAAAA,aAAa,qBACjB,MAAKlB,KAAL,CAAWE,SAAX,CAAuBc,KAAK,CAACG,YAA7B,CAA4C,MAD3B,CAAnB,CAGAF,KAAK,CAACG,MAAN,CAAeF,aAAf,CACAD,KAAK,CAACI,OAAN,CAAgBH,aAAhB,CACD,CAED;AACA;AACA;AACA;AACA,mBACE,0CACUJ,IADV,6DAEE,8BACE,KAAK,CAAEG,KADT,CAEE,OAAO,CAAE,MAAKK,SAFhB,CAGE,QAAQ,CAAE,MAAKvB,KAAL,CAAWwB,QAHvB,CAIE,OAAO,CAAE,MAAKC,QAJhB,CAKE,MAAM,CAAE,MAAKC,OALf,gBAFF,CADF,CAcD,CA/EkB,OAkFXH,SAlFW,CAkFC,UAAY,CAC9B;AACA;AACA,MAAKlB,QAAL,CACE,SAAAsB,SAAS,QAAK,CAAEzB,SAAS,CAAEyB,SAAS,CAACzB,SAAV,CAAsB,CAAnC,CAAL,EADX,CAEE,iBAAMT,CAAAA,SAAS,CAACmC,iBAAV,CAA4B,MAAK3B,KAAL,CAAWC,SAAvC,CAAN,EAFF,EAID,CAzFkB,OA4FXuB,QA5FW,CA4FA,UAAY,CAC7B,MAAKpB,QAAL,CAAc,CAAEF,SAAS,CAAE,IAAb,CAAd,EACD,CA9FkB,OAiGXuB,OAjGW,CAiGD,UAAY,CAC5B,MAAKrB,QAAL,CAAc,CAAEF,SAAS,CAAE,KAAb,CAAd,EACD,CAnGkB,CAGjB,MAAKF,KAAL,CAAa,CACXK,WAAW,CAAE,IADF,CAAb,CAHiB,aAMlB,C,mCATuBZ,sB,EAyG1B;AACA;AACA;AACA;AACA;AACA,cAAeC,CAAAA,uBAAuB,CAACI,WAAD,CAAtC","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\n// from audio recorder app component\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      recordState: null\n    }\n  }\n\n  start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  //audioData contains blob and blobUrl\n  onStop = (audioData) => {\n    console.log('audioData', audioData)\n  }\n\n  public render = (): ReactNode => {\n\n    // from audio recorder script\n    const { recordState } = this.state\n    return (\n      <div>\n        <AudioReactRecorder state={recordState} onStop={this.onStop} />\n\n        <button onClick={this.start}>Start</button>\n        <button onClick={this.stop}>Stop</button>\n      </div>\n    )\n\n\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! This is a custom streamlit component! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          demo button\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"]},"metadata":{},"sourceType":"module"}