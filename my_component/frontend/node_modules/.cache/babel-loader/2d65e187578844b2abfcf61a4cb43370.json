{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/index.tsx\";\nimport { Streamlit } from \"streamlit-component-lib\";\nimport React, { Component } from 'react';\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.start = () => {\n      this.setState({\n        recordState: RecordState.START\n      });\n    };\n\n    this.stop = () => {\n      this.setState({\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onStop = audioData => {\n      console.log('audioData', audioData);\n    };\n\n    this.state = {\n      recordState: null\n    };\n  }\n\n  render() {\n    const {\n      recordState\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(AudioReactRecorder, {\n      state: recordState,\n      onStop: this.onStop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.start,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.stop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, \"Stop\"));\n  }\n\n} // Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\n\n\nconst span = document.body.appendChild(document.createElement(\"span\"));\nconst textNode = span.appendChild(document.createTextNode(\"\"));\nconst button = span.appendChild(document.createElement(\"button\"));\nbutton.textContent = \"Click Me!\"; // Add a click handler to our button. It will send data back to Streamlit.\n\nlet numClicks = 0;\nlet isFocused = false;\n\nbutton.onclick = function () {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1;\n  Streamlit.setComponentValue(numClicks);\n};\n\nbutton.onfocus = function () {\n  isFocused = true;\n};\n\nbutton.onblur = function () {\n  isFocused = false;\n};\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\n\n\nfunction onRender(event) {\n  // Get the RenderData from the event\n  const data = event.detail; // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${isFocused ? \"--primary-color\" : \"gray\"})`;\n    button.style.border = borderStyling;\n    button.style.outline = borderStyling;\n  } // Disable our button if necessary.\n\n\n  button.disabled = data.disabled; // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n\n  let name = data.args[\"name\"]; // Show \"Hello, name!\" with a non-breaking space afterwards.\n\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160); // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n\n  Streamlit.setFrameHeight();\n} // Attach our `onRender` handler to Streamlit's render event.\n\n\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender); // Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/index.tsx"],"names":["Streamlit","React","Component","AudioReactRecorder","RecordState","App","constructor","props","start","setState","recordState","START","stop","STOP","onStop","audioData","console","log","state","render","span","document","body","appendChild","createElement","textNode","createTextNode","button","textContent","numClicks","isFocused","onclick","setComponentValue","onfocus","onblur","onRender","event","data","detail","theme","borderStyling","style","border","outline","disabled","name","args","String","fromCharCode","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"mappings":"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","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport React, { Component } from 'react'\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      recordState: null\n    }\n  }\n  start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n  stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n  //audioData contains blob and blobUrl\n  onStop = (audioData) => {\n    console.log('audioData', audioData)\n  }\n  render() {\n    const { recordState } = this.state\n    return (\n      <div>\n        <AudioReactRecorder state={recordState} onStop={this.onStop} />\n        <button onClick={this.start}>Start</button>\n        <button onClick={this.stop}>Stop</button>\n      </div>\n    )\n  }\n}\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span = document.body.appendChild(document.createElement(\"span\"))\nconst textNode = span.appendChild(document.createTextNode(\"\"))\nconst button = span.appendChild(document.createElement(\"button\"))\nbutton.textContent = \"Click Me!\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\nlet isFocused = false\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n}\n\nbutton.onfocus = function(): void {\n  isFocused = true\n}\n\nbutton.onblur = function(): void {\n  isFocused = false\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${\n      isFocused ? \"--primary-color\" : \"gray\"\n    })`\n    button.style.border = borderStyling\n    button.style.outline = borderStyling\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let name = data.args[\"name\"]\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}