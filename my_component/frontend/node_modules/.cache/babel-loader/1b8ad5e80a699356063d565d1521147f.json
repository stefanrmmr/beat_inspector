{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/codex2.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { useMediaRecorder } from 'use-media-recorder';\n\nconst AudioRecorder = () => {\n  const [stateIndex, setStateIndex] = useState(0);\n  const [audioURL, setAudioURL] = useState('');\n  const [chunks, setChunks] = useState([]);\n  const [mediaRecorder, mediaStream, mediaStreamError] = useMediaRecorder();\n  const State = ['Initial', 'Record', 'Download'];\n  useEffect(() => {\n    if (mediaStreamError) {\n      setStateIndex('');\n    }\n  }, [mediaStreamError]);\n  useEffect(() => {\n    if (mediaRecorder) {\n      mediaRecorder.ondataavailable = e => {\n        setChunks(chunks => [...chunks, e.data]);\n      };\n\n      mediaRecorder.onstop = () => {\n        const blob = new Blob(chunks, {\n          'type': 'audio/ogg; codecs=opus'\n        });\n        setChunks([]);\n        setAudioURL(window.URL.createObjectURL(blob));\n      };\n    }\n  }, [mediaRecorder]);\n\n  const clearDisplay = () => {\n    document.querySelector('.display').textContent = '';\n  };\n\n  const clearControls = () => {\n    document.querySelector('.controllers').textContent = '';\n  };\n\n  const record = () => {\n    setStateIndex(1);\n    mediaRecorder.start();\n  };\n\n  const stopRecording = () => {\n    setStateIndex(2);\n    mediaRecorder.stop();\n  };\n\n  const analyzeAudio = () => {\n    // this element needs to create a return value for streamlit\n    const downloadLink = document.createElement('a');\n    downloadLink.href = audioURL;\n    downloadLink.setAttribute('download', 'audio');\n    downloadLink.click();\n  };\n\n  const addButton = (id, funString, text) => {\n    const btn = document.createElement('button');\n    btn.id = id;\n    btn.setAttribute('onclick', funString);\n    btn.textContent = text;\n    document.querySelector('.controllers').append(btn);\n  };\n\n  const addMessage = text => {\n    const msg = document.createElement('p');\n    msg.textContent = text;\n    document.querySelector('.display').append(msg);\n  };\n\n  const addAudio = () => {\n    const audio = document.createElement('audio');\n    audio.controls = true;\n    audio.src = audioURL;\n    document.querySelector('.display').append(audio);\n  };\n\n  const application = index => {\n    switch (State[index]) {\n      case 'Initial':\n        clearDisplay();\n        clearControls();\n        addMessage('Press the start button to start recording\\n');\n        addButton('record', 'record()', 'Start Recording');\n        break;\n\n      case 'Record':\n        clearDisplay();\n        clearControls();\n        addMessage('Recording...\\n');\n        addButton('stop', 'stopRecording()', 'Stop Recording');\n        break;\n\n      case 'Download':\n        clearControls();\n        clearDisplay();\n        addAudio();\n        addButton('continue', 'analyzeAudio()', 'Continue');\n        addButton('record', 'record()', 'Record Again');\n        break;\n\n      default:\n        clearControls();\n        clearDisplay();\n        addMessage('Your browser does not support mediaDevices');\n        break;\n    }\n  };\n\n  useEffect(() => {\n    application(stateIndex);\n  }, [stateIndex]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"display\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"controllers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default AudioRecorder;","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/codex2.tsx"],"names":["React","useState","useEffect","useMediaRecorder","AudioRecorder","stateIndex","setStateIndex","audioURL","setAudioURL","chunks","setChunks","mediaRecorder","mediaStream","mediaStreamError","State","ondataavailable","e","data","onstop","blob","Blob","window","URL","createObjectURL","clearDisplay","document","querySelector","textContent","clearControls","record","start","stopRecording","stop","analyzeAudio","downloadLink","createElement","href","setAttribute","click","addButton","id","funString","text","btn","append","addMessage","msg","addAudio","audio","controls","src","application","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useMediaRecorder } from 'use-media-recorder'\n\nconst AudioRecorder = () => {\n    const [stateIndex, setStateIndex] = useState(0)\n    const [audioURL, setAudioURL] = useState('')\n    const [chunks, setChunks] = useState([])\n    const [mediaRecorder, mediaStream, mediaStreamError] = useMediaRecorder()\n\n    const State = ['Initial', 'Record', 'Download']\n\n    useEffect(() => {\n        if(mediaStreamError){\n            setStateIndex('')\n        }\n    }, [mediaStreamError])\n\n    useEffect(() => {\n        if(mediaRecorder){\n            mediaRecorder.ondataavailable = (e) => {\n                setChunks(chunks => [...chunks, e.data])\n            }\n\n            mediaRecorder.onstop = () => {\n                const blob = new Blob(chunks, {'type': 'audio/ogg; codecs=opus'})\n                setChunks([])\n                setAudioURL(window.URL.createObjectURL(blob))\n            }\n        }\n    }, [mediaRecorder])\n\n    const clearDisplay = () => {\n        document.querySelector('.display').textContent = ''\n    }\n\n    const clearControls = () => {\n        document.querySelector('.controllers').textContent = ''\n    }\n\n    const record = () => {\n        setStateIndex(1)\n        mediaRecorder.start()\n    }\n\n    const stopRecording = () => {\n        setStateIndex(2)\n        mediaRecorder.stop()\n    }\n\n    const analyzeAudio = () => {\n        // this element needs to create a return value for streamlit\n        const downloadLink = document.createElement('a')\n        downloadLink.href = audioURL\n        downloadLink.setAttribute('download', 'audio')\n        downloadLink.click()\n    }\n\n    const addButton = (id, funString, text) => {\n        const btn = document.createElement('button')\n        btn.id = id\n        btn.setAttribute('onclick', funString)\n        btn.textContent = text\n        document.querySelector('.controllers').append(btn)\n    }\n\n    const addMessage = (text) => {\n        const msg = document.createElement('p')\n        msg.textContent = text\n        document.querySelector('.display').append(msg)\n    }\n\n    const addAudio = () => {\n        const audio = document.createElement('audio')\n        audio.controls = true\n        audio.src = audioURL\n        document.querySelector('.display').append(audio)\n    }\n\n    const application = (index) => {\n        switch (State[index]) {\n            case 'Initial':\n                clearDisplay()\n                clearControls()\n\n                addMessage('Press the start button to start recording\\n')\n                addButton('record', 'record()', 'Start Recording')\n                break;\n\n            case 'Record':\n                clearDisplay()\n                clearControls()\n\n                addMessage('Recording...\\n')\n                addButton('stop', 'stopRecording()', 'Stop Recording')\n                break\n\n            case 'Download':\n                clearControls()\n                clearDisplay()\n\n                addAudio()\n                addButton('continue', 'analyzeAudio()', 'Continue')\n                addButton('record', 'record()', 'Record Again')\n                break\n\n            default:\n                clearControls()\n                clearDisplay()\n\n                addMessage('Your browser does not support mediaDevices')\n                break;\n        }\n    }\n\n    useEffect(() => {\n        application(stateIndex)\n    }, [stateIndex])\n\n    return (\n        <div>\n            <div className=\"display\"></div>\n            <div className=\"controllers\"></div>\n        </div>\n    )\n}\n\nexport default AudioRecorder\n"]},"metadata":{},"sourceType":"module"}