{"ast":null,"code":"var _jsxFileName = \"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport React from \"react\";\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder';\nimport 'audio-react-recorder/dist/index.css';\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      numClicks: 0,\n      isFocused: false,\n      recordState: null,\n      audioDataUrl: ''\n    };\n\n    this.render = () => {\n      // Arguments that are passed to the plugin in Python are accessible\n      // via `this.props.args`. Here, we access the \"name\" arg.\n      const name = this.props.args[\"name\"]; // Streamlit sends us a theme object via props that we can use to ensure\n      // that our component has visuals that match the active theme in a\n      // streamlit app.\n\n      const {\n        theme\n      } = this.props;\n      const style = {};\n      const {\n        recordState\n      } = this.state; // Maintain compatibility with older versions of Streamlit that don't send\n      // a theme object.\n\n      if (theme) {\n        // Use the theme object to style our button border. Alternatively, the\n        // theme style is defined in CSS vars.\n        const borderStyling = `1px solid ${this.state.isFocused ? theme.primaryColor : \"gray\"}`;\n        style.border = borderStyling;\n        style.outline = borderStyling;\n      } // Show a button and some text.\n      // When the button is clicked, we'll increment our \"numClicks\" state\n      // variable, and send its new value back to Streamlit, where it'll\n      // be available to the Python program.\n\n\n      return /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(AudioReactRecorder, {\n        state: recordState,\n        onStop: this.onStop,\n        backgroundColor: \"rgb(255,255,255)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"audio\", {\n        id: \"audio\",\n        controls: true,\n        src: this.state.audioDataUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"record\",\n        onClick: this.start,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }\n      }, \"Start\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"pause\",\n        onClick: this.pause,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"stop\",\n        onClick: this.stop,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      }, \"Stop\")), \"Hello, \", name, \"! \\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        id: \"button_a\",\n        style: style,\n        onClick: this.onClickedA,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 9\n        }\n      }, \"Button A\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"button_b\",\n        style: style,\n        onClick: this.onClickedB,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, \"Button B\"), /*#__PURE__*/React.createElement(\"button\", {\n        id: \"button_c\",\n        style: style,\n        onClick: this.onClickedC,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }\n      }, \"Button C\"));\n    };\n\n    this.onClicked = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      this.setState(prevState => ({\n        numClicks: prevState.numClicks + 1\n      }), () => Streamlit.setComponentValue(this.state.numClicks));\n    };\n\n    this.onClickedA = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      Streamlit.setComponentValue('A');\n    };\n\n    this.onClickedB = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      Streamlit.setComponentValue('B');\n    };\n\n    this.onClickedC = () => {\n      // Increment state.numClicks, and pass the new value back to\n      // Streamlit via `Streamlit.setComponentValue`.\n      Streamlit.setComponentValue('C');\n    };\n\n    this._onFocus = () => {\n      this.setState({\n        isFocused: true\n      });\n    };\n\n    this._onBlur = () => {\n      this.setState({\n        isFocused: false\n      });\n    };\n\n    this.start = () => {\n      this.setState({\n        recordState: RecordState.START\n      });\n    };\n\n    this.pause = () => {\n      this.setState({\n        recordState: RecordState.PAUSE\n      });\n    };\n\n    this.stop = () => {\n      this.setState({\n        recordState: RecordState.STOP\n      });\n    };\n\n    this.onStop = data => {\n      this.setState({\n        audioDataUrl: data.url\n      });\n      Streamlit.setComponentValue(data.url);\n    };\n  }\n\n} // \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n\nexport default withStreamlitConnection(MyComponent); // You don't need to edit withStreamlitConnection (but you're welcome to!).\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\n\nStreamlit.setComponentReady(); // Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\n\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","MyComponent","state","numClicks","isFocused","recordState","audioDataUrl","render","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onStop","start","pause","stop","onClickedA","onClickedB","onClickedC","onClicked","setState","prevState","setComponentValue","_onFocus","_onBlur","START","PAUSE","STOP","data","url","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  recordState: null\n  audioDataUrl: string\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, recordState: null, audioDataUrl: ''}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        <div>\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop}\n            backgroundColor='rgb(255,255,255)'\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataUrl}\n          ></audio>\n          \n          <button id='record' onClick={this.start}>\n            Start\n          </button>\n          <button id='pause' onClick={this.pause}>\n            Pause\n          </button>\n          <button id='stop' onClick={this.stop}>\n            Stop\n          </button>\n        </div>\n\n\n\n        Hello, {name}! &nbsp;\n        <button id='button_a' style={style} onClick={this.onClickedA}>\n          Button A\n        </button>\n        <button id='button_b' style={style} onClick={this.onClickedB}>\n          Button B\n        </button>\n        <button id='button_c' style={style} onClick={this.onClickedC}>\n          Button C\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n\n  private onClickedA = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('A')\n  }\n\n  private onClickedB = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('B')\n  }\n\n  private onClickedC = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    Streamlit.setComponentValue('C')\n  }\n\n\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n\n  /** fucntions from react audio recorder app */\n  private start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  private pause = () => {\n    this.setState({\n      recordState: RecordState.PAUSE\n    })\n  }\n\n  private stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onStop = (data) => {\n    this.setState({\n      audioDataUrl: data.url\n    })\n    Streamlit.setComponentValue(data.url)\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}