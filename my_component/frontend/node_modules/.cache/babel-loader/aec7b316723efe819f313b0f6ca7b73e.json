{"ast":null,"code":"import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import{Recorder}from'react-voice-recorder';import'react-voice-recorder/dist/index.css';/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */var MyComponent=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(MyComponent,_StreamlitComponentBa);var _super=_createSuper(MyComponent);function MyComponent(){var _this;_classCallCheck(this,MyComponent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={numClicks:0,isFocused:false};_this.state={audioDetails:{url:null,blob:null,chunks:null,duration:{h:0,m:0,s:0}}};_this.render=function(){// ************\n/*#__PURE__*/React.createElement(Recorder,{record:true,title:\"New recording\",audioURL:_this.state.audioDetails.url,showUIAudio:true,handleAudioStop:function handleAudioStop(data){return _this.handleAudioStop(data);},handleAudioUpload:function handleAudioUpload(data){return _this.handleAudioUpload(data);},handleCountDown:function handleCountDown(data){return _this.handleCountDown(data);},handleReset:function handleReset(){return _this.handleReset();},mimeTypeToUseWhenRecording:\"audio/webm\"// For specific mimetype.\n});//*************\n// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\nvar name=_this.props.args[\"name\"];// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/React.createElement(\"span\",null,\"Hello, \",name,\"! This is a custom streamlit component! \\xA0\",/*#__PURE__*/React.createElement(\"button\",{style:style,onClick:_this.onClicked,disabled:_this.props.disabled,onFocus:_this._onFocus,onBlur:_this._onBlur},\"demo button\"));};_this.onClicked=function(){// Increment state.numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\n_this.setState(function(prevState){return{numClicks:prevState.numClicks+1};},function(){return Streamlit.setComponentValue(_this.state.numClicks);});};_this._onFocus=function(){_this.setState({isFocused:true});};_this._onBlur=function(){_this.setState({isFocused:false});};return _this;}_createClass(MyComponent,[{key:\"handleAudioStop\",value:function handleAudioStop(data){console.log(data);this.setState({audioDetails:data});}},{key:\"handleAudioUpload\",value:function handleAudioUpload(file){console.log(file);}},{key:\"handleCountDown\",value:function handleCountDown(data){console.log(data);}},{key:\"handleReset\",value:function handleReset(){var reset={url:null,blob:null,chunks:null,duration:{h:0,m:0,s:0}};this.setState({audioDetails:reset});}// RENDER FUNCTION\n}]);return MyComponent;}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","Recorder","MyComponent","state","numClicks","isFocused","audioDetails","url","blob","chunks","duration","h","m","s","render","data","handleAudioStop","handleAudioUpload","handleCountDown","handleReset","name","props","args","theme","style","borderStyling","primaryColor","border","outline","onClicked","disabled","_onFocus","_onBlur","setState","prevState","setComponentValue","console","log","file","reset"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport {Recorder} from 'react-voice-recorder'\nimport 'react-voice-recorder/dist/index.css'\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false }\n\n  state = {\n      audioDetails: {\n          url: null,\n          blob: null,\n          chunks: null,\n          duration: {\n            h: 0,\n            m: 0,\n            s: 0\n          }\n      }\n  }\n\n  handleAudioStop(data) {\n      console.log(data);\n      this.setState({ audioDetails: data });\n  }\n\n  handleAudioUpload(file) {\n      console.log(file);\n  }\n\n  handleCountDown(data) {\n      console.log(data);\n  }\n\n  handleReset() {\n      const reset = {\n        url: null,\n        blob: null,\n        chunks: null,\n        duration: {\n          h: 0,\n          m: 0,\n          s: 0\n        }\n      };\n      this.setState({ audioDetails: reset });\n    }\n\n\n\n  // RENDER FUNCTION\n  public render = (): ReactNode => {\n\n    // ************\n\n\n\n    <Recorder\n        record={true}\n        title={\"New recording\"}\n        audioURL={this.state.audioDetails.url}\n        showUIAudio\n        handleAudioStop={data => this.handleAudioStop(data)}\n        handleAudioUpload={data => this.handleAudioUpload(data)}\n        handleCountDown={data => this.handleCountDown(data)}\n        handleReset={() => this.handleReset()}\n        mimeTypeToUseWhenRecording={`audio/webm`} // For specific mimetype.\n    />\n\n    //*************\n\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        Hello, {name}! This is a custom streamlit component! &nbsp;\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          demo button\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = (): void => {\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    this.setState(\n      prevState => ({ numClicks: prevState.numClicks + 1 }),\n      () => Streamlit.setComponentValue(this.state.numClicks)\n    )\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"]},"metadata":{},"sourceType":"module"}