{"ast":null,"code":"import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit}from\"streamlit-component-lib\";import React,{Component}from'react';import AudioReactRecorder,{RecordState}from'audio-react-recorder';var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(props){var _this;_classCallCheck(this,App);_this=_super.call(this,props);_this.start=function(){_this.setState({recordState:RecordState.START});};_this.stop=function(){_this.setState({recordState:RecordState.STOP});};_this.onStop=function(audioData){console.log('audioData',audioData);};_this.state={recordState:null};return _this;}_createClass(App,[{key:\"render\",value:function render(){var recordState=this.state.recordState;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:this.onStop}),/*#__PURE__*/React.createElement(\"button\",{onClick:this.start},\"Start\"),/*#__PURE__*/React.createElement(\"button\",{onClick:this.stop},\"Stop\"));}}]);return App;}(Component);// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nvar span=document.body.appendChild(document.createElement(\"span\"));var textNode=span.appendChild(document.createTextNode(\"\"));var button=span.appendChild(document.createElement(\"button\"));button.textContent=\"Click Me!\";// Add a click handler to our button. It will send data back to Streamlit.\nvar numClicks=0;var isFocused=false;button.onclick=function(){// Increment numClicks, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nnumClicks+=1;Streamlit.setComponentValue(numClicks);};button.onfocus=function(){isFocused=true;};button.onblur=function(){isFocused=false;};/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */function onRender(event){// Get the RenderData from the event\nvar data=event.detail;// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(data.theme){// Use CSS vars to style our button border. Alternatively, the theme style\n// is defined in the data.theme object.\nvar borderStyling=\"1px solid var(\".concat(isFocused?\"--primary-color\":\"gray\",\")\");button.style.border=borderStyling;button.style.outline=borderStyling;}// Disable our button if necessary.\nbutton.disabled=data.disabled;// RenderData.args is the JSON dictionary of arguments sent from the\n// Python script.\nvar name=data.args[\"name\"];// Show \"Hello, name!\" with a non-breaking space afterwards.\ntextNode.textContent=\"Hello, \".concat(name,\"! \")+String.fromCharCode(160);// We tell Streamlit to update our frameHeight after each render event, in\n// case it has changed. (This isn't strictly necessary for the example\n// because our height stays fixed, but this is a low-cost function, so\n// there's no harm in doing it redundantly.)\nStreamlit.setFrameHeight();}// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRender);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/index.tsx"],"names":["Streamlit","React","Component","AudioReactRecorder","RecordState","App","props","start","setState","recordState","START","stop","STOP","onStop","audioData","console","log","state","span","document","body","appendChild","createElement","textNode","createTextNode","button","textContent","numClicks","isFocused","onclick","setComponentValue","onfocus","onblur","onRender","event","data","detail","theme","borderStyling","style","border","outline","disabled","name","args","String","fromCharCode","setFrameHeight","events","addEventListener","RENDER_EVENT","setComponentReady"],"mappings":"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","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport React, { Component } from 'react'\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      recordState: null\n    }\n  }\n  start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n  stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n  //audioData contains blob and blobUrl\n  onStop = (audioData) => {\n    console.log('audioData', audioData)\n  }\n  render() {\n    const { recordState } = this.state\n    return (\n      <div>\n        <AudioReactRecorder state={recordState} onStop={this.onStop} />\n        <button onClick={this.start}>Start</button>\n        <button onClick={this.stop}>Stop</button>\n      </div>\n    )\n  }\n}\n\n// Add text and a button to the DOM. (You could also add these directly\n// to index.html.)\nconst span = document.body.appendChild(document.createElement(\"span\"))\nconst textNode = span.appendChild(document.createTextNode(\"\"))\nconst button = span.appendChild(document.createElement(\"button\"))\nbutton.textContent = \"Click Me!\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\nlet numClicks = 0\nlet isFocused = false\nbutton.onclick = function(): void {\n  // Increment numClicks, and pass the new value back to\n  // Streamlit via `Streamlit.setComponentValue`.\n  numClicks += 1\n  Streamlit.setComponentValue(numClicks)\n}\n\nbutton.onfocus = function(): void {\n  isFocused = true\n}\n\nbutton.onblur = function(): void {\n  isFocused = false\n}\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${\n      isFocused ? \"--primary-color\" : \"gray\"\n    })`\n    button.style.border = borderStyling\n    button.style.outline = borderStyling\n  }\n\n  // Disable our button if necessary.\n  button.disabled = data.disabled\n\n  // RenderData.args is the JSON dictionary of arguments sent from the\n  // Python script.\n  let name = data.args[\"name\"]\n\n  // Show \"Hello, name!\" with a non-breaking space afterwards.\n  textNode.textContent = `Hello, ${name}! ` + String.fromCharCode(160)\n\n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}