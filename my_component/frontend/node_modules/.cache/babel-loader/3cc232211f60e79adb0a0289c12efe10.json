{"ast":null,"code":"import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import AudioReactRecorder,{RecordState}from'audio-react-recorder';/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */var MyComponent=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(MyComponent,_StreamlitComponentBa);var _super=_createSuper(MyComponent);function MyComponent(props){var _this;_classCallCheck(this,MyComponent);_this=_super.call(this,props);_this.start=function(){_this.setState({recordState:RecordState.START});};_this.stop=function(){_this.setState({recordState:RecordState.STOP});};_this.onStop=function(audioData){console.log('audioData',audioData);};_this.state={recordState:null};return _this;}_createClass(MyComponent,[{key:\"render\",value:function render(){var recordState=this.state.recordState;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:this.onStop}),/*#__PURE__*/React.createElement(\"button\",{onClick:this.start},\"Start\"),/*#__PURE__*/React.createElement(\"button\",{onClick:this.stop},\"Stop\"));}}]);return MyComponent;}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","MyComponent","props","start","setState","recordState","START","stop","STOP","onStop","audioData","console","log","state"],"mappings":"4kBAAA,OAEEA,sBAFF,CAGEC,uBAHF,KAIO,yBAJP,CAMA,MAAOC,CAAAA,KAAP,KAAiC,OAAjC,CACA,MAAOC,CAAAA,kBAAP,EAA6BC,WAA7B,KAAgD,sBAAhD,CAIA;AACA;AACA;AACA,G,GAEMC,CAAAA,W,gIACJ,qBAAYC,KAAZ,CAAmB,6CACjB,uBAAMA,KAAN,EADiB,MAQnBC,KARmB,CAQX,UAAM,CACZ,MAAKC,QAAL,CAAc,CACZC,WAAW,CAAEL,WAAW,CAACM,KADb,CAAd,EAGD,CAZkB,OAcnBC,IAdmB,CAcZ,UAAM,CACX,MAAKH,QAAL,CAAc,CACZC,WAAW,CAAEL,WAAW,CAACQ,IADb,CAAd,EAGD,CAlBkB,OAqBnBC,MArBmB,CAqBV,SAACC,SAAD,CAAe,CACtBC,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBF,SAAzB,EACD,CAvBkB,CAGjB,MAAKG,KAAL,CAAa,CACXR,WAAW,CAAE,IADF,CAAb,CAHiB,aAMlB,C,8CAmBD,iBAAS,CACP,GAAQA,CAAAA,WAAR,CAAwB,KAAKQ,KAA7B,CAAQR,WAAR,CAEA,mBACE,4CACE,oBAAC,kBAAD,EAAoB,KAAK,CAAEA,WAA3B,CAAwC,MAAM,CAAE,KAAKI,MAArD,EADF,cAGE,8BAAQ,OAAO,CAAE,KAAKN,KAAtB,UAHF,cAIE,8BAAQ,OAAO,CAAE,KAAKI,IAAtB,SAJF,CADF,CAQD,C,yBArCuBX,sB,EAuC1B;AACA;AACA;AACA;AACA;AACA,cAAeC,CAAAA,uBAAuB,CAACI,WAAD,CAAtC","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\nimport React, { ReactNode } from \"react\"\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\n\n\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      recordState: null\n    }\n  }\n\n  start = () => {\n    this.setState({\n      recordState: RecordState.START\n    })\n  }\n\n  stop = () => {\n    this.setState({\n      recordState: RecordState.STOP\n    })\n  }\n\n  //audioData contains blob and blobUrl\n  onStop = (audioData) => {\n    console.log('audioData', audioData)\n  }\n\n  render() {\n    const { recordState } = this.state\n\n    return (\n      <div>\n        <AudioReactRecorder state={recordState} onStop={this.onStop} />\n\n        <button onClick={this.start}>Start</button>\n        <button onClick={this.stop}>Stop</button>\n      </div>\n    )\n  }\n}\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"]},"metadata":{},"sourceType":"module"}