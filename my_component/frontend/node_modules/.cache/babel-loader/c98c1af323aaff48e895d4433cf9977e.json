{"ast":null,"code":"import _createClass from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";import _classCallCheck from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/node_modules/@babel/runtime/helpers/esm/createSuper\";import{Streamlit,StreamlitComponentBase,withStreamlitConnection}from\"streamlit-component-lib\";import React from\"react\";import AudioReactRecorder,{RecordState}from'audio-react-recorder';import'audio-react-recorder/dist/index.css';var MyComponent=/*#__PURE__*/function(_StreamlitComponentBa){_inherits(MyComponent,_StreamlitComponentBa);var _super=_createSuper(MyComponent);function MyComponent(){var _this;_classCallCheck(this,MyComponent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={isFocused:false,recordState:null,audioDataUrl:'',reset:false};_this.render=function(){// Arguments that are passed to the plugin in Python are accessible\n// via `this.props.args`. Here, we access the \"name\" arg.\n// Streamlit sends us a theme object via props that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=_this.props.theme;var style={};var recordState=_this.state.recordState;// compatibility with older vers of Streamlit that don't send theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(_this.state.isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}return/*#__PURE__*/React.createElement(\"span\",null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(AudioReactRecorder,{state:recordState,onStop:_this.onStop_audio,backgroundColor:\"rgb(255,255,255)\"}),/*#__PURE__*/React.createElement(\"audio\",{id:\"audio\",controls:true,src:_this.state.audioDataUrl}),/*#__PURE__*/React.createElement(\"button\",{id:\"record\",onClick:_this.onClick_start},\"Start Recording\"),/*#__PURE__*/React.createElement(\"button\",{id:\"stop\",onClick:_this.onClick_stop},\"Stop Recording\"),/*#__PURE__*/React.createElement(\"button\",{id:\"reset\",onClick:_this.onClick_reset},\"Reset Recording\"),/*#__PURE__*/React.createElement(\"button\",{id:\"continue\",onClick:_this.onClick_continue},\"Continue to Analyis\")));};_this.onClick_start=function(){_this.setState({reset:false,audioDataUrl:'',recordState:RecordState.START});Streamlit.setComponentValue('');};_this.onClick_stop=function(){_this.setState({reset:false,recordState:RecordState.STOP});};_this.onClick_reset=function(){_this.setState({reset:true,audioDataUrl:'',recordState:RecordState.STOP});Streamlit.setComponentValue('');};_this.onClick_continue=function(){if(_this.state.audioDataUrl!=''){Streamlit.setComponentValue(_this.state.audioDataUrl);}};_this.onStop_audio=function(data){if(_this.state.reset==true){_this.setState({audioDataUrl:''});Streamlit.setComponentValue('');}else{_this.setState({audioDataUrl:data.url});}};return _this;}return _createClass(MyComponent);}(StreamlitComponentBase);// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady();// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight();","map":{"version":3,"sources":["/Users/stefan_rmmr/software_dev/beat_inspector/my_component/frontend/src/MyComponent.tsx"],"names":["Streamlit","StreamlitComponentBase","withStreamlitConnection","React","AudioReactRecorder","RecordState","MyComponent","state","isFocused","recordState","audioDataUrl","reset","render","theme","props","style","borderStyling","primaryColor","border","outline","onStop_audio","onClick_start","onClick_stop","onClick_reset","onClick_continue","setState","START","setComponentValue","STOP","data","url","setComponentReady","setFrameHeight"],"mappings":"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","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport AudioReactRecorder, { RecordState } from 'audio-react-recorder'\nimport 'audio-react-recorder/dist/index.css'\n\ninterface State {\n  isFocused: boolean\n  recordState: null\n  audioDataUrl: string\n  reset: boolean\n}\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { isFocused: false, recordState: null, audioDataUrl: '', reset: false}\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    const { recordState } = this.state\n\n    // compatibility with older vers of Streamlit that don't send theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"}`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    return (\n      <span>\n        <div>\n          <AudioReactRecorder\n            state={recordState}\n            onStop={this.onStop_audio}\n            backgroundColor='rgb(255,255,255)'\n          />\n\n          <audio\n            id='audio'\n            controls\n            src={this.state.audioDataUrl}\n          ></audio>\n\n          <button id='record' onClick={this.onClick_start}>\n            Start Recording\n          </button>\n          <button id='stop' onClick={this.onClick_stop}>\n            Stop Recording\n          </button>\n          <button id='reset' onClick={this.onClick_reset}>\n            Reset Recording\n          </button>\n          <button id='continue' onClick={this.onClick_continue}>\n            Continue to Analyis\n          </button>\n\n        </div>\n      </span>\n    )\n  }\n\n  private onClick_start = () => {\n    this.setState({\n      reset: false,\n      audioDataUrl: '',\n      recordState: RecordState.START\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_stop = () => {\n    this.setState({\n      reset: false,\n      recordState: RecordState.STOP\n    })\n  }\n\n  private onClick_reset = () => {\n    this.setState({\n      reset: true,\n      audioDataUrl: '',\n      recordState: RecordState.STOP\n    })\n    Streamlit.setComponentValue('')\n  }\n\n  private onClick_continue = () => {\n    if (this.state.audioDataUrl != '')\n    {\n      Streamlit.setComponentValue(this.state.audioDataUrl)\n    }\n  }\n\n  private onStop_audio = (data) => {\n    if (this.state.reset == true)\n    {\n      this.setState({\n        audioDataUrl: ''\n      })\n      Streamlit.setComponentValue('')\n    }else{\n      this.setState({\n        audioDataUrl: data.url\n      })\n    }\n\n  }\n\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"]},"metadata":{},"sourceType":"module"}